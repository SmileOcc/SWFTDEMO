// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: const.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Const.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - COMMONConstRoot

@implementation COMMONConstRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum COMMONPageDirection

GPBEnumDescriptor *COMMONPageDirection_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PdNext\000PdPrev\000";
    static const int32_t values[] = {
        COMMONPageDirection_PdNext,
        COMMONPageDirection_PdPrev,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONPageDirection)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONPageDirection_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONPageDirection_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONPageDirection_PdNext:
    case COMMONPageDirection_PdPrev:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum COMMONSortDirection

GPBEnumDescriptor *COMMONSortDirection_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SdAsc\000SdDesc\000";
    static const int32_t values[] = {
        COMMONSortDirection_SdAsc,
        COMMONSortDirection_SdDesc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONSortDirection)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONSortDirection_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONSortDirection_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONSortDirection_SdAsc:
    case COMMONSortDirection_SdDesc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum COMMONSectorCode

GPBEnumDescriptor *COMMONSectorCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ScNone\000ScHsA\000ScHsB\000ScSseA\000ScSseB\000ScSzseA"
        "\000ScSzseB\000ScHsFund\000ScHsOption\000ScHsIndex\000S"
        "cHsBond\000ScHsGemb\000ScHsSmeb\000ScHsThird\000ScHk"
        "Sh\000ScHkSz\000ScHsNdrr\000ScHsCdr\000ScHsIe\000ScHkex"
        "\000ScHkIndex\000ScHkMain\000ScHkGemb\000ScHkEtf\000ScH"
        "kDw\000ScHkCbbc\000ScShHk\000ScSzHk\000ScUs\000ScNyse\000S"
        "cNasdaq\000ScUsIndex\000ScUsEtf\000ScChinaConcept"
        "\000ScUsStars\000ScHsHot\000ScHsIndustry\000ScHsRegi"
        "on\000ScHsConcept\000ScHsRank\000ScHkIndustry\000ScU"
        "sIndustry\000ScAh\000";
    static const int32_t values[] = {
        COMMONSectorCode_ScNone,
        COMMONSectorCode_ScHsA,
        COMMONSectorCode_ScHsB,
        COMMONSectorCode_ScSseA,
        COMMONSectorCode_ScSseB,
        COMMONSectorCode_ScSzseA,
        COMMONSectorCode_ScSzseB,
        COMMONSectorCode_ScHsFund,
        COMMONSectorCode_ScHsOption,
        COMMONSectorCode_ScHsIndex,
        COMMONSectorCode_ScHsBond,
        COMMONSectorCode_ScHsGemb,
        COMMONSectorCode_ScHsSmeb,
        COMMONSectorCode_ScHsThird,
        COMMONSectorCode_ScHkSh,
        COMMONSectorCode_ScHkSz,
        COMMONSectorCode_ScHsNdrr,
        COMMONSectorCode_ScHsCdr,
        COMMONSectorCode_ScHsIe,
        COMMONSectorCode_ScHkex,
        COMMONSectorCode_ScHkIndex,
        COMMONSectorCode_ScHkMain,
        COMMONSectorCode_ScHkGemb,
        COMMONSectorCode_ScHkEtf,
        COMMONSectorCode_ScHkDw,
        COMMONSectorCode_ScHkCbbc,
        COMMONSectorCode_ScShHk,
        COMMONSectorCode_ScSzHk,
        COMMONSectorCode_ScUs,
        COMMONSectorCode_ScNyse,
        COMMONSectorCode_ScNasdaq,
        COMMONSectorCode_ScUsIndex,
        COMMONSectorCode_ScUsEtf,
        COMMONSectorCode_ScChinaConcept,
        COMMONSectorCode_ScUsStars,
        COMMONSectorCode_ScHsHot,
        COMMONSectorCode_ScHsIndustry,
        COMMONSectorCode_ScHsRegion,
        COMMONSectorCode_ScHsConcept,
        COMMONSectorCode_ScHsRank,
        COMMONSectorCode_ScHkIndustry,
        COMMONSectorCode_ScUsIndustry,
        COMMONSectorCode_ScAh,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONSectorCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONSectorCode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONSectorCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONSectorCode_ScNone:
    case COMMONSectorCode_ScHsA:
    case COMMONSectorCode_ScHsB:
    case COMMONSectorCode_ScSseA:
    case COMMONSectorCode_ScSseB:
    case COMMONSectorCode_ScSzseA:
    case COMMONSectorCode_ScSzseB:
    case COMMONSectorCode_ScHsFund:
    case COMMONSectorCode_ScHsOption:
    case COMMONSectorCode_ScHsIndex:
    case COMMONSectorCode_ScHsBond:
    case COMMONSectorCode_ScHsGemb:
    case COMMONSectorCode_ScHsSmeb:
    case COMMONSectorCode_ScHsThird:
    case COMMONSectorCode_ScHkSh:
    case COMMONSectorCode_ScHkSz:
    case COMMONSectorCode_ScHsNdrr:
    case COMMONSectorCode_ScHsCdr:
    case COMMONSectorCode_ScHsIe:
    case COMMONSectorCode_ScHkex:
    case COMMONSectorCode_ScHkIndex:
    case COMMONSectorCode_ScHkMain:
    case COMMONSectorCode_ScHkGemb:
    case COMMONSectorCode_ScHkEtf:
    case COMMONSectorCode_ScHkDw:
    case COMMONSectorCode_ScHkCbbc:
    case COMMONSectorCode_ScShHk:
    case COMMONSectorCode_ScSzHk:
    case COMMONSectorCode_ScUs:
    case COMMONSectorCode_ScNyse:
    case COMMONSectorCode_ScNasdaq:
    case COMMONSectorCode_ScUsIndex:
    case COMMONSectorCode_ScUsEtf:
    case COMMONSectorCode_ScChinaConcept:
    case COMMONSectorCode_ScUsStars:
    case COMMONSectorCode_ScHsHot:
    case COMMONSectorCode_ScHsIndustry:
    case COMMONSectorCode_ScHsRegion:
    case COMMONSectorCode_ScHsConcept:
    case COMMONSectorCode_ScHsRank:
    case COMMONSectorCode_ScHkIndustry:
    case COMMONSectorCode_ScUsIndustry:
    case COMMONSectorCode_ScAh:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum COMMONLangType

GPBEnumDescriptor *COMMONLangType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LangNone\000LangChn\000LangChi\000LangEng\000";
    static const int32_t values[] = {
        COMMONLangType_LangNone,
        COMMONLangType_LangChn,
        COMMONLangType_LangChi,
        COMMONLangType_LangEng,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(COMMONLangType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:COMMONLangType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL COMMONLangType_IsValidValue(int32_t value__) {
  switch (value__) {
    case COMMONLangType_LangNone:
    case COMMONLangType_LangChn:
    case COMMONLangType_LangChi:
    case COMMONLangType_LangEng:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
