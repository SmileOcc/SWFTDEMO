// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Push.pbobjc.h"
#import "Query.pbobjc.h"
#import "Market.pbobjc.h"
#import "Quote.pbobjc.h"
#import "Cryptos.pbobjc.h"
#import "Kline.pbobjc.h"
#import "Ts.pbobjc.h"
#import "Tick.pbobjc.h"
#import "Secu.pbobjc.h"
#import "Capflow.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(API_CLIENTCapFlowPush);
GPBObjCClassDeclaration(API_CLIENTCapNetPush);
GPBObjCClassDeclaration(API_CLIENTError);
GPBObjCClassDeclaration(API_CLIENTKLPush);
GPBObjCClassDeclaration(API_CLIENTMSPush);
GPBObjCClassDeclaration(API_CLIENTOrderBookPush);
GPBObjCClassDeclaration(API_CLIENTQuotePush);
GPBObjCClassDeclaration(API_CLIENTRTPush);
GPBObjCClassDeclaration(API_CLIENTTKPush);
GPBObjCClassDeclaration(API_CLIENTTSPush);
GPBObjCClassDeclaration(OBJECT_MARKETStatus);
GPBObjCClassDeclaration(OBJECT_QUOTECapFlowData);
GPBObjCClassDeclaration(OBJECT_QUOTECapNetData);
GPBObjCClassDeclaration(OBJECT_QUOTECryptosKline);
GPBObjCClassDeclaration(OBJECT_QUOTECryptosQuote);
GPBObjCClassDeclaration(OBJECT_QUOTECryptosTick);
GPBObjCClassDeclaration(OBJECT_QUOTECryptosTimeline);
GPBObjCClassDeclaration(OBJECT_QUOTEKLineData);
GPBObjCClassDeclaration(OBJECT_QUOTEOrderBook);
GPBObjCClassDeclaration(OBJECT_QUOTEQuote);
GPBObjCClassDeclaration(OBJECT_QUOTETSData);
GPBObjCClassDeclaration(OBJECT_QUOTETickData);
GPBObjCClassDeclaration(OBJECT_SECUFullID);

#pragma mark - API_CLIENTPushRoot

@implementation API_CLIENTPushRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - API_CLIENTPushRoot_FileDescriptor

static GPBFileDescriptor *API_CLIENTPushRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.api.client"
                                                 objcPrefix:@"API_CLIENT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum API_CLIENTPushType

GPBEnumDescriptor *API_CLIENTPushType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Rt\000Ts\000Tk\000Kl\000Ms\000Cap\000Cn\000Tspre\000Tsafter"
        "\000Tkpre\000Tkafter\000Ob\000Obchart\000";
    static const int32_t values[] = {
        API_CLIENTPushType_None,
        API_CLIENTPushType_Rt,
        API_CLIENTPushType_Ts,
        API_CLIENTPushType_Tk,
        API_CLIENTPushType_Kl,
        API_CLIENTPushType_Ms,
        API_CLIENTPushType_Cap,
        API_CLIENTPushType_Cn,
        API_CLIENTPushType_Tspre,
        API_CLIENTPushType_Tsafter,
        API_CLIENTPushType_Tkpre,
        API_CLIENTPushType_Tkafter,
        API_CLIENTPushType_Ob,
        API_CLIENTPushType_Obchart,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTPushType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTPushType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTPushType_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTPushType_None:
    case API_CLIENTPushType_Rt:
    case API_CLIENTPushType_Ts:
    case API_CLIENTPushType_Tk:
    case API_CLIENTPushType_Kl:
    case API_CLIENTPushType_Ms:
    case API_CLIENTPushType_Cap:
    case API_CLIENTPushType_Cn:
    case API_CLIENTPushType_Tspre:
    case API_CLIENTPushType_Tsafter:
    case API_CLIENTPushType_Tkpre:
    case API_CLIENTPushType_Tkafter:
    case API_CLIENTPushType_Ob:
    case API_CLIENTPushType_Obchart:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTPushDataType

GPBEnumDescriptor *API_CLIENTPushDataType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Normal\000Cryptos\000Futu\000Uscomp\000";
    static const int32_t values[] = {
        API_CLIENTPushDataType_Normal,
        API_CLIENTPushDataType_Cryptos,
        API_CLIENTPushDataType_Futu,
        API_CLIENTPushDataType_Uscomp,
    };
    static const char *extraTextFormatInfo = "\003\000\006\000\001\007\000\003c\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTPushDataType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTPushDataType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTPushDataType_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTPushDataType_Normal:
    case API_CLIENTPushDataType_Cryptos:
    case API_CLIENTPushDataType_Futu:
    case API_CLIENTPushDataType_Uscomp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - API_CLIENTSub

@implementation API_CLIENTSub

@dynamic topicArray, topicArray_Count;

typedef struct API_CLIENTSub__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *topicArray;
} API_CLIENTSub__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topicArray",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSub_FieldNumber_TopicArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSub__storage_, topicArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSub class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSub__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTSubRsp

@implementation API_CLIENTSubRsp

@dynamic hasError, error;

typedef struct API_CLIENTSubRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
} API_CLIENTSubRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTSubRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSubRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSubRsp class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSubRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTUnSub

@implementation API_CLIENTUnSub

@dynamic topicArray, topicArray_Count;

typedef struct API_CLIENTUnSub__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *topicArray;
} API_CLIENTUnSub__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topicArray",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTUnSub_FieldNumber_TopicArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTUnSub__storage_, topicArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTUnSub class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTUnSub__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTUnSubRsp

@implementation API_CLIENTUnSubRsp

@dynamic hasError, error;

typedef struct API_CLIENTUnSubRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
} API_CLIENTUnSubRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTUnSubRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTUnSubRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTUnSubRsp class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTUnSubRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTAcAuthReq

@implementation API_CLIENTAcAuthReq

@dynamic accessToken;

typedef struct API_CLIENTAcAuthReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *accessToken;
} API_CLIENTAcAuthReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accessToken",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTAcAuthReq_FieldNumber_AccessToken,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTAcAuthReq__storage_, accessToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTAcAuthReq class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTAcAuthReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001K\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTAcAuthRsp

@implementation API_CLIENTAcAuthRsp

@dynamic hasError, error;
@dynamic authBitmap;
@dynamic repeatAuth;

typedef struct API_CLIENTAcAuthRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t authBitmap;
  API_CLIENTError *error;
} API_CLIENTAcAuthRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTAcAuthRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTAcAuthRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authBitmap",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTAcAuthRsp_FieldNumber_AuthBitmap,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTAcAuthRsp__storage_, authBitmap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "repeatAuth",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTAcAuthRsp_FieldNumber_RepeatAuth,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTAcAuthRsp class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTAcAuthRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002J\000\003J\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTPush

@implementation API_CLIENTPush

@dynamic topic;
@dynamic quoteArray, quoteArray_Count;

typedef struct API_CLIENTPush__storage_ {
  uint32_t _has_storage_[1];
  NSString *topic;
  NSMutableArray *quoteArray;
} API_CLIENTPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "topic",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTPush_FieldNumber_Topic,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTPush__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "quoteArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTQuotePush),
        .number = API_CLIENTPush_FieldNumber_QuoteArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTPush__storage_, quoteArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTQuotePush

@implementation API_CLIENTQuotePush

@dynamic type;
@dynamic hasRt, rt;
@dynamic hasTs, ts;
@dynamic hasTk, tk;
@dynamic hasKl, kl;
@dynamic hasMs, ms;
@dynamic hasCap, cap;
@dynamic hasCn, cn;
@dynamic hasOb, ob;

typedef struct API_CLIENTQuotePush__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTPushType type;
  API_CLIENTRTPush *rt;
  API_CLIENTTSPush *ts;
  API_CLIENTTKPush *tk;
  API_CLIENTKLPush *kl;
  API_CLIENTMSPush *ms;
  API_CLIENTCapFlowPush *cap;
  API_CLIENTCapNetPush *cn;
  API_CLIENTOrderBookPush *ob;
} API_CLIENTQuotePush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = API_CLIENTPushType_EnumDescriptor,
        .number = API_CLIENTQuotePush_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rt",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTRTPush),
        .number = API_CLIENTQuotePush_FieldNumber_Rt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, rt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ts",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTSPush),
        .number = API_CLIENTQuotePush_FieldNumber_Ts,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, ts),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tk",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTKPush),
        .number = API_CLIENTQuotePush_FieldNumber_Tk,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, tk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kl",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTKLPush),
        .number = API_CLIENTQuotePush_FieldNumber_Kl,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, kl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ms",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTMSPush),
        .number = API_CLIENTQuotePush_FieldNumber_Ms,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, ms),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cap",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCapFlowPush),
        .number = API_CLIENTQuotePush_FieldNumber_Cap,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, cap),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cn",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCapNetPush),
        .number = API_CLIENTQuotePush_FieldNumber_Cn,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, cn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ob",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTOrderBookPush),
        .number = API_CLIENTQuotePush_FieldNumber_Ob,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTQuotePush__storage_, ob),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTQuotePush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTQuotePush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTQuotePush_Type_RawValue(API_CLIENTQuotePush *message) {
  GPBDescriptor *descriptor = [API_CLIENTQuotePush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTQuotePush_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTQuotePush_Type_RawValue(API_CLIENTQuotePush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTQuotePush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTQuotePush_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTPush

@implementation API_CLIENTRTPush

@dynamic scene;
@dynamic customFlag;
@dynamic hasQuote, quote;
@dynamic sendTime;
@dynamic dataType;
@dynamic hasCryptosData, cryptosData;

typedef struct API_CLIENTRTPush__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  API_CLIENTPushDataType dataType;
  OBJECT_QUOTEQuote *quote;
  OBJECT_QUOTECryptosQuote *cryptosData;
  uint64_t customFlag;
  uint64_t sendTime;
} API_CLIENTRTPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTPush_FieldNumber_Scene,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTPush__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTPush_FieldNumber_CustomFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTPush__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "quote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTPush_FieldNumber_Quote,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTPush__storage_, quote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTPush_FieldNumber_SendTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTPush__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = API_CLIENTPushDataType_EnumDescriptor,
        .number = API_CLIENTRTPush_FieldNumber_DataType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTPush__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cryptosData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECryptosQuote),
        .number = API_CLIENTRTPush_FieldNumber_CryptosData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTRTPush__storage_, cryptosData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\n\000\004\010\000\005\010\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTPush_Scene_RawValue(API_CLIENTRTPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPush_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTPush_Scene_RawValue(API_CLIENTRTPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPush_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTPush_DataType_RawValue(API_CLIENTRTPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPush_FieldNumber_DataType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTPush_DataType_RawValue(API_CLIENTRTPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPush_FieldNumber_DataType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSPush

@implementation API_CLIENTTSPush

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasData_p, data_p;
@dynamic sendTime;
@dynamic dataType;
@dynamic hasCryptosData, cryptosData;

typedef struct API_CLIENTTSPush__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTPushDataType dataType;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTETSData *data_p;
  OBJECT_QUOTECryptosTimeline *cryptosData;
  uint64_t sendTime;
} API_CLIENTTSPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSPush_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSPush_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTSPush__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETSData),
        .number = API_CLIENTTSPush_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTSPush__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSPush_FieldNumber_SendTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTSPush__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = API_CLIENTPushDataType_EnumDescriptor,
        .number = API_CLIENTTSPush_FieldNumber_DataType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTSPush__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cryptosData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECryptosTimeline),
        .number = API_CLIENTTSPush_FieldNumber_CryptosData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTTSPush__storage_, cryptosData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\t\000\004\010\000\005\010\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSPush_DataType_RawValue(API_CLIENTTSPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSPush_FieldNumber_DataType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSPush_DataType_RawValue(API_CLIENTTSPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSPush_FieldNumber_DataType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTKPush

@implementation API_CLIENTTKPush

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasData_p, data_p;
@dynamic sendTime;
@dynamic dataType;
@dynamic hasCryptosData, cryptosData;

typedef struct API_CLIENTTKPush__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTPushDataType dataType;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTETickData *data_p;
  OBJECT_QUOTECryptosTick *cryptosData;
  uint64_t sendTime;
} API_CLIENTTKPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTKPush_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTKPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTKPush_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTKPush__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETickData),
        .number = API_CLIENTTKPush_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTKPush__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTKPush_FieldNumber_SendTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTKPush__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = API_CLIENTPushDataType_EnumDescriptor,
        .number = API_CLIENTTKPush_FieldNumber_DataType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTKPush__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cryptosData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECryptosTick),
        .number = API_CLIENTTKPush_FieldNumber_CryptosData,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTTKPush__storage_, cryptosData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTKPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTKPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\t\000\004\010\000\005\010\000\006\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTKPush_DataType_RawValue(API_CLIENTTKPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTTKPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTKPush_FieldNumber_DataType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTKPush_DataType_RawValue(API_CLIENTTKPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTKPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTKPush_FieldNumber_DataType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTKLPush

@implementation API_CLIENTKLPush

@dynamic hasId_p, id_p;
@dynamic type;
@dynamic direction;
@dynamic priceBase;
@dynamic hasData_p, data_p;
@dynamic sendTime;
@dynamic quoteTime;
@dynamic dataType;
@dynamic hasCryptosData, cryptosData;

typedef struct API_CLIENTKLPush__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEKLineType type;
  OBJECT_QUOTEKLineDirection direction;
  uint32_t priceBase;
  API_CLIENTPushDataType dataType;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTEKLineData *data_p;
  OBJECT_QUOTECryptosKline *cryptosData;
  uint64_t sendTime;
  uint64_t quoteTime;
} API_CLIENTKLPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTKLPush_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEKLineType_EnumDescriptor,
        .number = API_CLIENTKLPush_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEKLineDirection_EnumDescriptor,
        .number = API_CLIENTKLPush_FieldNumber_Direction,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLPush_FieldNumber_PriceBase,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEKLineData),
        .number = API_CLIENTKLPush_FieldNumber_Data_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLPush_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "quoteTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLPush_FieldNumber_QuoteTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, quoteTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dataType",
        .dataTypeSpecific.enumDescFunc = API_CLIENTPushDataType_EnumDescriptor,
        .number = API_CLIENTKLPush_FieldNumber_DataType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, dataType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cryptosData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECryptosKline),
        .number = API_CLIENTKLPush_FieldNumber_CryptosData,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTKLPush__storage_, cryptosData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTKLPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTKLPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\005\t\000\007\010\000\010\t\000\t\010\000\n\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTKLPush_Type_RawValue(API_CLIENTKLPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLPush_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLPush_Type_RawValue(API_CLIENTKLPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLPush_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTKLPush_Direction_RawValue(API_CLIENTKLPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLPush_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLPush_Direction_RawValue(API_CLIENTKLPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLPush_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTKLPush_DataType_RawValue(API_CLIENTKLPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLPush_FieldNumber_DataType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLPush_DataType_RawValue(API_CLIENTKLPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLPush_FieldNumber_DataType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTMSPush

@implementation API_CLIENTMSPush

@dynamic hasStatus, status;

typedef struct API_CLIENTMSPush__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETStatus *status;
} API_CLIENTMSPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_MARKETStatus),
        .number = API_CLIENTMSPush_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTMSPush__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTMSPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTMSPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCapFlowPush

@implementation API_CLIENTCapFlowPush

@dynamic hasId_p, id_p;
@dynamic type;
@dynamic priceBase;
@dynamic hasCapflow, capflow;

typedef struct API_CLIENTCapFlowPush__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTECapFlowType type;
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTECapFlowData *capflow;
} API_CLIENTCapFlowPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapFlowPush_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapFlowPush_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowPush__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapFlowPush_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowPush__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "capflow",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECapFlowData),
        .number = API_CLIENTCapFlowPush_FieldNumber_Capflow,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowPush__storage_, capflow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapFlowPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapFlowPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapFlowPush_Type_RawValue(API_CLIENTCapFlowPush *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowPush_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapFlowPush_Type_RawValue(API_CLIENTCapFlowPush *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowPush descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowPush_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCapNetPush

@implementation API_CLIENTCapNetPush

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasCapnet, capnet;

typedef struct API_CLIENTCapNetPush__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTECapNetData *capnet;
} API_CLIENTCapNetPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapNetPush_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapNetPush_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetPush__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "capnet",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECapNetData),
        .number = API_CLIENTCapNetPush_FieldNumber_Capnet,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetPush__storage_, capnet),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapNetPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapNetPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTOrderBookPush

@implementation API_CLIENTOrderBookPush

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasOrderBook, orderBook;

typedef struct API_CLIENTOrderBookPush__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTEOrderBook *orderBook;
} API_CLIENTOrderBookPush__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTOrderBookPush_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTOrderBookPush__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTOrderBookPush_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTOrderBookPush__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "orderBook",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOrderBook),
        .number = API_CLIENTOrderBookPush_FieldNumber_OrderBook,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTOrderBookPush__storage_, orderBook),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTOrderBookPush class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTOrderBookPush__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRtSimpleQuote

@implementation API_CLIENTRtSimpleQuote

@dynamic hasId_p, id_p;
@dynamic seq;
@dynamic priceBase;
@dynamic time;
@dynamic price;
@dynamic msgSendTime;
@dynamic askPrice;
@dynamic askSize;
@dynamic bidPrice;
@dynamic bidSize;
@dynamic quoteType;

typedef struct API_CLIENTRtSimpleQuote__storage_ {
  uint32_t _has_storage_[1];
  uint32_t seq;
  uint32_t priceBase;
  OBJECT_QUOTEQuoteType quoteType;
  OBJECT_SECUFullID *id_p;
  uint64_t time;
  int64_t price;
  int64_t msgSendTime;
  int64_t askPrice;
  int64_t askSize;
  int64_t bidPrice;
  int64_t bidSize;
} API_CLIENTRtSimpleQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRtSimpleQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_Seq,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_Time,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "price",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_Price,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "msgSendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_MsgSendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, msgSendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "askPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_AskPrice,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, askPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "askSize",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_AskSize,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, askSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bidPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_BidPrice,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, bidPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bidSize",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_BidSize,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, bidSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "quoteType",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteType_EnumDescriptor,
        .number = API_CLIENTRtSimpleQuote_FieldNumber_QuoteType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(API_CLIENTRtSimpleQuote__storage_, quoteType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRtSimpleQuote class]
                                     rootClass:[API_CLIENTPushRoot class]
                                          file:API_CLIENTPushRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRtSimpleQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRtSimpleQuote_QuoteType_RawValue(API_CLIENTRtSimpleQuote *message) {
  GPBDescriptor *descriptor = [API_CLIENTRtSimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRtSimpleQuote_FieldNumber_QuoteType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRtSimpleQuote_QuoteType_RawValue(API_CLIENTRtSimpleQuote *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRtSimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRtSimpleQuote_FieldNumber_QuoteType];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
