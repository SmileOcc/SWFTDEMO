// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tick.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Tick.pbobjc.h"
#import "Secu.pbobjc.h"
#import "Market.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(OBJECT_QUOTETickData);
GPBObjCClassDeclaration(OBJECT_SECUFullID);

#pragma mark - OBJECT_QUOTETickRoot

@implementation OBJECT_QUOTETickRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OBJECT_QUOTETickRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_QUOTETickRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.quote"
                                                 objcPrefix:@"OBJECT_QUOTE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_QUOTETickDirection

GPBEnumDescriptor *OBJECT_QUOTETickDirection_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TdBoth\000TdBid\000TdAsk\000";
    static const int32_t values[] = {
        OBJECT_QUOTETickDirection_TdBoth,
        OBJECT_QUOTETickDirection_TdBid,
        OBJECT_QUOTETickDirection_TdAsk,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTETickDirection)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTETickDirection_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTETickDirection_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTETickDirection_TdBoth:
    case OBJECT_QUOTETickDirection_TdBid:
    case OBJECT_QUOTETickDirection_TdAsk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_QUOTETick

@implementation OBJECT_QUOTETick

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasData_p, data_p;

typedef struct OBJECT_QUOTETick__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTETickData *data_p;
} OBJECT_QUOTETick__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTETick_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETick__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETick_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETick__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETickData),
        .number = OBJECT_QUOTETick_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETick__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTETick class]
                                     rootClass:[OBJECT_QUOTETickRoot class]
                                          file:OBJECT_QUOTETickRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTETick__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTETickData

@implementation OBJECT_QUOTETickData

@dynamic id_p;
@dynamic time;
@dynamic price;
@dynamic volume;
@dynamic direction;
@dynamic tick;
@dynamic bidOrderNo;
@dynamic bidOrderSize;
@dynamic askOrderNo;
@dynamic askOrderSize;
@dynamic trdType;
@dynamic exchange;

typedef struct OBJECT_QUOTETickData__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTETickDirection direction;
  uint32_t tick;
  uint32_t trdType;
  OBJECT_MARKETExchange exchange;
  uint64_t id_p;
  uint64_t time;
  int64_t price;
  uint64_t volume;
  int64_t bidOrderNo;
  uint64_t bidOrderSize;
  int64_t askOrderNo;
  uint64_t askOrderSize;
} OBJECT_QUOTETickData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "price",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_Volume,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTETickDirection_EnumDescriptor,
        .number = OBJECT_QUOTETickData_FieldNumber_Direction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tick",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_Tick,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, tick),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bidOrderNo",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_BidOrderNo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, bidOrderNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bidOrderSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_BidOrderSize,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, bidOrderSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "askOrderNo",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_AskOrderNo,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, askOrderNo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "askOrderSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_AskOrderSize,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, askOrderSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "trdType",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTETickData_FieldNumber_TrdType,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, trdType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = OBJECT_QUOTETickData_FieldNumber_Exchange,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTETickData__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTETickData class]
                                     rootClass:[OBJECT_QUOTETickRoot class]
                                          file:OBJECT_QUOTETickRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTETickData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\010\n\000\t\014\000\n\n\000\013\014\000\014\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTETickData_Direction_RawValue(OBJECT_QUOTETickData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTETickData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTETickData_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTETickData_Direction_RawValue(OBJECT_QUOTETickData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTETickData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTETickData_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTETickData_Exchange_RawValue(OBJECT_QUOTETickData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTETickData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTETickData_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTETickData_Exchange_RawValue(OBJECT_QUOTETickData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTETickData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTETickData_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
