// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scm.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Scm.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OBJECT_QUOTEScmRoot

@implementation OBJECT_QUOTEScmRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - OBJECT_QUOTEScmRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_QUOTEScmRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.quote"
                                                 objcPrefix:@"OBJECT_QUOTE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_QUOTEScmScene

GPBEnumDescriptor *OBJECT_QUOTEScmScene_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "QuotaOneDay\000QuotaFiveDay\000";
    static const int32_t values[] = {
        OBJECT_QUOTEScmScene_QuotaOneDay,
        OBJECT_QUOTEScmScene_QuotaFiveDay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEScmScene)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEScmScene_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEScmScene_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEScmScene_QuotaOneDay:
    case OBJECT_QUOTEScmScene_QuotaFiveDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEScmStatus

GPBEnumDescriptor *OBJECT_QUOTEScmStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AmountUnusable\000AmountSable\000";
    static const int32_t values[] = {
        OBJECT_QUOTEScmStatus_AmountUnusable,
        OBJECT_QUOTEScmStatus_AmountSable,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEScmStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEScmStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEScmStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEScmStatus_AmountUnusable:
    case OBJECT_QUOTEScmStatus_AmountSable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEScmCapflow

GPBEnumDescriptor *OBJECT_QUOTEScmCapflow_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CapitalSb\000CapitalNb\000";
    static const int32_t values[] = {
        OBJECT_QUOTEScmCapflow_CapitalSb,
        OBJECT_QUOTEScmCapflow_CapitalNb,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEScmCapflow)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEScmCapflow_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEScmCapflow_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEScmCapflow_CapitalSb:
    case OBJECT_QUOTEScmCapflow_CapitalNb:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_QUOTEScmData

@implementation OBJECT_QUOTEScmData

@dynamic time;
@dynamic thresholdAmount;
@dynamic posAmt;
@dynamic amountStatus;
@dynamic captialFlow;
@dynamic turnoverBuy;
@dynamic turnoverSel;
@dynamic netTurnover;

typedef struct OBJECT_QUOTEScmData__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEScmStatus amountStatus;
  OBJECT_QUOTEScmCapflow captialFlow;
  int64_t time;
  int64_t thresholdAmount;
  int64_t posAmt;
  int64_t turnoverBuy;
  int64_t turnoverSel;
  int64_t netTurnover;
} OBJECT_QUOTEScmData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmData_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "thresholdAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmData_FieldNumber_ThresholdAmount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, thresholdAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "posAmt",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmData_FieldNumber_PosAmt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, posAmt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "amountStatus",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEScmStatus_EnumDescriptor,
        .number = OBJECT_QUOTEScmData_FieldNumber_AmountStatus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, amountStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "captialFlow",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEScmCapflow_EnumDescriptor,
        .number = OBJECT_QUOTEScmData_FieldNumber_CaptialFlow,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, captialFlow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "turnoverBuy",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmData_FieldNumber_TurnoverBuy,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, turnoverBuy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "turnoverSel",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmData_FieldNumber_TurnoverSel,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, turnoverSel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netTurnover",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmData_FieldNumber_NetTurnover,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmData__storage_, netTurnover),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEScmData class]
                                     rootClass:[OBJECT_QUOTEScmRoot class]
                                          file:OBJECT_QUOTEScmRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEScmData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\003\017\000\004\006\000\005\014\000\006\013\000\007\013\000\010\013\000\t\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEScmData_AmountStatus_RawValue(OBJECT_QUOTEScmData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEScmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEScmData_FieldNumber_AmountStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEScmData_AmountStatus_RawValue(OBJECT_QUOTEScmData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEScmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEScmData_FieldNumber_AmountStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTEScmData_CaptialFlow_RawValue(OBJECT_QUOTEScmData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEScmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEScmData_FieldNumber_CaptialFlow];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEScmData_CaptialFlow_RawValue(OBJECT_QUOTEScmData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEScmData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEScmData_FieldNumber_CaptialFlow];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEScmKline

@implementation OBJECT_QUOTEScmKline

@dynamic cycletime;
@dynamic captialFlow;
@dynamic worth;

typedef struct OBJECT_QUOTEScmKline__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEScmCapflow captialFlow;
  int64_t cycletime;
  int64_t worth;
} OBJECT_QUOTEScmKline__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cycletime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmKline_FieldNumber_Cycletime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmKline__storage_, cycletime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "captialFlow",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEScmCapflow_EnumDescriptor,
        .number = OBJECT_QUOTEScmKline_FieldNumber_CaptialFlow,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmKline__storage_, captialFlow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "worth",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEScmKline_FieldNumber_Worth,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEScmKline__storage_, worth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEScmKline class]
                                     rootClass:[OBJECT_QUOTEScmRoot class]
                                          file:OBJECT_QUOTEScmRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEScmKline__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\013\000\003E\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEScmKline_CaptialFlow_RawValue(OBJECT_QUOTEScmKline *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEScmKline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEScmKline_FieldNumber_CaptialFlow];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEScmKline_CaptialFlow_RawValue(OBJECT_QUOTEScmKline *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEScmKline descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEScmKline_FieldNumber_CaptialFlow];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
