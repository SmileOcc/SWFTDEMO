// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capflow.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Capflow.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OBJECT_QUOTECapflowRoot

@implementation OBJECT_QUOTECapflowRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - OBJECT_QUOTECapflowRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_QUOTECapflowRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.quote"
                                                 objcPrefix:@"OBJECT_QUOTE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_QUOTECapFlowType

GPBEnumDescriptor *OBJECT_QUOTECapFlowType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OneDay\000FiveDay\000";
    static const int32_t values[] = {
        OBJECT_QUOTECapFlowType_OneDay,
        OBJECT_QUOTECapFlowType_FiveDay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTECapFlowType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTECapFlowType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTECapFlowType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTECapFlowType_OneDay:
    case OBJECT_QUOTECapFlowType_FiveDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_QUOTECapFlowData

@implementation OBJECT_QUOTECapFlowData

@dynamic time;
@dynamic total;
@dynamic bin;
@dynamic min;
@dynamic sin;
@dynamic bout;
@dynamic mout;
@dynamic sout;
@dynamic netbin;
@dynamic netmin;
@dynamic netsin;
@dynamic in_p;
@dynamic out_p;
@dynamic netin;
@dynamic binprop;
@dynamic minprop;
@dynamic sinprop;
@dynamic boutprop;
@dynamic moutprop;
@dynamic soutprop;
@dynamic priceBase;

typedef struct OBJECT_QUOTECapFlowData__storage_ {
  uint32_t _has_storage_[1];
  int32_t binprop;
  int32_t minprop;
  int32_t sinprop;
  int32_t boutprop;
  int32_t moutprop;
  int32_t soutprop;
  uint32_t priceBase;
  uint64_t time;
  int64_t total;
  int64_t bin;
  int64_t min;
  int64_t sin;
  int64_t bout;
  int64_t mout;
  int64_t sout;
  int64_t netbin;
  int64_t netmin;
  int64_t netsin;
  int64_t in_p;
  int64_t out_p;
  int64_t netin;
} OBJECT_QUOTECapFlowData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "total",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Total,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, total),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Bin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, bin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "min",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Min,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, min),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Sin,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, sin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bout",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Bout,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, bout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mout",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Mout,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, mout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sout",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Sout,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, sout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netbin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Netbin,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, netbin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netmin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Netmin,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, netmin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netsin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Netsin,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, netsin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "in_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_In_p,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, in_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "out_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Out_p,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, out_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Netin,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, netin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "binprop",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Binprop,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, binprop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "minprop",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Minprop,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, minprop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sinprop",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Sinprop,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, sinprop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "boutprop",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Boutprop,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, boutprop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "moutprop",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Moutprop,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, moutprop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "soutprop",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_Soutprop,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, soutprop),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapFlowData_FieldNumber_PriceBase,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapFlowData__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTECapFlowData class]
                                     rootClass:[OBJECT_QUOTECapflowRoot class]
                                          file:OBJECT_QUOTECapflowRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTECapFlowData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTECapNetData

@implementation OBJECT_QUOTECapNetData

@dynamic time;
@dynamic in_p;
@dynamic out_p;
@dynamic netin;

typedef struct OBJECT_QUOTECapNetData__storage_ {
  uint32_t _has_storage_[1];
  uint64_t time;
  int64_t in_p;
  int64_t out_p;
  int64_t netin;
} OBJECT_QUOTECapNetData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapNetData_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapNetData__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "in_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapNetData_FieldNumber_In_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapNetData__storage_, in_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "out_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapNetData_FieldNumber_Out_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapNetData__storage_, out_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECapNetData_FieldNumber_Netin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECapNetData__storage_, netin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTECapNetData class]
                                     rootClass:[OBJECT_QUOTECapflowRoot class]
                                          file:OBJECT_QUOTECapflowRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTECapNetData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
