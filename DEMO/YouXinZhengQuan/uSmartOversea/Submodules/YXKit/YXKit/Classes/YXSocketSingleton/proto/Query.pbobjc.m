// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Query.pbobjc.h"
#import "Const.pbobjc.h"
#import "Quote.pbobjc.h"
#import "Qprice.pbobjc.h"
#import "Kline.pbobjc.h"
#import "Capflow.pbobjc.h"
#import "Ts.pbobjc.h"
#import "Tick.pbobjc.h"
#import "Market.pbobjc.h"
#import "Secu.pbobjc.h"
#import "Scm.pbobjc.h"
#import "Grey.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(API_CLIENTArrayCYQ);
GPBObjCClassDeclaration(API_CLIENTArrayCYQMsg);
GPBObjCClassDeclaration(API_CLIENTArrayChipSection);
GPBObjCClassDeclaration(API_CLIENTCapFlowInfo);
GPBObjCClassDeclaration(API_CLIENTCapNetRsp);
GPBObjCClassDeclaration(API_CLIENTCodeListReq);
GPBObjCClassDeclaration(API_CLIENTCodeListReq_MarketHash);
GPBObjCClassDeclaration(API_CLIENTCodeListRsp);
GPBObjCClassDeclaration(API_CLIENTCodeListRspServer);
GPBObjCClassDeclaration(API_CLIENTCodeListRspServer_MarketSlot);
GPBObjCClassDeclaration(API_CLIENTCodeListRsp_MarketSlot);
GPBObjCClassDeclaration(API_CLIENTCodeListRsp_Secu);
GPBObjCClassDeclaration(API_CLIENTCodeListRsp_Slot);
GPBObjCClassDeclaration(API_CLIENTDerivativesScoreInfo);
GPBObjCClassDeclaration(API_CLIENTError);
GPBObjCClassDeclaration(API_CLIENTMarketCapFlowInfo);
GPBObjCClassDeclaration(API_CLIENTSearchRsp);
GPBObjCClassDeclaration(API_CLIENTSearchRsp_Result);
GPBObjCClassDeclaration(API_CLIENTSecuInfoRsp);
GPBObjCClassDeclaration(API_CLIENTSecuInfoRsp_Result);
GPBObjCClassDeclaration(API_CLIENTTSDataPerDay);
GPBObjCClassDeclaration(API_CLIENTTSDataPerTrdSession);
GPBObjCClassDeclaration(API_CLIENTTSRsp);
GPBObjCClassDeclaration(API_CLIENTTickPageCtx);
GPBObjCClassDeclaration(OBJECT_QUOTEADRHQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEAHQuote);
GPBObjCClassDeclaration(OBJECT_QUOTECapFlowData);
GPBObjCClassDeclaration(OBJECT_QUOTECapNetData);
GPBObjCClassDeclaration(OBJECT_QUOTECodeStatus);
GPBObjCClassDeclaration(OBJECT_QUOTEKLineData);
GPBObjCClassDeclaration(OBJECT_QUOTEOptionChainsData);
GPBObjCClassDeclaration(OBJECT_QUOTEOptionChainsDataRowList);
GPBObjCClassDeclaration(OBJECT_QUOTEOptionMaturityDate);
GPBObjCClassDeclaration(OBJECT_QUOTEQExchangeData);
GPBObjCClassDeclaration(OBJECT_QUOTEQPriceData);
GPBObjCClassDeclaration(OBJECT_QUOTEQuote);
GPBObjCClassDeclaration(OBJECT_QUOTERelateQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEScmData);
GPBObjCClassDeclaration(OBJECT_QUOTEScmKline);
GPBObjCClassDeclaration(OBJECT_QUOTEStockConnectInfo);
GPBObjCClassDeclaration(OBJECT_QUOTETSData);
GPBObjCClassDeclaration(OBJECT_QUOTETickData);
GPBObjCClassDeclaration(OBJECT_SECUFullID);
GPBObjCClassDeclaration(OBJECT_SECUInfo);
GPBObjCClassDeclaration(OBJECT_SECUSecuMeta);
GPBObjCClassDeclaration(OBJECT_SECUSecurityName);

#pragma mark - API_CLIENTQueryRoot

@implementation API_CLIENTQueryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - API_CLIENTQueryRoot_FileDescriptor

static GPBFileDescriptor *API_CLIENTQueryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.api.client"
                                                 objcPrefix:@"API_CLIENT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum API_CLIENTErrorCode

GPBEnumDescriptor *API_CLIENTErrorCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unkonwn\000SecuNotExist\000";
    static const int32_t values[] = {
        API_CLIENTErrorCode_Unkonwn,
        API_CLIENTErrorCode_SecuNotExist,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTErrorCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTErrorCode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTErrorCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTErrorCode_Unkonwn:
    case API_CLIENTErrorCode_SecuNotExist:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTOptionChainsDirection

GPBEnumDescriptor *API_CLIENTOptionChainsDirection_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OcdUpper\000OcdLower\000OcdMiddle\000";
    static const int32_t values[] = {
        API_CLIENTOptionChainsDirection_OcdUpper,
        API_CLIENTOptionChainsDirection_OcdLower,
        API_CLIENTOptionChainsDirection_OcdMiddle,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTOptionChainsDirection)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTOptionChainsDirection_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTOptionChainsDirection_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTOptionChainsDirection_OcdUpper:
    case API_CLIENTOptionChainsDirection_OcdLower:
    case API_CLIENTOptionChainsDirection_OcdMiddle:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTBidOrAskType

GPBEnumDescriptor *API_CLIENTBidOrAskType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AllType\000Bid\000Ask\000BidAndAsk\000Neutral\000";
    static const int32_t values[] = {
        API_CLIENTBidOrAskType_AllType,
        API_CLIENTBidOrAskType_Bid,
        API_CLIENTBidOrAskType_Ask,
        API_CLIENTBidOrAskType_BidAndAsk,
        API_CLIENTBidOrAskType_Neutral,
    };
    static const char *extraTextFormatInfo = "\005\000\'\000\001#\000\002#\000\003)\000\004\'\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTBidOrAskType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTBidOrAskType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTBidOrAskType_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTBidOrAskType_AllType:
    case API_CLIENTBidOrAskType_Bid:
    case API_CLIENTBidOrAskType_Ask:
    case API_CLIENTBidOrAskType_BidAndAsk:
    case API_CLIENTBidOrAskType_Neutral:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTMarketTimeType

GPBEnumDescriptor *API_CLIENTMarketTimeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Opening\000OpenBidding\000CloseBidding\000All\000";
    static const int32_t values[] = {
        API_CLIENTMarketTimeType_Opening,
        API_CLIENTMarketTimeType_OpenBidding,
        API_CLIENTMarketTimeType_CloseBidding,
        API_CLIENTMarketTimeType_All,
    };
    static const char *extraTextFormatInfo = "\004\000\'\000\001+\000\002,\000\003#\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTMarketTimeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTMarketTimeType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTMarketTimeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTMarketTimeType_Opening:
    case API_CLIENTMarketTimeType_OpenBidding:
    case API_CLIENTMarketTimeType_CloseBidding:
    case API_CLIENTMarketTimeType_All:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTTickSortType

GPBEnumDescriptor *API_CLIENTTickSortType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TradePrice\000BidSize\000AskSize\000BothSize\000Volu"
        "me\000Rate\000";
    static const int32_t values[] = {
        API_CLIENTTickSortType_TradePrice,
        API_CLIENTTickSortType_BidSize,
        API_CLIENTTickSortType_AskSize,
        API_CLIENTTickSortType_BothSize,
        API_CLIENTTickSortType_Volume,
        API_CLIENTTickSortType_Rate,
    };
    static const char *extraTextFormatInfo = "\006\000*\000\001\'\000\002\'\000\003(\000\004&\000\005$\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTTickSortType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTTickSortType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTTickSortType_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTTickSortType_TradePrice:
    case API_CLIENTTickSortType_BidSize:
    case API_CLIENTTickSortType_AskSize:
    case API_CLIENTTickSortType_BothSize:
    case API_CLIENTTickSortType_Volume:
    case API_CLIENTTickSortType_Rate:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTTickSortMode

GPBEnumDescriptor *API_CLIENTTickSortMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Down\000Up\000";
    static const int32_t values[] = {
        API_CLIENTTickSortMode_Down,
        API_CLIENTTickSortMode_Up,
    };
    static const char *extraTextFormatInfo = "\002\000$\000\001\"\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTTickSortMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTTickSortMode_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTTickSortMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTTickSortMode_Down:
    case API_CLIENTTickSortMode_Up:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTTSScene

GPBEnumDescriptor *API_CLIENTTSScene_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OneDay\000FiveDay\000";
    static const int32_t values[] = {
        API_CLIENTTSScene_OneDay,
        API_CLIENTTSScene_FiveDay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTTSScene)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTTSScene_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTTSScene_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTTSScene_OneDay:
    case API_CLIENTTSScene_FiveDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTTSTrdSession

GPBEnumDescriptor *API_CLIENTTSTrdSession_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FullHours\000Intraday\000PreMarket\000PostMarket\000";
    static const int32_t values[] = {
        API_CLIENTTSTrdSession_FullHours,
        API_CLIENTTSTrdSession_Intraday,
        API_CLIENTTSTrdSession_PreMarket,
        API_CLIENTTSTrdSession_PostMarket,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTTSTrdSession)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTTSTrdSession_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTTSTrdSession_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTTSTrdSession_FullHours:
    case API_CLIENTTSTrdSession_Intraday:
    case API_CLIENTTSTrdSession_PreMarket:
    case API_CLIENTTSTrdSession_PostMarket:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum API_CLIENTSearchType

GPBEnumDescriptor *API_CLIENTSearchType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StAll\000StSecu\000";
    static const int32_t values[] = {
        API_CLIENTSearchType_StAll,
        API_CLIENTSearchType_StSecu,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(API_CLIENTSearchType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:API_CLIENTSearchType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL API_CLIENTSearchType_IsValidValue(int32_t value__) {
  switch (value__) {
    case API_CLIENTSearchType_StAll:
    case API_CLIENTSearchType_StSecu:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - API_CLIENTError

@implementation API_CLIENTError

@dynamic code;
@dynamic desc;

typedef struct API_CLIENTError__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  NSString *desc;
} API_CLIENTError__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTError_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTError__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "desc",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTError_FieldNumber_Desc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTError__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTError class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTError__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTReq

@implementation API_CLIENTRTReq

@dynamic hasId_p, id_p;
@dynamic scene;
@dynamic customFlag;
@dynamic subscribe;
@dynamic lang;

typedef struct API_CLIENTRTReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  OBJECT_SECUFullID *id_p;
  uint64_t customFlag;
} API_CLIENTRTReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTReq_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTReq_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTReq__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTReq_FieldNumber_Subscribe,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTReq_FieldNumber_Lang,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTRTReq__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTReq_Scene_RawValue(API_CLIENTRTReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTReq_Scene_RawValue(API_CLIENTRTReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTReq_Lang_RawValue(API_CLIENTRTReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTReq_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTReq_Lang_RawValue(API_CLIENTRTReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTReq_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTRsp

@implementation API_CLIENTRTRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic customFlag;
@dynamic hasQuote, quote;
@dynamic lang;

typedef struct API_CLIENTRTRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  API_CLIENTError *error;
  OBJECT_QUOTEQuote *quote;
  uint64_t customFlag;
} API_CLIENTRTRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTRsp_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTRsp__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "quote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTRsp_FieldNumber_Quote,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTRsp__storage_, quote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTRsp_FieldNumber_Lang,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTRsp__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTRsp_Scene_RawValue(API_CLIENTRTRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTRsp_Scene_RawValue(API_CLIENTRTRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTRsp_Lang_RawValue(API_CLIENTRTRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTRsp_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTRsp_Lang_RawValue(API_CLIENTRTRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTRsp_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTInfoRsp

@implementation API_CLIENTInfoRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic customFlag;
@dynamic hasQuote, quote;
@dynamic lang;

typedef struct API_CLIENTInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  API_CLIENTError *error;
  OBJECT_SECUInfo *quote;
  uint64_t customFlag;
} API_CLIENTInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTInfoRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTInfoRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTInfoRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTInfoRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTInfoRsp_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTInfoRsp__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "quote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = API_CLIENTInfoRsp_FieldNumber_Quote,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTInfoRsp__storage_, quote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTInfoRsp_FieldNumber_Lang,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTInfoRsp__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTInfoRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTInfoRsp_Scene_RawValue(API_CLIENTInfoRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTInfoRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTInfoRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTInfoRsp_Scene_RawValue(API_CLIENTInfoRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTInfoRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTInfoRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTInfoRsp_Lang_RawValue(API_CLIENTInfoRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTInfoRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTInfoRsp_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTInfoRsp_Lang_RawValue(API_CLIENTInfoRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTInfoRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTInfoRsp_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTBatchReq

@implementation API_CLIENTRTBatchReq

@dynamic scene;
@dynamic customFlag;
@dynamic subscribe;
@dynamic idsArray, idsArray_Count;
@dynamic lang;

typedef struct API_CLIENTRTBatchReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  NSMutableArray *idsArray;
  uint64_t customFlag;
} API_CLIENTRTBatchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTBatchReq_FieldNumber_Scene,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTBatchReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTBatchReq_FieldNumber_CustomFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTBatchReq__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTBatchReq_FieldNumber_Subscribe,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTBatchReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTBatchReq__storage_, idsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTBatchReq_FieldNumber_Lang,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTBatchReq__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTBatchReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTBatchReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTBatchReq_Scene_RawValue(API_CLIENTRTBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTBatchReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTBatchReq_Scene_RawValue(API_CLIENTRTBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTBatchReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTBatchReq_Lang_RawValue(API_CLIENTRTBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTBatchReq_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTBatchReq_Lang_RawValue(API_CLIENTRTBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTBatchReq_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTDetailBatchReq

@implementation API_CLIENTRTDetailBatchReq

@dynamic scene;
@dynamic customFlag;
@dynamic subscribe;
@dynamic idsArray, idsArray_Count;
@dynamic lang;

typedef struct API_CLIENTRTDetailBatchReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  NSMutableArray *idsArray;
  uint64_t customFlag;
} API_CLIENTRTDetailBatchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTDetailBatchReq_FieldNumber_Scene,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTDetailBatchReq_FieldNumber_CustomFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchReq__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTDetailBatchReq_FieldNumber_Subscribe,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTDetailBatchReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchReq__storage_, idsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTDetailBatchReq_FieldNumber_Lang,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchReq__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTDetailBatchReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTDetailBatchReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTDetailBatchReq_Scene_RawValue(API_CLIENTRTDetailBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTDetailBatchReq_Scene_RawValue(API_CLIENTRTDetailBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTDetailBatchReq_Lang_RawValue(API_CLIENTRTDetailBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchReq_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTDetailBatchReq_Lang_RawValue(API_CLIENTRTDetailBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchReq_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTPostionBatchReq

@implementation API_CLIENTRTPostionBatchReq

@dynamic scene;
@dynamic customFlag;
@dynamic subscribe;
@dynamic idsArray, idsArray_Count;
@dynamic lang;

typedef struct API_CLIENTRTPostionBatchReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  NSMutableArray *idsArray;
  uint64_t customFlag;
} API_CLIENTRTPostionBatchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTPostionBatchReq_FieldNumber_Scene,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTPostionBatchReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTPostionBatchReq_FieldNumber_CustomFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTPostionBatchReq__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTPostionBatchReq_FieldNumber_Subscribe,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "idsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTPostionBatchReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTPostionBatchReq__storage_, idsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTPostionBatchReq_FieldNumber_Lang,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTPostionBatchReq__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTPostionBatchReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTPostionBatchReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTPostionBatchReq_Scene_RawValue(API_CLIENTRTPostionBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTPostionBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPostionBatchReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTPostionBatchReq_Scene_RawValue(API_CLIENTRTPostionBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTPostionBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPostionBatchReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTPostionBatchReq_Lang_RawValue(API_CLIENTRTPostionBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTPostionBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPostionBatchReq_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTPostionBatchReq_Lang_RawValue(API_CLIENTRTPostionBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTPostionBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPostionBatchReq_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTAHQuoteReq

@implementation API_CLIENTRTAHQuoteReq

@dynamic marketId;

typedef struct API_CLIENTRTAHQuoteReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId marketId;
} API_CLIENTRTAHQuoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "marketId",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTRTAHQuoteReq_FieldNumber_MarketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTAHQuoteReq__storage_, marketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTAHQuoteReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTAHQuoteReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTAHQuoteReq_MarketId_RawValue(API_CLIENTRTAHQuoteReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTAHQuoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTAHQuoteReq_FieldNumber_MarketId];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTAHQuoteReq_MarketId_RawValue(API_CLIENTRTAHQuoteReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTAHQuoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTAHQuoteReq_FieldNumber_MarketId];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTADRHQuoteReq

@implementation API_CLIENTRTADRHQuoteReq

@dynamic marketId;
@dynamic delayFlag;

typedef struct API_CLIENTRTADRHQuoteReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId marketId;
} API_CLIENTRTADRHQuoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "marketId",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTRTADRHQuoteReq_FieldNumber_MarketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTADRHQuoteReq__storage_, marketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "delayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTADRHQuoteReq_FieldNumber_DelayFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTADRHQuoteReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTADRHQuoteReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTADRHQuoteReq_MarketId_RawValue(API_CLIENTRTADRHQuoteReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTADRHQuoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTADRHQuoteReq_FieldNumber_MarketId];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTADRHQuoteReq_MarketId_RawValue(API_CLIENTRTADRHQuoteReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTADRHQuoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTADRHQuoteReq_FieldNumber_MarketId];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTInnerRelateQuoteReq

@implementation API_CLIENTRTInnerRelateQuoteReq

@dynamic marketId;
@dynamic delayFlag;

typedef struct API_CLIENTRTInnerRelateQuoteReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId marketId;
} API_CLIENTRTInnerRelateQuoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "marketId",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTRTInnerRelateQuoteReq_FieldNumber_MarketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTInnerRelateQuoteReq__storage_, marketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "delayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTInnerRelateQuoteReq_FieldNumber_DelayFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTInnerRelateQuoteReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTInnerRelateQuoteReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTInnerRelateQuoteReq_MarketId_RawValue(API_CLIENTRTInnerRelateQuoteReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTInnerRelateQuoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTInnerRelateQuoteReq_FieldNumber_MarketId];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTInnerRelateQuoteReq_MarketId_RawValue(API_CLIENTRTInnerRelateQuoteReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTInnerRelateQuoteReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTInnerRelateQuoteReq_FieldNumber_MarketId];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTRelaQuoteReq

@implementation API_CLIENTRTRelaQuoteReq

@dynamic hasMasterId, masterId;
@dynamic masterDelayFlag;
@dynamic hasSlaveId, slaveId;
@dynamic slaveDelayFlag;

typedef struct API_CLIENTRTRelaQuoteReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *masterId;
  OBJECT_SECUFullID *slaveId;
} API_CLIENTRTRelaQuoteReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "masterId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTRelaQuoteReq_FieldNumber_MasterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaQuoteReq__storage_, masterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "masterDelayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTRelaQuoteReq_FieldNumber_MasterDelayFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "slaveId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTRelaQuoteReq_FieldNumber_SlaveId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaQuoteReq__storage_, slaveId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "slaveDelayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTRelaQuoteReq_FieldNumber_SlaveDelayFlag,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTRelaQuoteReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTRelaQuoteReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\010\000\002\017\000\003G\000\004\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTSuspendListReq

@implementation API_CLIENTRTSuspendListReq

@dynamic marketId;
@dynamic delayFlag;

typedef struct API_CLIENTRTSuspendListReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId marketId;
} API_CLIENTRTSuspendListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "marketId",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTRTSuspendListReq_FieldNumber_MarketId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTSuspendListReq__storage_, marketId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "delayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTSuspendListReq_FieldNumber_DelayFlag,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTSuspendListReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTSuspendListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTSuspendListReq_MarketId_RawValue(API_CLIENTRTSuspendListReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTSuspendListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTSuspendListReq_FieldNumber_MarketId];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTSuspendListReq_MarketId_RawValue(API_CLIENTRTSuspendListReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTSuspendListReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTSuspendListReq_FieldNumber_MarketId];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTOptionChainsDateReq

@implementation API_CLIENTRTOptionChainsDateReq

@dynamic hasUnderlyingId, underlyingId;

typedef struct API_CLIENTRTOptionChainsDateReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *underlyingId;
} API_CLIENTRTOptionChainsDateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "underlyingId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTOptionChainsDateReq_FieldNumber_UnderlyingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDateReq__storage_, underlyingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTOptionChainsDateReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTOptionChainsDateReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTOptionChainsDateRsp

@implementation API_CLIENTRTOptionChainsDateRsp

@dynamic hasError, error;
@dynamic maturityDateArray, maturityDateArray_Count;

typedef struct API_CLIENTRTOptionChainsDateRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *maturityDateArray;
} API_CLIENTRTOptionChainsDateRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTOptionChainsDateRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDateRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maturityDateArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionMaturityDate),
        .number = API_CLIENTRTOptionChainsDateRsp_FieldNumber_MaturityDateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDateRsp__storage_, maturityDateArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTOptionChainsDateRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTOptionChainsDateRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000maturityDate\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTOptionChainsDataGroupReq

@implementation API_CLIENTRTOptionChainsDataGroupReq

@dynamic hasUnderlyingId, underlyingId;
@dynamic maturityDate;
@dynamic fromStrikePrice;
@dynamic count;
@dynamic direction;

typedef struct API_CLIENTRTOptionChainsDataGroupReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  API_CLIENTOptionChainsDirection direction;
  OBJECT_SECUFullID *underlyingId;
  uint64_t maturityDate;
  uint64_t fromStrikePrice;
} API_CLIENTRTOptionChainsDataGroupReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "underlyingId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_UnderlyingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupReq__storage_, underlyingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maturityDate",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_MaturityDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupReq__storage_, maturityDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fromStrikePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_FromStrikePrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupReq__storage_, fromStrikePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = API_CLIENTOptionChainsDirection_EnumDescriptor,
        .number = API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_Direction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupReq__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTOptionChainsDataGroupReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTOptionChainsDataGroupReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\014\000\002\014\000\003\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTOptionChainsDataGroupReq_Direction_RawValue(API_CLIENTRTOptionChainsDataGroupReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTOptionChainsDataGroupReq_Direction_RawValue(API_CLIENTRTOptionChainsDataGroupReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupReq_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTOptionChainsDataGroupRsp

@implementation API_CLIENTRTOptionChainsDataGroupRsp

@dynamic hasErr, err;
@dynamic hasUnderlyingId, underlyingId;
@dynamic maturityDate;
@dynamic hasOptionChains, optionChains;
@dynamic type;

typedef struct API_CLIENTRTOptionChainsDataGroupRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCallPutType type;
  API_CLIENTError *err;
  OBJECT_SECUFullID *underlyingId;
  OBJECT_QUOTEOptionChainsData *optionChains;
  uint64_t maturityDate;
} API_CLIENTRTOptionChainsDataGroupRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "err",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_Err,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupRsp__storage_, err),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underlyingId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_UnderlyingId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupRsp__storage_, underlyingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maturityDate",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_MaturityDate,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupRsp__storage_, maturityDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "optionChains",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionChainsData),
        .number = API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_OptionChains,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupRsp__storage_, optionChains),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCallPutType_EnumDescriptor,
        .number = API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_Type,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupRsp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTOptionChainsDataGroupRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTOptionChainsDataGroupRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\014\000\003\014\000\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTOptionChainsDataGroupRsp_Type_RawValue(API_CLIENTRTOptionChainsDataGroupRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTOptionChainsDataGroupRsp_Type_RawValue(API_CLIENTRTOptionChainsDataGroupRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupRsp_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTOptionChainsDataGroupScreenReq

@implementation API_CLIENTRTOptionChainsDataGroupScreenReq

@dynamic hasUnderlyingId, underlyingId;
@dynamic maturityDate;
@dynamic fromStrikePrice;
@dynamic count;
@dynamic direction;
@dynamic moneyType;
@dynamic callPutType;

typedef struct API_CLIENTRTOptionChainsDataGroupScreenReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t count;
  API_CLIENTOptionChainsDirection direction;
  OBJECT_QUOTEMoneynessType moneyType;
  OBJECT_SECUCallPutType callPutType;
  OBJECT_SECUFullID *underlyingId;
  uint64_t maturityDate;
  uint64_t fromStrikePrice;
} API_CLIENTRTOptionChainsDataGroupScreenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "underlyingId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_UnderlyingId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, underlyingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maturityDate",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_MaturityDate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, maturityDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "fromStrikePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_FromStrikePrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, fromStrikePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = API_CLIENTOptionChainsDirection_EnumDescriptor,
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_Direction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "moneyType",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEMoneynessType_EnumDescriptor,
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_MoneyType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, moneyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "callPutType",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCallPutType_EnumDescriptor,
        .number = API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_CallPutType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_, callPutType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTOptionChainsDataGroupScreenReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTOptionChainsDataGroupScreenReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\014\000\002\014\000\003\017\000\006\t\000\007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTOptionChainsDataGroupScreenReq_Direction_RawValue(API_CLIENTRTOptionChainsDataGroupScreenReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupScreenReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTOptionChainsDataGroupScreenReq_Direction_RawValue(API_CLIENTRTOptionChainsDataGroupScreenReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupScreenReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTOptionChainsDataGroupScreenReq_MoneyType_RawValue(API_CLIENTRTOptionChainsDataGroupScreenReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupScreenReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_MoneyType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTOptionChainsDataGroupScreenReq_MoneyType_RawValue(API_CLIENTRTOptionChainsDataGroupScreenReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupScreenReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_MoneyType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTOptionChainsDataGroupScreenReq_CallPutType_RawValue(API_CLIENTRTOptionChainsDataGroupScreenReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupScreenReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_CallPutType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTOptionChainsDataGroupScreenReq_CallPutType_RawValue(API_CLIENTRTOptionChainsDataGroupScreenReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTOptionChainsDataGroupScreenReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTOptionChainsDataGroupScreenReq_FieldNumber_CallPutType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTOptionChainsDataGroupScreenRsp

@implementation API_CLIENTRTOptionChainsDataGroupScreenRsp

@dynamic hasErr, err;
@dynamic hasOptionChains, optionChains;

typedef struct API_CLIENTRTOptionChainsDataGroupScreenRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *err;
  OBJECT_QUOTEOptionChainsDataRowList *optionChains;
} API_CLIENTRTOptionChainsDataGroupScreenRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "err",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTOptionChainsDataGroupScreenRsp_FieldNumber_Err,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenRsp__storage_, err),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "optionChains",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionChainsDataRowList),
        .number = API_CLIENTRTOptionChainsDataGroupScreenRsp_FieldNumber_OptionChains,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTOptionChainsDataGroupScreenRsp__storage_, optionChains),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTOptionChainsDataGroupScreenRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTOptionChainsDataGroupScreenRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTDetailBatchRsp

@implementation API_CLIENTRTDetailBatchRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic customFlag;
@dynamic quotesArray, quotesArray_Count;
@dynamic lang;
@dynamic sendTime;

typedef struct API_CLIENTRTDetailBatchRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  API_CLIENTError *error;
  NSMutableArray *quotesArray;
  uint64_t customFlag;
  uint64_t sendTime;
} API_CLIENTRTDetailBatchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTDetailBatchRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTDetailBatchRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTDetailBatchRsp_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchRsp__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "quotesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTDetailBatchRsp_FieldNumber_QuotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchRsp__storage_, quotesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTDetailBatchRsp_FieldNumber_Lang,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchRsp__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTDetailBatchRsp_FieldNumber_SendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTDetailBatchRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTDetailBatchRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTDetailBatchRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTDetailBatchRsp_Scene_RawValue(API_CLIENTRTDetailBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTDetailBatchRsp_Scene_RawValue(API_CLIENTRTDetailBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTDetailBatchRsp_Lang_RawValue(API_CLIENTRTDetailBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchRsp_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTDetailBatchRsp_Lang_RawValue(API_CLIENTRTDetailBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTDetailBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTDetailBatchRsp_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTQuoteBatchRsp

@implementation API_CLIENTRTQuoteBatchRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic customFlag;
@dynamic quotesArray, quotesArray_Count;
@dynamic lang;
@dynamic sendTime;

typedef struct API_CLIENTRTQuoteBatchRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  API_CLIENTError *error;
  NSMutableArray *quotesArray;
  uint64_t customFlag;
  uint64_t sendTime;
} API_CLIENTRTQuoteBatchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTQuoteBatchRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTQuoteBatchRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTQuoteBatchRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTQuoteBatchRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTQuoteBatchRsp_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTQuoteBatchRsp__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "quotesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTQuoteBatchRsp_FieldNumber_QuotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTQuoteBatchRsp__storage_, quotesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTQuoteBatchRsp_FieldNumber_Lang,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTQuoteBatchRsp__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTQuoteBatchRsp_FieldNumber_SendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTQuoteBatchRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTQuoteBatchRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTQuoteBatchRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTQuoteBatchRsp_Scene_RawValue(API_CLIENTRTQuoteBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTQuoteBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTQuoteBatchRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTQuoteBatchRsp_Scene_RawValue(API_CLIENTRTQuoteBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTQuoteBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTQuoteBatchRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTQuoteBatchRsp_Lang_RawValue(API_CLIENTRTQuoteBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTQuoteBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTQuoteBatchRsp_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTQuoteBatchRsp_Lang_RawValue(API_CLIENTRTQuoteBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTQuoteBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTQuoteBatchRsp_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTInfoBatchRsp

@implementation API_CLIENTRTInfoBatchRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic customFlag;
@dynamic infosArray, infosArray_Count;
@dynamic lang;
@dynamic sendTime;

typedef struct API_CLIENTRTInfoBatchRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  API_CLIENTError *error;
  NSMutableArray *infosArray;
  uint64_t customFlag;
  uint64_t sendTime;
} API_CLIENTRTInfoBatchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTInfoBatchRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTInfoBatchRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTInfoBatchRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTInfoBatchRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTInfoBatchRsp_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTInfoBatchRsp__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "infosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecuMeta),
        .number = API_CLIENTRTInfoBatchRsp_FieldNumber_InfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTInfoBatchRsp__storage_, infosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTInfoBatchRsp_FieldNumber_Lang,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTInfoBatchRsp__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTInfoBatchRsp_FieldNumber_SendTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTRTInfoBatchRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTInfoBatchRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTInfoBatchRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTInfoBatchRsp_Scene_RawValue(API_CLIENTRTInfoBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTInfoBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTInfoBatchRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTInfoBatchRsp_Scene_RawValue(API_CLIENTRTInfoBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTInfoBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTInfoBatchRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTInfoBatchRsp_Lang_RawValue(API_CLIENTRTInfoBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTInfoBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTInfoBatchRsp_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTInfoBatchRsp_Lang_RawValue(API_CLIENTRTInfoBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTInfoBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTInfoBatchRsp_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTPositionBatchRsp

@implementation API_CLIENTRTPositionBatchRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic customFlag;
@dynamic positionsArray, positionsArray_Count;
@dynamic lang;

typedef struct API_CLIENTRTPositionBatchRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEQuoteScene scene;
  COMMONLangType lang;
  API_CLIENTError *error;
  NSMutableArray *positionsArray;
  uint64_t customFlag;
} API_CLIENTRTPositionBatchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTPositionBatchRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTPositionBatchRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteScene_EnumDescriptor,
        .number = API_CLIENTRTPositionBatchRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTPositionBatchRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "customFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTRTPositionBatchRsp_FieldNumber_CustomFlag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTRTPositionBatchRsp__storage_, customFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "positionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTPositionBatchRsp_FieldNumber_PositionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTPositionBatchRsp__storage_, positionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = API_CLIENTRTPositionBatchRsp_FieldNumber_Lang,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTRTPositionBatchRsp__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTPositionBatchRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTPositionBatchRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTRTPositionBatchRsp_Scene_RawValue(API_CLIENTRTPositionBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTPositionBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPositionBatchRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTPositionBatchRsp_Scene_RawValue(API_CLIENTRTPositionBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTPositionBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPositionBatchRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTRTPositionBatchRsp_Lang_RawValue(API_CLIENTRTPositionBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTRTPositionBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPositionBatchRsp_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTRTPositionBatchRsp_Lang_RawValue(API_CLIENTRTPositionBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTRTPositionBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTRTPositionBatchRsp_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTRTAHQuoteRsp

@implementation API_CLIENTRTAHQuoteRsp

@dynamic hasError, error;
@dynamic quotesArray, quotesArray_Count;

typedef struct API_CLIENTRTAHQuoteRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *quotesArray;
} API_CLIENTRTAHQuoteRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTAHQuoteRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTAHQuoteRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quotesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTAHQuoteRsp_FieldNumber_QuotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTAHQuoteRsp__storage_, quotesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTAHQuoteRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTAHQuoteRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTADRHQuoteRsp

@implementation API_CLIENTRTADRHQuoteRsp

@dynamic hasError, error;
@dynamic quotesArray, quotesArray_Count;

typedef struct API_CLIENTRTADRHQuoteRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *quotesArray;
} API_CLIENTRTADRHQuoteRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTADRHQuoteRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTADRHQuoteRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quotesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTADRHQuoteRsp_FieldNumber_QuotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTADRHQuoteRsp__storage_, quotesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTADRHQuoteRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTADRHQuoteRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTInnerRelateQuoteRsp

@implementation API_CLIENTRTInnerRelateQuoteRsp

@dynamic hasError, error;
@dynamic quotesArray, quotesArray_Count;

typedef struct API_CLIENTRTInnerRelateQuoteRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *quotesArray;
} API_CLIENTRTInnerRelateQuoteRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTInnerRelateQuoteRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTInnerRelateQuoteRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quotesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTRTInnerRelateQuoteRsp_FieldNumber_QuotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTInnerRelateQuoteRsp__storage_, quotesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTInnerRelateQuoteRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTInnerRelateQuoteRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTRelaAHQuoteRsp

@implementation API_CLIENTRTRelaAHQuoteRsp

@dynamic hasError, error;
@dynamic hasAhQuote, ahQuote;

typedef struct API_CLIENTRTRelaAHQuoteRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  OBJECT_QUOTEAHQuote *ahQuote;
} API_CLIENTRTRelaAHQuoteRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTRelaAHQuoteRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaAHQuoteRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ahQuote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEAHQuote),
        .number = API_CLIENTRTRelaAHQuoteRsp_FieldNumber_AhQuote,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaAHQuoteRsp__storage_, ahQuote),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTRelaAHQuoteRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTRelaAHQuoteRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTRelaADRHQuoteRsp

@implementation API_CLIENTRTRelaADRHQuoteRsp

@dynamic hasError, error;
@dynamic hasAdrhQuote, adrhQuote;

typedef struct API_CLIENTRTRelaADRHQuoteRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  OBJECT_QUOTEADRHQuote *adrhQuote;
} API_CLIENTRTRelaADRHQuoteRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTRelaADRHQuoteRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaADRHQuoteRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adrhQuote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEADRHQuote),
        .number = API_CLIENTRTRelaADRHQuoteRsp_FieldNumber_AdrhQuote,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaADRHQuoteRsp__storage_, adrhQuote),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTRelaADRHQuoteRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTRelaADRHQuoteRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTRelaQuoteRsp

@implementation API_CLIENTRTRelaQuoteRsp

@dynamic hasError, error;
@dynamic hasRelateQuote, relateQuote;

typedef struct API_CLIENTRTRelaQuoteRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  OBJECT_QUOTERelateQuote *relateQuote;
} API_CLIENTRTRelaQuoteRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTRelaQuoteRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaQuoteRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relateQuote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTERelateQuote),
        .number = API_CLIENTRTRelaQuoteRsp_FieldNumber_RelateQuote,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTRTRelaQuoteRsp__storage_, relateQuote),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTRelaQuoteRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTRelaQuoteRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTRTSuspendListRsp

@implementation API_CLIENTRTSuspendListRsp

@dynamic hasError, error;
@dynamic dataListArray, dataListArray_Count;

typedef struct API_CLIENTRTSuspendListRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *dataListArray;
} API_CLIENTRTSuspendListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTRTSuspendListRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTRTSuspendListRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataListArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECodeStatus),
        .number = API_CLIENTRTSuspendListRsp_FieldNumber_DataListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTRTSuspendListRsp__storage_, dataListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTRTSuspendListRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTRTSuspendListRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000dataList\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCapFlowReq

@implementation API_CLIENTCapFlowReq

@dynamic hasId_p, id_p;
@dynamic type;

typedef struct API_CLIENTCapFlowReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTECapFlowType type;
  OBJECT_SECUFullID *id_p;
} API_CLIENTCapFlowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapFlowReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapFlowReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapFlowReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapFlowReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapFlowReq_Type_RawValue(API_CLIENTCapFlowReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapFlowReq_Type_RawValue(API_CLIENTCapFlowReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCapFlowRsp

@implementation API_CLIENTCapFlowRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic type;
@dynamic hasCapflow, capflow;

typedef struct API_CLIENTCapFlowRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTECapFlowType type;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTECapFlowData *capflow;
} API_CLIENTCapFlowRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCapFlowRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapFlowRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapFlowRsp_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowRsp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capflow",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECapFlowData),
        .number = API_CLIENTCapFlowRsp_FieldNumber_Capflow,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowRsp__storage_, capflow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapFlowRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapFlowRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapFlowRsp_Type_RawValue(API_CLIENTCapFlowRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowRsp_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapFlowRsp_Type_RawValue(API_CLIENTCapFlowRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowRsp_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTMarketCapFlowReq

@implementation API_CLIENTMarketCapFlowReq

@dynamic id_p;
@dynamic type;

typedef struct API_CLIENTMarketCapFlowReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId id_p;
  OBJECT_QUOTECapFlowType type;
} API_CLIENTMarketCapFlowReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTMarketCapFlowReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowReq__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTMarketCapFlowReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTMarketCapFlowReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTMarketCapFlowReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTMarketCapFlowReq_Id_p_RawValue(API_CLIENTMarketCapFlowReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowReq_FieldNumber_Id_p];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTMarketCapFlowReq_Id_p_RawValue(API_CLIENTMarketCapFlowReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowReq_FieldNumber_Id_p];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTMarketCapFlowReq_Type_RawValue(API_CLIENTMarketCapFlowReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTMarketCapFlowReq_Type_RawValue(API_CLIENTMarketCapFlowReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTMarketCapFlowInfo

@implementation API_CLIENTMarketCapFlowInfo

@dynamic exchname;
@dynamic code;
@dynamic volume;
@dynamic tick;
@dynamic hasCapflow, capflow;

typedef struct API_CLIENTMarketCapFlowInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tick;
  NSString *exchname;
  NSString *code;
  OBJECT_QUOTECapFlowData *capflow;
  uint64_t volume;
} API_CLIENTMarketCapFlowInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchname",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTMarketCapFlowInfo_FieldNumber_Exchname,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowInfo__storage_, exchname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTMarketCapFlowInfo_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowInfo__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTMarketCapFlowInfo_FieldNumber_Volume,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowInfo__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tick",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTMarketCapFlowInfo_FieldNumber_Tick,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowInfo__storage_, tick),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "capflow",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECapFlowData),
        .number = API_CLIENTMarketCapFlowInfo_FieldNumber_Capflow,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowInfo__storage_, capflow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTMarketCapFlowInfo class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTMarketCapFlowInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTMarketCapFlowRsp

@implementation API_CLIENTMarketCapFlowRsp

@dynamic hasError, error;
@dynamic id_p;
@dynamic type;
@dynamic capdataArray, capdataArray_Count;

typedef struct API_CLIENTMarketCapFlowRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId id_p;
  OBJECT_QUOTECapFlowType type;
  API_CLIENTError *error;
  NSMutableArray *capdataArray;
} API_CLIENTMarketCapFlowRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTMarketCapFlowRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTMarketCapFlowRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowRsp__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTMarketCapFlowRsp_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowRsp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capdataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTMarketCapFlowInfo),
        .number = API_CLIENTMarketCapFlowRsp_FieldNumber_CapdataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTMarketCapFlowRsp__storage_, capdataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTMarketCapFlowRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTMarketCapFlowRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTMarketCapFlowRsp_Id_p_RawValue(API_CLIENTMarketCapFlowRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowRsp_FieldNumber_Id_p];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTMarketCapFlowRsp_Id_p_RawValue(API_CLIENTMarketCapFlowRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowRsp_FieldNumber_Id_p];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTMarketCapFlowRsp_Type_RawValue(API_CLIENTMarketCapFlowRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowRsp_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTMarketCapFlowRsp_Type_RawValue(API_CLIENTMarketCapFlowRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTMarketCapFlowRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTMarketCapFlowRsp_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCapFlowBatchReq

@implementation API_CLIENTCapFlowBatchReq

@dynamic idArray, idArray_Count;
@dynamic type;

typedef struct API_CLIENTCapFlowBatchReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTECapFlowType type;
  NSMutableArray *idArray;
} API_CLIENTCapFlowBatchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapFlowBatchReq_FieldNumber_IdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowBatchReq__storage_, idArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapFlowBatchReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowBatchReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapFlowBatchReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapFlowBatchReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapFlowBatchReq_Type_RawValue(API_CLIENTCapFlowBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowBatchReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapFlowBatchReq_Type_RawValue(API_CLIENTCapFlowBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowBatchReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCapFlowInfo

@implementation API_CLIENTCapFlowInfo

@dynamic exchname;
@dynamic code;
@dynamic volume;
@dynamic tick;
@dynamic hasCapflow, capflow;

typedef struct API_CLIENTCapFlowInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tick;
  NSString *exchname;
  NSString *code;
  OBJECT_QUOTECapFlowData *capflow;
  uint64_t volume;
} API_CLIENTCapFlowInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchname",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapFlowInfo_FieldNumber_Exchname,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowInfo__storage_, exchname),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapFlowInfo_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowInfo__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapFlowInfo_FieldNumber_Volume,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowInfo__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "tick",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapFlowInfo_FieldNumber_Tick,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowInfo__storage_, tick),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "capflow",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECapFlowData),
        .number = API_CLIENTCapFlowInfo_FieldNumber_Capflow,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowInfo__storage_, capflow),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapFlowInfo class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapFlowInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCapFlowBatchResp

@implementation API_CLIENTCapFlowBatchResp

@dynamic hasError, error;
@dynamic id_p;
@dynamic type;
@dynamic capdataArray, capdataArray_Count;

typedef struct API_CLIENTCapFlowBatchResp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId id_p;
  OBJECT_QUOTECapFlowType type;
  API_CLIENTError *error;
  NSMutableArray *capdataArray;
} API_CLIENTCapFlowBatchResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCapFlowBatchResp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowBatchResp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = API_CLIENTCapFlowBatchResp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowBatchResp__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapFlowBatchResp_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowBatchResp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "capdataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCapFlowInfo),
        .number = API_CLIENTCapFlowBatchResp_FieldNumber_CapdataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCapFlowBatchResp__storage_, capdataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapFlowBatchResp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapFlowBatchResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapFlowBatchResp_Id_p_RawValue(API_CLIENTCapFlowBatchResp *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowBatchResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowBatchResp_FieldNumber_Id_p];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapFlowBatchResp_Id_p_RawValue(API_CLIENTCapFlowBatchResp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowBatchResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowBatchResp_FieldNumber_Id_p];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTCapFlowBatchResp_Type_RawValue(API_CLIENTCapFlowBatchResp *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowBatchResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowBatchResp_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapFlowBatchResp_Type_RawValue(API_CLIENTCapFlowBatchResp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapFlowBatchResp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapFlowBatchResp_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTBatchGetCapFlowByTimeReq

@implementation API_CLIENTBatchGetCapFlowByTimeReq

@dynamic idArray, idArray_Count;
@dynamic date;

typedef struct API_CLIENTBatchGetCapFlowByTimeReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *idArray;
  int64_t date;
} API_CLIENTBatchGetCapFlowByTimeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTBatchGetCapFlowByTimeReq_FieldNumber_IdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapFlowByTimeReq__storage_, idArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTBatchGetCapFlowByTimeReq_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapFlowByTimeReq__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTBatchGetCapFlowByTimeReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTBatchGetCapFlowByTimeReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTBatchGetCapFlowByTimeResp

@implementation API_CLIENTBatchGetCapFlowByTimeResp

@dynamic hasError, error;
@dynamic capdataArray, capdataArray_Count;

typedef struct API_CLIENTBatchGetCapFlowByTimeResp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *capdataArray;
} API_CLIENTBatchGetCapFlowByTimeResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTBatchGetCapFlowByTimeResp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapFlowByTimeResp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "capdataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCapFlowInfo),
        .number = API_CLIENTBatchGetCapFlowByTimeResp_FieldNumber_CapdataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapFlowByTimeResp__storage_, capdataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTBatchGetCapFlowByTimeResp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTBatchGetCapFlowByTimeResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCapNetReq

@implementation API_CLIENTCapNetReq

@dynamic hasId_p, id_p;
@dynamic type;

typedef struct API_CLIENTCapNetReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTECapFlowType type;
  OBJECT_SECUFullID *id_p;
} API_CLIENTCapNetReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapNetReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapNetReq_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapNetReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapNetReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapNetReq_Type_RawValue(API_CLIENTCapNetReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapNetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapNetReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapNetReq_Type_RawValue(API_CLIENTCapNetReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapNetReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapNetReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCapNetRsp

@implementation API_CLIENTCapNetRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic type;
@dynamic priceBase;
@dynamic capNetArray, capNetArray_Count;

typedef struct API_CLIENTCapNetRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTECapFlowType type;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *capNetArray;
} API_CLIENTCapNetRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCapNetRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCapNetRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTECapFlowType_EnumDescriptor,
        .number = API_CLIENTCapNetRsp_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetRsp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCapNetRsp_FieldNumber_PriceBase,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "capNetArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECapNetData),
        .number = API_CLIENTCapNetRsp_FieldNumber_CapNetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCapNetRsp__storage_, capNetArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCapNetRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCapNetRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCapNetRsp_Type_RawValue(API_CLIENTCapNetRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTCapNetRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapNetRsp_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCapNetRsp_Type_RawValue(API_CLIENTCapNetRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCapNetRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCapNetRsp_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTBatchGetCapNetByTimeReq

@implementation API_CLIENTBatchGetCapNetByTimeReq

@dynamic idArray, idArray_Count;
@dynamic time;

typedef struct API_CLIENTBatchGetCapNetByTimeReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *idArray;
  int64_t time;
} API_CLIENTBatchGetCapNetByTimeReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTBatchGetCapNetByTimeReq_FieldNumber_IdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapNetByTimeReq__storage_, idArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTBatchGetCapNetByTimeReq_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapNetByTimeReq__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTBatchGetCapNetByTimeReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTBatchGetCapNetByTimeReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTBatchGetCapNetByTimeResp

@implementation API_CLIENTBatchGetCapNetByTimeResp

@dynamic batchNetRespArray, batchNetRespArray_Count;

typedef struct API_CLIENTBatchGetCapNetByTimeResp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *batchNetRespArray;
} API_CLIENTBatchGetCapNetByTimeResp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "batchNetRespArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCapNetRsp),
        .number = API_CLIENTBatchGetCapNetByTimeResp_FieldNumber_BatchNetRespArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTBatchGetCapNetByTimeResp__storage_, batchNetRespArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTBatchGetCapNetByTimeResp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTBatchGetCapNetByTimeResp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTScmLatestReq

@implementation API_CLIENTScmLatestReq

@dynamic hasId_p, id_p;

typedef struct API_CLIENTScmLatestReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
} API_CLIENTScmLatestReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTScmLatestReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmLatestReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmLatestReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmLatestReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTScmLatestRsp

@implementation API_CLIENTScmLatestRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasData_p, data_p;

typedef struct API_CLIENTScmLatestRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTEScmData *data_p;
} API_CLIENTScmLatestRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTScmLatestRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmLatestRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTScmLatestRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmLatestRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmLatestRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTScmLatestRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEScmData),
        .number = API_CLIENTScmLatestRsp_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTScmLatestRsp__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmLatestRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmLatestRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTScmTsReq

@implementation API_CLIENTScmTsReq

@dynamic hasId_p, id_p;
@dynamic scene;

typedef struct API_CLIENTScmTsReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEScmScene scene;
  OBJECT_SECUFullID *id_p;
} API_CLIENTScmTsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTScmTsReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEScmScene_EnumDescriptor,
        .number = API_CLIENTScmTsReq_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmTsReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmTsReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTScmTsReq_Scene_RawValue(API_CLIENTScmTsReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTScmTsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTScmTsReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTScmTsReq_Scene_RawValue(API_CLIENTScmTsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTScmTsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTScmTsReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTScmTsRsp

@implementation API_CLIENTScmTsRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic scene;
@dynamic priceBase;
@dynamic dataArray, dataArray_Count;

typedef struct API_CLIENTScmTsRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEScmScene scene;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *dataArray;
} API_CLIENTScmTsRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTScmTsRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTScmTsRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEScmScene_EnumDescriptor,
        .number = API_CLIENTScmTsRsp_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmTsRsp_FieldNumber_PriceBase,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEScmData),
        .number = API_CLIENTScmTsRsp_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTScmTsRsp__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmTsRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmTsRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTScmTsRsp_Scene_RawValue(API_CLIENTScmTsRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTScmTsRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTScmTsRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTScmTsRsp_Scene_RawValue(API_CLIENTScmTsRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTScmTsRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTScmTsRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTScmKlineReq

@implementation API_CLIENTScmKlineReq

@dynamic cycletype;
@dynamic code;
@dynamic from;
@dynamic count;

typedef struct API_CLIENTScmKlineReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t cycletype;
  int32_t count;
  NSString *code;
  uint64_t from;
} API_CLIENTScmKlineReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cycletype",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmKlineReq_FieldNumber_Cycletype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineReq__storage_, cycletype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmKlineReq_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineReq__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmKlineReq_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineReq__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmKlineReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmKlineReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmKlineReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTScmKlineRsp

@implementation API_CLIENTScmKlineRsp

@dynamic hasError, error;
@dynamic code;
@dynamic priceBase;
@dynamic dataArray, dataArray_Count;

typedef struct API_CLIENTScmKlineRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  NSString *code;
  NSMutableArray *dataArray;
} API_CLIENTScmKlineRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTScmKlineRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmKlineRsp_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineRsp__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmKlineRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEScmKline),
        .number = API_CLIENTScmKlineRsp_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTScmKlineRsp__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmKlineRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmKlineRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTScmFiveQuotaReq

@implementation API_CLIENTScmFiveQuotaReq

@dynamic code;
@dynamic from;

typedef struct API_CLIENTScmFiveQuotaReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *code;
  uint64_t from;
} API_CLIENTScmFiveQuotaReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmFiveQuotaReq_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaReq__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmFiveQuotaReq_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaReq__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmFiveQuotaReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmFiveQuotaReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTScmFiveQuotaRsp

@implementation API_CLIENTScmFiveQuotaRsp

@dynamic hasError, error;
@dynamic code;
@dynamic priceBase;
@dynamic hasLatestData, latestData;
@dynamic tsDataArray, tsDataArray_Count;

typedef struct API_CLIENTScmFiveQuotaRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  NSString *code;
  OBJECT_QUOTEScmData *latestData;
  NSMutableArray *tsDataArray;
} API_CLIENTScmFiveQuotaRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTScmFiveQuotaRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmFiveQuotaRsp_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaRsp__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTScmFiveQuotaRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEScmData),
        .number = API_CLIENTScmFiveQuotaRsp_FieldNumber_LatestData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaRsp__storage_, latestData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tsDataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEScmData),
        .number = API_CLIENTScmFiveQuotaRsp_FieldNumber_TsDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTScmFiveQuotaRsp__storage_, tsDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTScmFiveQuotaRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTScmFiveQuotaRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\t\000\004\n\000\005\000tsData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTDealStatsReq

@implementation API_CLIENTDealStatsReq

@dynamic hasId_p, id_p;
@dynamic reqType;
@dynamic reqBegin;
@dynamic reqNub;
@dynamic bidOrAsk;
@dynamic marketTime;
@dynamic tradeDay;
@dynamic sortType;
@dynamic sortMode;
@dynamic greyType;

typedef struct API_CLIENTDealStatsReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t reqType;
  int32_t reqBegin;
  int32_t reqNub;
  API_CLIENTBidOrAskType bidOrAsk;
  API_CLIENTMarketTimeType marketTime;
  int32_t tradeDay;
  API_CLIENTTickSortType sortType;
  API_CLIENTTickSortMode sortMode;
  OBJECT_MARKETGreyType greyType;
  OBJECT_SECUFullID *id_p;
} API_CLIENTDealStatsReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTDealStatsReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reqType",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsReq_FieldNumber_ReqType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, reqType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reqBegin",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsReq_FieldNumber_ReqBegin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, reqBegin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reqNub",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsReq_FieldNumber_ReqNub,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, reqNub),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "bidOrAsk",
        .dataTypeSpecific.enumDescFunc = API_CLIENTBidOrAskType_EnumDescriptor,
        .number = API_CLIENTDealStatsReq_FieldNumber_BidOrAsk,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, bidOrAsk),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "marketTime",
        .dataTypeSpecific.enumDescFunc = API_CLIENTMarketTimeType_EnumDescriptor,
        .number = API_CLIENTDealStatsReq_FieldNumber_MarketTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, marketTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tradeDay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsReq_FieldNumber_TradeDay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, tradeDay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "sortType",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTickSortType_EnumDescriptor,
        .number = API_CLIENTDealStatsReq_FieldNumber_SortType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, sortType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sortMode",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTickSortMode_EnumDescriptor,
        .number = API_CLIENTDealStatsReq_FieldNumber_SortMode,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, sortMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "greyType",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETGreyType_EnumDescriptor,
        .number = API_CLIENTDealStatsReq_FieldNumber_GreyType,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsReq__storage_, greyType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTDealStatsReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTDealStatsReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\002\007\000\003\010\000\004\006\000\005\010\000\006\n\000\007\010\000\010\010\000\t\010\000\n\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTDealStatsReq_BidOrAsk_RawValue(API_CLIENTDealStatsReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_BidOrAsk];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTDealStatsReq_BidOrAsk_RawValue(API_CLIENTDealStatsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_BidOrAsk];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTDealStatsReq_MarketTime_RawValue(API_CLIENTDealStatsReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_MarketTime];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTDealStatsReq_MarketTime_RawValue(API_CLIENTDealStatsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_MarketTime];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTDealStatsReq_SortType_RawValue(API_CLIENTDealStatsReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_SortType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTDealStatsReq_SortType_RawValue(API_CLIENTDealStatsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_SortType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTDealStatsReq_SortMode_RawValue(API_CLIENTDealStatsReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_SortMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTDealStatsReq_SortMode_RawValue(API_CLIENTDealStatsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_SortMode];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTDealStatsReq_GreyType_RawValue(API_CLIENTDealStatsReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_GreyType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTDealStatsReq_GreyType_RawValue(API_CLIENTDealStatsReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTDealStatsReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTDealStatsReq_FieldNumber_GreyType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTDealStatsRsp

@implementation API_CLIENTDealStatsRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic agvTradePrice;
@dynamic totalTradeVol;
@dynamic totalTradeCount;
@dynamic totalAskCount;
@dynamic totalBidCount;
@dynamic totalBothCount;
@dynamic priceDataArray, priceDataArray_Count;

typedef struct API_CLIENTDealStatsRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *priceDataArray;
  uint64_t agvTradePrice;
  uint64_t totalTradeVol;
  uint64_t totalTradeCount;
  uint64_t totalAskCount;
  uint64_t totalBidCount;
  uint64_t totalBothCount;
} API_CLIENTDealStatsRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTDealStatsRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTDealStatsRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "agvTradePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_AgvTradePrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, agvTradePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalTradeVol",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_TotalTradeVol,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, totalTradeVol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalTradeCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_TotalTradeCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, totalTradeCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalAskCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_TotalAskCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, totalAskCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalBidCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_TotalBidCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, totalBidCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalBothCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDealStatsRsp_FieldNumber_TotalBothCount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, totalBothCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceDataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQPriceData),
        .number = API_CLIENTDealStatsRsp_FieldNumber_PriceDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTDealStatsRsp__storage_, priceDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTDealStatsRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTDealStatsRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\003\t\000\004\r\000\005\r\000\006\017\000\007\r\000\010\r\000\t\016\000\n\000priceData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTExchangeDealStatsRsp

@implementation API_CLIENTExchangeDealStatsRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic agvTradePrice;
@dynamic totalTradeVol;
@dynamic totalTradeCount;
@dynamic totalAskCount;
@dynamic totalBidCount;
@dynamic totalBothCount;
@dynamic latest;
@dynamic exchangeDataArray, exchangeDataArray_Count;

typedef struct API_CLIENTExchangeDealStatsRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *exchangeDataArray;
  uint64_t agvTradePrice;
  uint64_t totalTradeVol;
  uint64_t totalTradeCount;
  uint64_t totalAskCount;
  uint64_t totalBidCount;
  uint64_t totalBothCount;
  uint64_t latest;
} API_CLIENTExchangeDealStatsRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "agvTradePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_AgvTradePrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, agvTradePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalTradeVol",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_TotalTradeVol,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, totalTradeVol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalTradeCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_TotalTradeCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, totalTradeCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalAskCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_TotalAskCount,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, totalAskCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalBidCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_TotalBidCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, totalBidCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalBothCount",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_TotalBothCount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, totalBothCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "latest",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_Latest,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, latest),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "exchangeDataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQExchangeData),
        .number = API_CLIENTExchangeDealStatsRsp_FieldNumber_ExchangeDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTExchangeDealStatsRsp__storage_, exchangeDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTExchangeDealStatsRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTExchangeDealStatsRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\003\t\000\004\r\000\005\r\000\006\017\000\007\r\000\010\r\000\t\016\000\013\000exchangeData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTArrayChipSection

@implementation API_CLIENTArrayChipSection

@dynamic beginPrice;
@dynamic endPrice;

typedef struct API_CLIENTArrayChipSection__storage_ {
  uint32_t _has_storage_[1];
  int32_t beginPrice;
  int32_t endPrice;
} API_CLIENTArrayChipSection__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "beginPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayChipSection_FieldNumber_BeginPrice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTArrayChipSection__storage_, beginPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayChipSection_FieldNumber_EndPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTArrayChipSection__storage_, endPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTArrayChipSection class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTArrayChipSection__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001J\000\002H\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTArrayCYQ

@implementation API_CLIENTArrayCYQ

@dynamic price;
@dynamic vol;

typedef struct API_CLIENTArrayCYQ__storage_ {
  uint32_t _has_storage_[1];
  uint64_t price;
  uint64_t vol;
} API_CLIENTArrayCYQ__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "price",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQ_FieldNumber_Price,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQ__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "vol",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQ_FieldNumber_Vol,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQ__storage_, vol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTArrayCYQ class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTArrayCYQ__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001E\000\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTArrayCYQMsg

@implementation API_CLIENTArrayCYQMsg

@dynamic tradeDay;
@dynamic winnerRate;
@dynamic avgCost;
@dynamic supPosition;
@dynamic pressPosition;
@dynamic chipCoincidence;
@dynamic hasArrNinetyPerSrc, arrNinetyPerSrc;
@dynamic hasArrSeventyPerSrc, arrSeventyPerSrc;
@dynamic arrCyqArray, arrCyqArray_Count;

typedef struct API_CLIENTArrayCYQMsg__storage_ {
  uint32_t _has_storage_[1];
  int32_t tradeDay;
  int32_t winnerRate;
  int32_t chipCoincidence;
  API_CLIENTArrayChipSection *arrNinetyPerSrc;
  API_CLIENTArrayChipSection *arrSeventyPerSrc;
  NSMutableArray *arrCyqArray;
  uint64_t avgCost;
  uint64_t supPosition;
  uint64_t pressPosition;
} API_CLIENTArrayCYQMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tradeDay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQMsg_FieldNumber_TradeDay,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, tradeDay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "winnerRate",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQMsg_FieldNumber_WinnerRate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, winnerRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "avgCost",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQMsg_FieldNumber_AvgCost,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, avgCost),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "supPosition",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQMsg_FieldNumber_SupPosition,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, supPosition),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pressPosition",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQMsg_FieldNumber_PressPosition,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, pressPosition),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "chipCoincidence",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTArrayCYQMsg_FieldNumber_ChipCoincidence,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, chipCoincidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "arrNinetyPerSrc",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTArrayChipSection),
        .number = API_CLIENTArrayCYQMsg_FieldNumber_ArrNinetyPerSrc,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, arrNinetyPerSrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "arrSeventyPerSrc",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTArrayChipSection),
        .number = API_CLIENTArrayCYQMsg_FieldNumber_ArrSeventyPerSrc,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, arrSeventyPerSrc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "arrCyqArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTArrayCYQ),
        .number = API_CLIENTArrayCYQMsg_FieldNumber_ArrCyqArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTArrayCYQMsg__storage_, arrCyqArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTArrayCYQMsg class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTArrayCYQMsg__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\t\001H\000\002J\000\003G\000\004K\000\005M\000\006O\000\007Mb\000\010Nb\000\t\000ArrCYQ\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQReq

@implementation API_CLIENTCYQReq

@dynamic market;
@dynamic stockCode;
@dynamic beginDay;
@dynamic direction;
@dynamic reqNub;

typedef struct API_CLIENTCYQReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t beginDay;
  int32_t direction;
  int32_t reqNub;
  NSString *market;
  NSString *stockCode;
} API_CLIENTCYQReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQReq_FieldNumber_Market,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQReq__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stockCode",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQReq_FieldNumber_StockCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQReq__storage_, stockCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "beginDay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQReq_FieldNumber_BeginDay,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCYQReq__storage_, beginDay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "direction",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQReq_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCYQReq__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "reqNub",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQReq_FieldNumber_ReqNub,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTCYQReq__storage_, reqNub),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001F\000\002I\000\003H\000\005\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRsp

@implementation API_CLIENTCYQRsp

@dynamic hasError, error;
@dynamic market;
@dynamic stockCode;
@dynamic priceBase;
@dynamic arrCyqmsgArray, arrCyqmsgArray_Count;

typedef struct API_CLIENTCYQRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  NSString *market;
  NSString *stockCode;
  NSMutableArray *arrCyqmsgArray;
} API_CLIENTCYQRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCYQRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRsp_FieldNumber_Market,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRsp__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "stockCode",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRsp_FieldNumber_StockCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRsp__storage_, stockCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRsp_FieldNumber_PriceBase,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "arrCyqmsgArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTArrayCYQMsg),
        .number = API_CLIENTCYQRsp_FieldNumber_ArrCyqmsgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRsp__storage_, arrCyqmsgArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002F\000\003I\000\004I\000\005\000ArrCYQMsg\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairStockAllReq

@implementation API_CLIENTCYQRepairStockAllReq

@dynamic hasId_p, id_p;

typedef struct API_CLIENTCYQRepairStockAllReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
} API_CLIENTCYQRepairStockAllReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCYQRepairStockAllReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockAllReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairStockAllReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairStockAllReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairStockAllRsp

@implementation API_CLIENTCYQRepairStockAllRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;

typedef struct API_CLIENTCYQRepairStockAllRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
} API_CLIENTCYQRepairStockAllRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCYQRepairStockAllRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockAllRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCYQRepairStockAllRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockAllRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairStockAllRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairStockAllRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairMarketAllReq

@implementation API_CLIENTCYQRepairMarketAllReq

@dynamic market;

typedef struct API_CLIENTCYQRepairMarketAllReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *market;
} API_CLIENTCYQRepairMarketAllReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairMarketAllReq_FieldNumber_Market,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketAllReq__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairMarketAllReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairMarketAllReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairMarketAllRsp

@implementation API_CLIENTCYQRepairMarketAllRsp

@dynamic hasError, error;
@dynamic market;

typedef struct API_CLIENTCYQRepairMarketAllRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSString *market;
} API_CLIENTCYQRepairMarketAllRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCYQRepairMarketAllRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketAllRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairMarketAllRsp_FieldNumber_Market,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketAllRsp__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairMarketAllRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairMarketAllRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002F\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairMarketDayReq

@implementation API_CLIENTCYQRepairMarketDayReq

@dynamic market;
@dynamic day;

typedef struct API_CLIENTCYQRepairMarketDayReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t day;
  NSString *market;
} API_CLIENTCYQRepairMarketDayReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairMarketDayReq_FieldNumber_Market,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketDayReq__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "day",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairMarketDayReq_FieldNumber_Day,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketDayReq__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairMarketDayReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairMarketDayReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001F\000\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairMarketDayRsp

@implementation API_CLIENTCYQRepairMarketDayRsp

@dynamic hasError, error;
@dynamic market;
@dynamic day;

typedef struct API_CLIENTCYQRepairMarketDayRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t day;
  API_CLIENTError *error;
  NSString *market;
} API_CLIENTCYQRepairMarketDayRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCYQRepairMarketDayRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketDayRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairMarketDayRsp_FieldNumber_Market,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketDayRsp__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "day",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairMarketDayRsp_FieldNumber_Day,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairMarketDayRsp__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairMarketDayRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairMarketDayRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002F\000\003C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairStockDayReq

@implementation API_CLIENTCYQRepairStockDayReq

@dynamic hasId_p, id_p;
@dynamic day;

typedef struct API_CLIENTCYQRepairStockDayReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t day;
  OBJECT_SECUFullID *id_p;
} API_CLIENTCYQRepairStockDayReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCYQRepairStockDayReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockDayReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "day",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairStockDayReq_FieldNumber_Day,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockDayReq__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairStockDayReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairStockDayReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCYQRepairStockDayRsp

@implementation API_CLIENTCYQRepairStockDayRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic day;

typedef struct API_CLIENTCYQRepairStockDayRsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t day;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
} API_CLIENTCYQRepairStockDayRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCYQRepairStockDayRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockDayRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTCYQRepairStockDayRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockDayRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "day",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCYQRepairStockDayRsp_FieldNumber_Day,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCYQRepairStockDayRsp__storage_, day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCYQRepairStockDayRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCYQRepairStockDayRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTTSReq

@implementation API_CLIENTTSReq

@dynamic hasId_p, id_p;
@dynamic subscribe;
@dynamic scene;

typedef struct API_CLIENTTSReq__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSScene scene;
  OBJECT_SECUFullID *id_p;
} API_CLIENTTSReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSReq_FieldNumber_Subscribe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSScene_EnumDescriptor,
        .number = API_CLIENTTSReq_FieldNumber_Scene,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTSReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSReq_Scene_RawValue(API_CLIENTTSReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSReq_Scene_RawValue(API_CLIENTTSReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSRsp

@implementation API_CLIENTTSRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic priceBase;
@dynamic hasId_p, id_p;
@dynamic dataArray, dataArray_Count;
@dynamic delay;
@dynamic sendTime;

typedef struct API_CLIENTTSRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSScene scene;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *dataArray;
  uint64_t sendTime;
} API_CLIENTTSRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTTSRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSScene_EnumDescriptor,
        .number = API_CLIENTTSRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTSRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTSRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSRsp_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTSRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETSData),
        .number = API_CLIENTTSRsp_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTSRsp__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSRsp_FieldNumber_Delay,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSRsp_FieldNumber_SendTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTTSRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\007\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSRsp_Scene_RawValue(API_CLIENTTSRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSRsp_Scene_RawValue(API_CLIENTTSRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSBatchReq

@implementation API_CLIENTTSBatchReq

@dynamic idsArray, idsArray_Count;
@dynamic subscribe;
@dynamic scene;

typedef struct API_CLIENTTSBatchReq__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSScene scene;
  NSMutableArray *idsArray;
} API_CLIENTTSBatchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSBatchReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchReq__storage_, idsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSBatchReq_FieldNumber_Subscribe,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSScene_EnumDescriptor,
        .number = API_CLIENTTSBatchReq_FieldNumber_Scene,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchReq__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSBatchReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSBatchReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSBatchReq_Scene_RawValue(API_CLIENTTSBatchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSBatchReq_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSBatchReq_Scene_RawValue(API_CLIENTTSBatchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSBatchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSBatchReq_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSBatchRsp

@implementation API_CLIENTTSBatchRsp

@dynamic hasError, error;
@dynamic scene;
@dynamic priceBase;
@dynamic datasArray, datasArray_Count;
@dynamic delay;
@dynamic sendTime;

typedef struct API_CLIENTTSBatchRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSScene scene;
  uint32_t priceBase;
  API_CLIENTError *error;
  NSMutableArray *datasArray;
  uint64_t sendTime;
} API_CLIENTTSBatchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTTSBatchRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSScene_EnumDescriptor,
        .number = API_CLIENTTSBatchRsp_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchRsp__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSBatchRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "datasArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTSRsp),
        .number = API_CLIENTTSBatchRsp_FieldNumber_DatasArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchRsp__storage_, datasArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSBatchRsp_FieldNumber_Delay,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSBatchRsp_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTTSBatchRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSBatchRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSBatchRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSBatchRsp_Scene_RawValue(API_CLIENTTSBatchRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSBatchRsp_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSBatchRsp_Scene_RawValue(API_CLIENTTSBatchRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSBatchRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSBatchRsp_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSReqByTime

@implementation API_CLIENTTSReqByTime

@dynamic hasId_p, id_p;
@dynamic reqTime;

typedef struct API_CLIENTTSReqByTime__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  uint64_t reqTime;
} API_CLIENTTSReqByTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSReqByTime_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSReqByTime__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reqTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSReqByTime_FieldNumber_ReqTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTSReqByTime__storage_, reqTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSReqByTime class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSReqByTime__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTTSReqV2

@implementation API_CLIENTTSReqV2

@dynamic hasId_p, id_p;
@dynamic scene;
@dynamic session;

typedef struct API_CLIENTTSReqV2__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSScene scene;
  API_CLIENTTSTrdSession session;
  OBJECT_SECUFullID *id_p;
} API_CLIENTTSReqV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSReqV2_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSReqV2__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSScene_EnumDescriptor,
        .number = API_CLIENTTSReqV2_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTSReqV2__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "session",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSTrdSession_EnumDescriptor,
        .number = API_CLIENTTSReqV2_FieldNumber_Session,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTSReqV2__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSReqV2 class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSReqV2__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSReqV2_Scene_RawValue(API_CLIENTTSReqV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSReqV2_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSReqV2_Scene_RawValue(API_CLIENTTSReqV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSReqV2_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTTSReqV2_Session_RawValue(API_CLIENTTSReqV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSReqV2_FieldNumber_Session];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSReqV2_Session_RawValue(API_CLIENTTSReqV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSReqV2_FieldNumber_Session];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSRspV2

@implementation API_CLIENTTSRspV2

@dynamic hasError, error;
@dynamic scene;
@dynamic session;
@dynamic priceBase;
@dynamic hasId_p, id_p;
@dynamic dataArray, dataArray_Count;
@dynamic delay;
@dynamic sendTime;

typedef struct API_CLIENTTSRspV2__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSScene scene;
  API_CLIENTTSTrdSession session;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *dataArray;
  uint64_t sendTime;
} API_CLIENTTSRspV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTTSRspV2_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scene",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSScene_EnumDescriptor,
        .number = API_CLIENTTSRspV2_FieldNumber_Scene,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, scene),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "session",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSTrdSession_EnumDescriptor,
        .number = API_CLIENTTSRspV2_FieldNumber_Session,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSRspV2_FieldNumber_PriceBase,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTSRspV2_FieldNumber_Id_p,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTSDataPerDay),
        .number = API_CLIENTTSRspV2_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSRspV2_FieldNumber_Delay,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSRspV2_FieldNumber_SendTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTTSRspV2__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSRspV2 class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSRspV2__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\010\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSRspV2_Scene_RawValue(API_CLIENTTSRspV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSRspV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSRspV2_FieldNumber_Scene];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSRspV2_Scene_RawValue(API_CLIENTTSRspV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSRspV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSRspV2_FieldNumber_Scene];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTTSRspV2_Session_RawValue(API_CLIENTTSRspV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSRspV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSRspV2_FieldNumber_Session];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSRspV2_Session_RawValue(API_CLIENTTSRspV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSRspV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSRspV2_FieldNumber_Session];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSDataPerTrdSession

@implementation API_CLIENTTSDataPerTrdSession

@dynamic trdSession;
@dynamic dataArray, dataArray_Count;

typedef struct API_CLIENTTSDataPerTrdSession__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSTrdSession trdSession;
  NSMutableArray *dataArray;
} API_CLIENTTSDataPerTrdSession__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "trdSession",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSTrdSession_EnumDescriptor,
        .number = API_CLIENTTSDataPerTrdSession_FieldNumber_TrdSession,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSDataPerTrdSession__storage_, trdSession),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETSData),
        .number = API_CLIENTTSDataPerTrdSession_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTSDataPerTrdSession__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSDataPerTrdSession class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSDataPerTrdSession__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTSDataPerTrdSession_TrdSession_RawValue(API_CLIENTTSDataPerTrdSession *message) {
  GPBDescriptor *descriptor = [API_CLIENTTSDataPerTrdSession descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSDataPerTrdSession_FieldNumber_TrdSession];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTSDataPerTrdSession_TrdSession_RawValue(API_CLIENTTSDataPerTrdSession *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTSDataPerTrdSession descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTSDataPerTrdSession_FieldNumber_TrdSession];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTSDataPerDay

@implementation API_CLIENTTSDataPerDay

@dynamic date;
@dynamic perSessionDataArray, perSessionDataArray_Count;

typedef struct API_CLIENTTSDataPerDay__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *perSessionDataArray;
  uint64_t date;
} API_CLIENTTSDataPerDay__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTSDataPerDay_FieldNumber_Date,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTSDataPerDay__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "perSessionDataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTSDataPerTrdSession),
        .number = API_CLIENTTSDataPerDay_FieldNumber_PerSessionDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTSDataPerDay__storage_, perSessionDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTSDataPerDay class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTSDataPerDay__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000perSessionData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTTickReq

@implementation API_CLIENTTickReq

@dynamic hasId_p, id_p;
@dynamic subscribe;
@dynamic from;
@dynamic count;
@dynamic direction;
@dynamic seq;

typedef struct API_CLIENTTickReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  COMMONPageDirection direction;
  OBJECT_SECUFullID *id_p;
  uint64_t from;
  uint64_t seq;
} API_CLIENTTickReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTickReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTickReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickReq_FieldNumber_Subscribe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickReq_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTickReq__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickReq_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTickReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = COMMONPageDirection_EnumDescriptor,
        .number = API_CLIENTTickReq_FieldNumber_Direction,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTTickReq__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickReq_FieldNumber_Seq,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTTickReq__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTickReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTickReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTickReq_Direction_RawValue(API_CLIENTTickReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTTickReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickReq_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTickReq_Direction_RawValue(API_CLIENTTickReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTickReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickReq_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTickRsp

@implementation API_CLIENTTickRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic hasMore;
@dynamic from;
@dynamic direction;
@dynamic priceBase;
@dynamic dataArray, dataArray_Count;
@dynamic delay;
@dynamic sendTime;

typedef struct API_CLIENTTickRsp__storage_ {
  uint32_t _has_storage_[1];
  COMMONPageDirection direction;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *dataArray;
  uint64_t from;
  uint64_t sendTime;
} API_CLIENTTickRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTTickRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTickRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hasMore",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRsp_FieldNumber_HasMore,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRsp_FieldNumber_From,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = COMMONPageDirection_EnumDescriptor,
        .number = API_CLIENTTickRsp_FieldNumber_Direction,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRsp_FieldNumber_PriceBase,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETickData),
        .number = API_CLIENTTickRsp_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRsp_FieldNumber_Delay,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRsp_FieldNumber_SendTime,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(API_CLIENTTickRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTickRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTickRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\t\000\t\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTickRsp_Direction_RawValue(API_CLIENTTickRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTTickRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickRsp_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTickRsp_Direction_RawValue(API_CLIENTTickRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTickRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickRsp_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTickPageCtx

@implementation API_CLIENTTickPageCtx

@dynamic from;
@dynamic seq;
@dynamic session;

typedef struct API_CLIENTTickPageCtx__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTTSTrdSession session;
  uint64_t from;
  uint64_t seq;
} API_CLIENTTickPageCtx__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickPageCtx_FieldNumber_From,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTickPageCtx__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickPageCtx_FieldNumber_Seq,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTickPageCtx__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "session",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSTrdSession_EnumDescriptor,
        .number = API_CLIENTTickPageCtx_FieldNumber_Session,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTickPageCtx__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTickPageCtx class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTickPageCtx__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTickPageCtx_Session_RawValue(API_CLIENTTickPageCtx *message) {
  GPBDescriptor *descriptor = [API_CLIENTTickPageCtx descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickPageCtx_FieldNumber_Session];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTickPageCtx_Session_RawValue(API_CLIENTTickPageCtx *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTickPageCtx descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickPageCtx_FieldNumber_Session];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTickReqV2

@implementation API_CLIENTTickReqV2

@dynamic hasId_p, id_p;
@dynamic subscribe;
@dynamic hasPageCtx, pageCtx;
@dynamic count;
@dynamic direction;
@dynamic session;

typedef struct API_CLIENTTickReqV2__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  COMMONPageDirection direction;
  API_CLIENTTSTrdSession session;
  OBJECT_SECUFullID *id_p;
  API_CLIENTTickPageCtx *pageCtx;
} API_CLIENTTickReqV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTickReqV2_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTickReqV2__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickReqV2_FieldNumber_Subscribe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "pageCtx",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTickPageCtx),
        .number = API_CLIENTTickReqV2_FieldNumber_PageCtx,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTickReqV2__storage_, pageCtx),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickReqV2_FieldNumber_Count,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTickReqV2__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = COMMONPageDirection_EnumDescriptor,
        .number = API_CLIENTTickReqV2_FieldNumber_Direction,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTTickReqV2__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "session",
        .dataTypeSpecific.enumDescFunc = API_CLIENTTSTrdSession_EnumDescriptor,
        .number = API_CLIENTTickReqV2_FieldNumber_Session,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTTickReqV2__storage_, session),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTickReqV2 class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTickReqV2__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTickReqV2_Direction_RawValue(API_CLIENTTickReqV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTickReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickReqV2_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTickReqV2_Direction_RawValue(API_CLIENTTickReqV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTickReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickReqV2_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTTickReqV2_Session_RawValue(API_CLIENTTickReqV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTickReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickReqV2_FieldNumber_Session];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTickReqV2_Session_RawValue(API_CLIENTTickReqV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTickReqV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickReqV2_FieldNumber_Session];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTTickRspV2

@implementation API_CLIENTTickRspV2

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic hasNextPageCtx, nextPageCtx;
@dynamic direction;
@dynamic priceBase;
@dynamic dataArray, dataArray_Count;
@dynamic delay;
@dynamic sendTime;
@dynamic hasMore;

typedef struct API_CLIENTTickRspV2__storage_ {
  uint32_t _has_storage_[1];
  COMMONPageDirection direction;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  API_CLIENTTickPageCtx *nextPageCtx;
  NSMutableArray *dataArray;
  uint64_t sendTime;
} API_CLIENTTickRspV2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTTickRspV2_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTTickRspV2_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nextPageCtx",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTTickPageCtx),
        .number = API_CLIENTTickRspV2_FieldNumber_NextPageCtx,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, nextPageCtx),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = COMMONPageDirection_EnumDescriptor,
        .number = API_CLIENTTickRspV2_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRspV2_FieldNumber_PriceBase,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETickData),
        .number = API_CLIENTTickRspV2_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRspV2_FieldNumber_Delay,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRspV2_FieldNumber_SendTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTTickRspV2__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "hasMore",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTTickRspV2_FieldNumber_HasMore,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTTickRspV2 class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTTickRspV2__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\003\013\000\005\t\000\010\010\000\t\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTTickRspV2_Direction_RawValue(API_CLIENTTickRspV2 *message) {
  GPBDescriptor *descriptor = [API_CLIENTTickRspV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickRspV2_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTTickRspV2_Direction_RawValue(API_CLIENTTickRspV2 *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTTickRspV2 descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTTickRspV2_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTKLineReq

@implementation API_CLIENTKLineReq

@dynamic hasId_p, id_p;
@dynamic subscribe;
@dynamic type;
@dynamic direction;
@dynamic from;
@dynamic count;

typedef struct API_CLIENTKLineReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEKLineType type;
  OBJECT_QUOTEKLineDirection direction;
  int32_t count;
  OBJECT_SECUFullID *id_p;
  uint64_t from;
} API_CLIENTKLineReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTKLineReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTKLineReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "subscribe",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineReq_FieldNumber_Subscribe,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEKLineType_EnumDescriptor,
        .number = API_CLIENTKLineReq_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTKLineReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEKLineDirection_EnumDescriptor,
        .number = API_CLIENTKLineReq_FieldNumber_Direction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTKLineReq__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineReq_FieldNumber_From,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTKLineReq__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineReq_FieldNumber_Count,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTKLineReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTKLineReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTKLineReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTKLineReq_Type_RawValue(API_CLIENTKLineReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLineReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLineReq_Type_RawValue(API_CLIENTKLineReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLineReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTKLineReq_Direction_RawValue(API_CLIENTKLineReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLineReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineReq_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLineReq_Direction_RawValue(API_CLIENTKLineReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLineReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineReq_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTKLineRsp

@implementation API_CLIENTKLineRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic type;
@dynamic direction;
@dynamic from;
@dynamic priceBase;
@dynamic dataArray, dataArray_Count;
@dynamic delay;
@dynamic sendTime;

typedef struct API_CLIENTKLineRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEKLineType type;
  OBJECT_QUOTEKLineDirection direction;
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *dataArray;
  uint64_t from;
  uint64_t sendTime;
} API_CLIENTKLineRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTKLineRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTKLineRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEKLineType_EnumDescriptor,
        .number = API_CLIENTKLineRsp_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "direction",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEKLineDirection_EnumDescriptor,
        .number = API_CLIENTKLineRsp_FieldNumber_Direction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, direction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineRsp_FieldNumber_From,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineRsp_FieldNumber_PriceBase,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEKLineData),
        .number = API_CLIENTKLineRsp_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineRsp_FieldNumber_Delay,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTKLineRsp_FieldNumber_SendTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTKLineRsp__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTKLineRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTKLineRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\006\t\000\t\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTKLineRsp_Type_RawValue(API_CLIENTKLineRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLineRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineRsp_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLineRsp_Type_RawValue(API_CLIENTKLineRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLineRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineRsp_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTKLineRsp_Direction_RawValue(API_CLIENTKLineRsp *message) {
  GPBDescriptor *descriptor = [API_CLIENTKLineRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineRsp_FieldNumber_Direction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTKLineRsp_Direction_RawValue(API_CLIENTKLineRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTKLineRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTKLineRsp_FieldNumber_Direction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTSCInfoReq

@implementation API_CLIENTSCInfoReq

@dynamic scmArray, scmArray_Count;

typedef struct API_CLIENTSCInfoReq__storage_ {
  uint32_t _has_storage_[1];
  GPBEnumArray *scmArray;
} API_CLIENTSCInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scmArray",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEStockConnectMarket_EnumDescriptor,
        .number = API_CLIENTSCInfoReq_FieldNumber_ScmArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSCInfoReq__storage_, scmArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSCInfoReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSCInfoReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTSCInfoRsp

@implementation API_CLIENTSCInfoRsp

@dynamic hasError, error;
@dynamic scinfoArray, scinfoArray_Count;

typedef struct API_CLIENTSCInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *scinfoArray;
} API_CLIENTSCInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTSCInfoRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSCInfoRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scinfoArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEStockConnectInfo),
        .number = API_CLIENTSCInfoRsp_FieldNumber_ScinfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSCInfoRsp__storage_, scinfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSCInfoRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSCInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTQuantityPriceReq

@implementation API_CLIENTQuantityPriceReq

@dynamic hasId_p, id_p;
@dynamic from;

typedef struct API_CLIENTQuantityPriceReq__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  uint64_t from;
} API_CLIENTQuantityPriceReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTQuantityPriceReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTQuantityPriceReq_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceReq__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTQuantityPriceReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTQuantityPriceReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTQuantityPriceRsp

@implementation API_CLIENTQuantityPriceRsp

@dynamic hasError, error;
@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic from;
@dynamic time;
@dynamic totalVolume;
@dynamic dataArray, dataArray_Count;

typedef struct API_CLIENTQuantityPriceRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  API_CLIENTError *error;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *dataArray;
  uint64_t from;
  uint64_t time;
  uint64_t totalVolume;
} API_CLIENTQuantityPriceRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_Time,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "totalVolume",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_TotalVolume,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, totalVolume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQPriceData),
        .number = API_CLIENTQuantityPriceRsp_FieldNumber_DataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTQuantityPriceRsp__storage_, dataArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTQuantityPriceRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTQuantityPriceRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCodeListReq

@implementation API_CLIENTCodeListReq

@dynamic ver;
@dynamic marketsArray, marketsArray_Count;

typedef struct API_CLIENTCodeListReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t ver;
  NSMutableArray *marketsArray;
} API_CLIENTCodeListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ver",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListReq_FieldNumber_Ver,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListReq__storage_, ver),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "marketsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCodeListReq_MarketHash),
        .number = API_CLIENTCodeListReq_FieldNumber_MarketsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListReq__storage_, marketsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001C\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCodeListReq_MarketHash

@implementation API_CLIENTCodeListReq_MarketHash

@dynamic exchange;
@dynamic slotHashArray, slotHashArray_Count;

typedef struct API_CLIENTCodeListReq_MarketHash__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange exchange;
  GPBUInt32Array *slotHashArray;
} API_CLIENTCodeListReq_MarketHash__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = API_CLIENTCodeListReq_MarketHash_FieldNumber_Exchange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListReq_MarketHash__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "slotHashArray",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListReq_MarketHash_FieldNumber_SlotHashArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListReq_MarketHash__storage_, slotHashArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFixed32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListReq_MarketHash class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListReq_MarketHash__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTCodeListReq)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCodeListReq_MarketHash_Exchange_RawValue(API_CLIENTCodeListReq_MarketHash *message) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListReq_MarketHash descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListReq_MarketHash_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCodeListReq_MarketHash_Exchange_RawValue(API_CLIENTCodeListReq_MarketHash *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListReq_MarketHash descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListReq_MarketHash_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCodeListRsp

@implementation API_CLIENTCodeListRsp

@dynamic hasError, error;
@dynamic marketsArray, marketsArray_Count;

typedef struct API_CLIENTCodeListRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *marketsArray;
} API_CLIENTCodeListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCodeListRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "marketsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCodeListRsp_MarketSlot),
        .number = API_CLIENTCodeListRsp_FieldNumber_MarketsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp__storage_, marketsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCodeListRsp_Secu

@implementation API_CLIENTCodeListRsp_Secu

@dynamic code;
@dynamic name;
@dynamic pinyin;
@dynamic type1;
@dynamic type2;
@dynamic type3;
@dynamic secuNamesArray, secuNamesArray_Count;
@dynamic connectType;

typedef struct API_CLIENTCodeListRsp_Secu__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUSecuType1 type1;
  OBJECT_SECUSecuType2 type2;
  OBJECT_SECUSecuType3 type3;
  uint32_t connectType;
  NSString *code;
  NSString *name;
  NSString *pinyin;
  NSMutableArray *secuNamesArray;
} API_CLIENTCodeListRsp_Secu__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pinyin",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_Pinyin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, pinyin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type1",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType1_EnumDescriptor,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_Type1,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, type1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type2",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType2_EnumDescriptor,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_Type2,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, type2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type3",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType3_EnumDescriptor,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_Type3,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, type3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "secuNamesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecurityName),
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_SecuNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, secuNamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "connectType",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_Secu_FieldNumber_ConnectType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Secu__storage_, connectType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListRsp_Secu class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListRsp_Secu__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTCodeListRsp)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCodeListRsp_Secu_Type1_RawValue(API_CLIENTCodeListRsp_Secu *message) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_Secu descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_Secu_FieldNumber_Type1];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCodeListRsp_Secu_Type1_RawValue(API_CLIENTCodeListRsp_Secu *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_Secu descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_Secu_FieldNumber_Type1];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTCodeListRsp_Secu_Type2_RawValue(API_CLIENTCodeListRsp_Secu *message) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_Secu descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_Secu_FieldNumber_Type2];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCodeListRsp_Secu_Type2_RawValue(API_CLIENTCodeListRsp_Secu *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_Secu descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_Secu_FieldNumber_Type2];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t API_CLIENTCodeListRsp_Secu_Type3_RawValue(API_CLIENTCodeListRsp_Secu *message) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_Secu descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_Secu_FieldNumber_Type3];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCodeListRsp_Secu_Type3_RawValue(API_CLIENTCodeListRsp_Secu *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_Secu descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_Secu_FieldNumber_Type3];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCodeListRsp_Slot

@implementation API_CLIENTCodeListRsp_Slot

@dynamic id_p;
@dynamic hash_p;
@dynamic secusArray, secusArray_Count;

typedef struct API_CLIENTCodeListRsp_Slot__storage_ {
  uint32_t _has_storage_[1];
  uint32_t id_p;
  uint32_t hash_p;
  NSMutableArray *secusArray;
} API_CLIENTCodeListRsp_Slot__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_Slot_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Slot__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hash_p",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_Slot_FieldNumber_Hash_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Slot__storage_, hash_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "secusArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCodeListRsp_Secu),
        .number = API_CLIENTCodeListRsp_Slot_FieldNumber_SecusArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_Slot__storage_, secusArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListRsp_Slot class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListRsp_Slot__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTCodeListRsp)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCodeListRsp_MarketSlot

@implementation API_CLIENTCodeListRsp_MarketSlot

@dynamic exchange;
@dynamic override;
@dynamic slotsArray, slotsArray_Count;

typedef struct API_CLIENTCodeListRsp_MarketSlot__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange exchange;
  NSMutableArray *slotsArray;
} API_CLIENTCodeListRsp_MarketSlot__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = API_CLIENTCodeListRsp_MarketSlot_FieldNumber_Exchange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_MarketSlot__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "override",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRsp_MarketSlot_FieldNumber_Override,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "slotsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCodeListRsp_Slot),
        .number = API_CLIENTCodeListRsp_MarketSlot_FieldNumber_SlotsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRsp_MarketSlot__storage_, slotsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListRsp_MarketSlot class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListRsp_MarketSlot__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTCodeListRsp)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCodeListRsp_MarketSlot_Exchange_RawValue(API_CLIENTCodeListRsp_MarketSlot *message) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_MarketSlot descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_MarketSlot_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCodeListRsp_MarketSlot_Exchange_RawValue(API_CLIENTCodeListRsp_MarketSlot *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRsp_MarketSlot descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRsp_MarketSlot_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTCodeListRspServer

@implementation API_CLIENTCodeListRspServer

@dynamic hasError, error;
@dynamic marketsArray, marketsArray_Count;

typedef struct API_CLIENTCodeListRspServer__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *marketsArray;
} API_CLIENTCodeListRspServer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTCodeListRspServer_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRspServer__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "marketsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTCodeListRspServer_MarketSlot),
        .number = API_CLIENTCodeListRspServer_FieldNumber_MarketsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRspServer__storage_, marketsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListRspServer class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListRspServer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTCodeListRspServer_MarketSlot

@implementation API_CLIENTCodeListRspServer_MarketSlot

@dynamic exchange;
@dynamic override;
@dynamic slotsArray, slotsArray_Count;

typedef struct API_CLIENTCodeListRspServer_MarketSlot__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange exchange;
  NSMutableArray *slotsArray;
} API_CLIENTCodeListRspServer_MarketSlot__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = API_CLIENTCodeListRspServer_MarketSlot_FieldNumber_Exchange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRspServer_MarketSlot__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "override",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRspServer_MarketSlot_FieldNumber_Override,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "slotsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTCodeListRspServer_MarketSlot_FieldNumber_SlotsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTCodeListRspServer_MarketSlot__storage_, slotsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTCodeListRspServer_MarketSlot class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTCodeListRspServer_MarketSlot__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTCodeListRspServer)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTCodeListRspServer_MarketSlot_Exchange_RawValue(API_CLIENTCodeListRspServer_MarketSlot *message) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRspServer_MarketSlot descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRspServer_MarketSlot_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTCodeListRspServer_MarketSlot_Exchange_RawValue(API_CLIENTCodeListRspServer_MarketSlot *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTCodeListRspServer_MarketSlot descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTCodeListRspServer_MarketSlot_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTSearchReq

@implementation API_CLIENTSearchReq

@dynamic type;
@dynamic keyword;
@dynamic from;
@dynamic exchangeArray, exchangeArray_Count;
@dynamic secuTypeArray, secuTypeArray_Count;
@dynamic count;
@dynamic type2Array, type2Array_Count;

typedef struct API_CLIENTSearchReq__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTSearchType type;
  uint32_t from;
  uint32_t count;
  NSString *keyword;
  GPBEnumArray *exchangeArray;
  GPBEnumArray *secuTypeArray;
  GPBEnumArray *type2Array;
} API_CLIENTSearchReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = API_CLIENTSearchType_EnumDescriptor,
        .number = API_CLIENTSearchReq_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSearchReq_FieldNumber_Keyword,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSearchReq_FieldNumber_From,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, from),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "exchangeArray",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = API_CLIENTSearchReq_FieldNumber_ExchangeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, exchangeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "secuTypeArray",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType1_EnumDescriptor,
        .number = API_CLIENTSearchReq_FieldNumber_SecuTypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, secuTypeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "count",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSearchReq_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, count),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type2Array",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType2_EnumDescriptor,
        .number = API_CLIENTSearchReq_FieldNumber_Type2Array,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSearchReq__storage_, type2Array),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSearchReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSearchReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTSearchReq_Type_RawValue(API_CLIENTSearchReq *message) {
  GPBDescriptor *descriptor = [API_CLIENTSearchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTSearchReq_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTSearchReq_Type_RawValue(API_CLIENTSearchReq *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTSearchReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTSearchReq_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTSearchRsp

@implementation API_CLIENTSearchRsp

@dynamic hasError, error;
@dynamic length;
@dynamic offset;
@dynamic resultsArray, resultsArray_Count;
@dynamic keyword;

typedef struct API_CLIENTSearchRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t length;
  uint32_t offset;
  API_CLIENTError *error;
  NSMutableArray *resultsArray;
  NSString *keyword;
} API_CLIENTSearchRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTSearchRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "length",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSearchRsp_FieldNumber_Length,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp__storage_, length),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "offset",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSearchRsp_FieldNumber_Offset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp__storage_, offset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTSearchRsp_Result),
        .number = API_CLIENTSearchRsp_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keyword",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTSearchRsp_FieldNumber_Keyword,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp__storage_, keyword),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSearchRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSearchRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTSearchRsp_Result

@implementation API_CLIENTSearchRsp_Result

@dynamic type;
@dynamic hasId_p, id_p;
@dynamic hasInfo, info;

typedef struct API_CLIENTSearchRsp_Result__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTSearchType type;
  OBJECT_SECUFullID *id_p;
  OBJECT_SECUInfo *info;
} API_CLIENTSearchRsp_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = API_CLIENTSearchType_EnumDescriptor,
        .number = API_CLIENTSearchRsp_Result_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp_Result__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTSearchRsp_Result_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp_Result__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = API_CLIENTSearchRsp_Result_FieldNumber_Info,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTSearchRsp_Result__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSearchRsp_Result class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSearchRsp_Result__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTSearchRsp)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t API_CLIENTSearchRsp_Result_Type_RawValue(API_CLIENTSearchRsp_Result *message) {
  GPBDescriptor *descriptor = [API_CLIENTSearchRsp_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTSearchRsp_Result_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetAPI_CLIENTSearchRsp_Result_Type_RawValue(API_CLIENTSearchRsp_Result *message, int32_t value) {
  GPBDescriptor *descriptor = [API_CLIENTSearchRsp_Result descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:API_CLIENTSearchRsp_Result_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - API_CLIENTSecuInfoReq

@implementation API_CLIENTSecuInfoReq

@dynamic idsArray, idsArray_Count;

typedef struct API_CLIENTSecuInfoReq__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *idsArray;
} API_CLIENTSecuInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTSecuInfoReq_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSecuInfoReq__storage_, idsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSecuInfoReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSecuInfoReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTSecuInfoRsp

@implementation API_CLIENTSecuInfoRsp

@dynamic hasError, error;
@dynamic resultsArray, resultsArray_Count;

typedef struct API_CLIENTSecuInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  API_CLIENTError *error;
  NSMutableArray *resultsArray;
} API_CLIENTSecuInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTSecuInfoRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSecuInfoRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resultsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTSecuInfoRsp_Result),
        .number = API_CLIENTSecuInfoRsp_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTSecuInfoRsp__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSecuInfoRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSecuInfoRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTSecuInfoRsp_Result

@implementation API_CLIENTSecuInfoRsp_Result

@dynamic hasId_p, id_p;
@dynamic hasInfo, info;

typedef struct API_CLIENTSecuInfoRsp_Result__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  OBJECT_SECUInfo *info;
} API_CLIENTSecuInfoRsp_Result__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTSecuInfoRsp_Result_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTSecuInfoRsp_Result__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = API_CLIENTSecuInfoRsp_Result_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTSecuInfoRsp_Result__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTSecuInfoRsp_Result class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTSecuInfoRsp_Result__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(API_CLIENTSecuInfoRsp)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTFixRTReq

@implementation API_CLIENTFixRTReq

@dynamic hasId_p, id_p;
@dynamic bizType;
@dynamic hasQuote, quote;
@dynamic specType;
@dynamic rawBytes;
@dynamic delayFlag;

typedef struct API_CLIENTFixRTReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t bizType;
  int32_t specType;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTEQuote *quote;
  NSData *rawBytes;
} API_CLIENTFixRTReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTFixRTReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bizType",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixRTReq_FieldNumber_BizType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTReq__storage_, bizType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "quote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuote),
        .number = API_CLIENTFixRTReq_FieldNumber_Quote,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTReq__storage_, quote),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "specType",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixRTReq_FieldNumber_SpecType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTReq__storage_, specType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rawBytes",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixRTReq_FieldNumber_RawBytes,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTReq__storage_, rawBytes),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "delayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixRTReq_FieldNumber_DelayFlag,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTFixRTReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTFixRTReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\007\000\004\010\000\005\010\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTFixRTRsp

@implementation API_CLIENTFixRTRsp

@dynamic hasId_p, id_p;
@dynamic hasError, error;

typedef struct API_CLIENTFixRTRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  API_CLIENTError *error;
} API_CLIENTFixRTRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTFixRTRsp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTFixRTRsp_FieldNumber_Error,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTFixRTRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTFixRTRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTFixRTRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTFixTSReq

@implementation API_CLIENTFixTSReq

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic type;
@dynamic listArray, listArray_Count;
@dynamic delayFlag;

typedef struct API_CLIENTFixTSReq__storage_ {
  uint32_t _has_storage_[1];
  int32_t priceBase;
  OBJECT_SECUFullID *id_p;
  NSString *type;
  NSMutableArray *listArray;
} API_CLIENTFixTSReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTFixTSReq_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTFixTSReq__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixTSReq_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTFixTSReq__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixTSReq_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTFixTSReq__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "listArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTETSData),
        .number = API_CLIENTFixTSReq_FieldNumber_ListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTFixTSReq__storage_, listArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "delayFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTFixTSReq_FieldNumber_DelayFlag,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTFixTSReq class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTFixTSReq__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\t\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTFixTSRsp

@implementation API_CLIENTFixTSRsp

@dynamic hasId_p, id_p;
@dynamic hasError, error;

typedef struct API_CLIENTFixTSRsp__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  API_CLIENTError *error;
} API_CLIENTFixTSRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTFixTSRsp_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTFixTSRsp__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTFixTSRsp_FieldNumber_Error,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTFixTSRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTFixTSRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTFixTSRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTDerivativesScoreInfo

@implementation API_CLIENTDerivativesScoreInfo

@dynamic hasId_p, id_p;
@dynamic hasTargetId, targetId;
@dynamic score;
@dynamic quoteTime;
@dynamic latestPrice;
@dynamic targetLatestPrice;
@dynamic priceBase;
@dynamic targetPriceBase;
@dynamic impliedVolatility;
@dynamic effgearing;
@dynamic netchng;
@dynamic pctchng;
@dynamic gearing;
@dynamic moneynessScore;
@dynamic maturityDateScore;
@dynamic spreadScore;
@dynamic outstandingScore;

typedef struct API_CLIENTDerivativesScoreInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t score;
  int32_t priceBase;
  int32_t targetPriceBase;
  int32_t impliedVolatility;
  int32_t effgearing;
  int32_t pctchng;
  int32_t gearing;
  int32_t moneynessScore;
  int32_t maturityDateScore;
  int32_t spreadScore;
  int32_t outstandingScore;
  OBJECT_SECUFullID *id_p;
  OBJECT_SECUFullID *targetId;
  uint64_t quoteTime;
  int64_t latestPrice;
  int64_t targetLatestPrice;
  int64_t netchng;
} API_CLIENTDerivativesScoreInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "targetId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_TargetId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, targetId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "score",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_Score,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, score),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "quoteTime",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_QuoteTime,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, quoteTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_LatestPrice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "targetLatestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_TargetLatestPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, targetLatestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_PriceBase,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "targetPriceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_TargetPriceBase,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, targetPriceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "impliedVolatility",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_ImpliedVolatility,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, impliedVolatility),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effgearing",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_Effgearing,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, effgearing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_Netchng,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_Pctchng,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gearing",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_Gearing,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, gearing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "moneynessScore",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_MoneynessScore,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, moneynessScore),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maturityDateScore",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_MaturityDateScore,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, maturityDateScore),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "spreadScore",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_SpreadScore,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, spreadScore),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "outstandingScore",
        .dataTypeSpecific.clazz = Nil,
        .number = API_CLIENTDerivativesScoreInfo_FieldNumber_OutstandingScore,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreInfo__storage_, outstandingScore),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTDerivativesScoreInfo class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTDerivativesScoreInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\013\002\010\000\004\t\000\005\013\000\006\021\000\007\t\000\010\017\000\t\021\000\016\016\000\017\021\000\020\013\000\021\020\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - API_CLIENTDerivativesScoreRsp

@implementation API_CLIENTDerivativesScoreRsp

@dynamic infosArray, infosArray_Count;
@dynamic hasError, error;

typedef struct API_CLIENTDerivativesScoreRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *infosArray;
  API_CLIENTError *error;
} API_CLIENTDerivativesScoreRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "infosArray",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTDerivativesScoreInfo),
        .number = API_CLIENTDerivativesScoreRsp_FieldNumber_InfosArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreRsp__storage_, infosArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.clazz = GPBObjCClass(API_CLIENTError),
        .number = API_CLIENTDerivativesScoreRsp_FieldNumber_Error,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(API_CLIENTDerivativesScoreRsp__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[API_CLIENTDerivativesScoreRsp class]
                                     rootClass:[API_CLIENTQueryRoot class]
                                          file:API_CLIENTQueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(API_CLIENTDerivativesScoreRsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
