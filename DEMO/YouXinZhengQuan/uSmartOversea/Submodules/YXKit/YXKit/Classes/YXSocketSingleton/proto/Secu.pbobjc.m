// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: secu.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Secu.pbobjc.h"
#import "Market.pbobjc.h"
#import "Const.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(OBJECT_SECUAdjustInfo);
GPBObjCClassDeclaration(OBJECT_SECUBondInfo);
GPBObjCClassDeclaration(OBJECT_SECUBriefInfo);
GPBObjCClassDeclaration(OBJECT_SECUFullID);
GPBObjCClassDeclaration(OBJECT_SECUFundInfo);
GPBObjCClassDeclaration(OBJECT_SECUIndexInfo);
GPBObjCClassDeclaration(OBJECT_SECUInfo);
GPBObjCClassDeclaration(OBJECT_SECUOptionInfo);
GPBObjCClassDeclaration(OBJECT_SECUSectorInfo);
GPBObjCClassDeclaration(OBJECT_SECUSecurityName);
GPBObjCClassDeclaration(OBJECT_SECUStockInfo);
GPBObjCClassDeclaration(OBJECT_SECUUsAdjustInfo);
GPBObjCClassDeclaration(OBJECT_SECUWarrantInfo);

#pragma mark - OBJECT_SECUSecuRoot

@implementation OBJECT_SECUSecuRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OBJECT_SECUSecuRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_SECUSecuRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.secu"
                                                 objcPrefix:@"OBJECT_SECU"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_SECUSecuType1

GPBEnumDescriptor *OBJECT_SECUSecuType1_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "St1None\000StStock\000StFund\000StFuture\000StBond\000S"
        "tOption\000StIndex\000StForex\000StCryptos\000StSect"
        "or\000";
    static const int32_t values[] = {
        OBJECT_SECUSecuType1_St1None,
        OBJECT_SECUSecuType1_StStock,
        OBJECT_SECUSecuType1_StFund,
        OBJECT_SECUSecuType1_StFuture,
        OBJECT_SECUSecuType1_StBond,
        OBJECT_SECUSecuType1_StOption,
        OBJECT_SECUSecuType1_StIndex,
        OBJECT_SECUSecuType1_StForex,
        OBJECT_SECUSecuType1_StCryptos,
        OBJECT_SECUSecuType1_StSector,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUSecuType1)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUSecuType1_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUSecuType1_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUSecuType1_St1None:
    case OBJECT_SECUSecuType1_StStock:
    case OBJECT_SECUSecuType1_StFund:
    case OBJECT_SECUSecuType1_StFuture:
    case OBJECT_SECUSecuType1_StBond:
    case OBJECT_SECUSecuType1_StOption:
    case OBJECT_SECUSecuType1_StIndex:
    case OBJECT_SECUSecuType1_StForex:
    case OBJECT_SECUSecuType1_StCryptos:
    case OBJECT_SECUSecuType1_StSector:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUSecuType2

GPBEnumDescriptor *OBJECT_SECUSecuType2_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "St2None\000StComStock\000StHighAdr\000StLowAdr\000St"
        "FieldFund\000StOtcFund\000StComdFut\000StFitf\000StH"
        "kBond\000StUsBond\000StHsBond\000StComOpt\000StUsWt\000"
        "StHsOpt\000StUsOpt\000StSgOpt\000StComIdx\000StComFo"
        "rex\000StCryptosCom\000StIndustry\000StRegion\000StC"
        "oncept\000StRank\000";
    static const int32_t values[] = {
        OBJECT_SECUSecuType2_St2None,
        OBJECT_SECUSecuType2_StComStock,
        OBJECT_SECUSecuType2_StHighAdr,
        OBJECT_SECUSecuType2_StLowAdr,
        OBJECT_SECUSecuType2_StFieldFund,
        OBJECT_SECUSecuType2_StOtcFund,
        OBJECT_SECUSecuType2_StComdFut,
        OBJECT_SECUSecuType2_StFitf,
        OBJECT_SECUSecuType2_StHkBond,
        OBJECT_SECUSecuType2_StUsBond,
        OBJECT_SECUSecuType2_StHsBond,
        OBJECT_SECUSecuType2_StComOpt,
        OBJECT_SECUSecuType2_StUsWt,
        OBJECT_SECUSecuType2_StHsOpt,
        OBJECT_SECUSecuType2_StUsOpt,
        OBJECT_SECUSecuType2_StSgOpt,
        OBJECT_SECUSecuType2_StComIdx,
        OBJECT_SECUSecuType2_StComForex,
        OBJECT_SECUSecuType2_StCryptosCom,
        OBJECT_SECUSecuType2_StIndustry,
        OBJECT_SECUSecuType2_StRegion,
        OBJECT_SECUSecuType2_StConcept,
        OBJECT_SECUSecuType2_StRank,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUSecuType2)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUSecuType2_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUSecuType2_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUSecuType2_St2None:
    case OBJECT_SECUSecuType2_StComStock:
    case OBJECT_SECUSecuType2_StHighAdr:
    case OBJECT_SECUSecuType2_StLowAdr:
    case OBJECT_SECUSecuType2_StFieldFund:
    case OBJECT_SECUSecuType2_StOtcFund:
    case OBJECT_SECUSecuType2_StComdFut:
    case OBJECT_SECUSecuType2_StFitf:
    case OBJECT_SECUSecuType2_StHkBond:
    case OBJECT_SECUSecuType2_StUsBond:
    case OBJECT_SECUSecuType2_StHsBond:
    case OBJECT_SECUSecuType2_StComOpt:
    case OBJECT_SECUSecuType2_StUsWt:
    case OBJECT_SECUSecuType2_StHsOpt:
    case OBJECT_SECUSecuType2_StUsOpt:
    case OBJECT_SECUSecuType2_StSgOpt:
    case OBJECT_SECUSecuType2_StComIdx:
    case OBJECT_SECUSecuType2_StComForex:
    case OBJECT_SECUSecuType2_StCryptosCom:
    case OBJECT_SECUSecuType2_StIndustry:
    case OBJECT_SECUSecuType2_StRegion:
    case OBJECT_SECUSecuType2_StConcept:
    case OBJECT_SECUSecuType2_StRank:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUSecuType3

GPBEnumDescriptor *OBJECT_SECUSecuType3_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "St3None\000StOtherStock\000StHsaStock\000StHsbSto"
        "ck\000StNtbStock\000StHkStock\000StUsStock\000StCdr\000"
        "StHdr\000StAdrOld\000StLowAdrOld\000StSgStock\000StH"
        "ighAdrOther\000StHighAdrHk\000StLowAdrOther\000St"
        "LowAdrHk\000StNoAdrOther\000StOtherFund\000StEndF"
        "und\000StEtf\000StLof\000StInInnoFund\000StTrustFund"
        "\000StFundUsEtn\000StTrustFundReit\000StOpenFund\000"
        "StQdiiFund\000StQfiiFund\000StFof\000StMoneyFund\000"
        "StOutInnoFund\000StOutStockFund\000StOutBondFu"
        "nd\000StOutMixFund\000StOutIndexFund\000StAsFut\000S"
        "tMetalFut\000StChemFut\000StForestFut\000StMoneyF"
        "ut\000StRateFut\000StIdxFut\000StHkComBd\000StHkEfn\000"
        "StUsEtn\000StUsObdBd\000StHsGbfBd\000StHsCbfBd\000St"
        "HsCpfBd\000StHsCbdBd\000StHsObdBd\000StHkOptStock"
        "\000StWarrant\000StCbbc\000StInlineWarrant\000StUsRi"
        "ghts\000StUsWarrant\000StUsOptStock\000StUsOptInd"
        "ex\000StSgWarrant\000StSgDlc\000StChinaIdx\000StHkId"
        "x\000StUsIdx\000StCryptosComBianance\000StCryptos"
        "ComHuobi\000StCryptosComOkex\000StCryptosComGa"
        "te\000StCryptosComBithumb\000StCryptosComBitfi"
        "nex\000StCryptosComBittrex\000StCryptosComBits"
        "tamp\000StHsIndustry\000StHkIndustry\000StUsIndus"
        "try\000StHsRegion\000StHsConcept\000StHkConcept\000S"
        "tHsRank\000";
    static const int32_t values[] = {
        OBJECT_SECUSecuType3_St3None,
        OBJECT_SECUSecuType3_StOtherStock,
        OBJECT_SECUSecuType3_StHsaStock,
        OBJECT_SECUSecuType3_StHsbStock,
        OBJECT_SECUSecuType3_StNtbStock,
        OBJECT_SECUSecuType3_StHkStock,
        OBJECT_SECUSecuType3_StUsStock,
        OBJECT_SECUSecuType3_StCdr,
        OBJECT_SECUSecuType3_StHdr,
        OBJECT_SECUSecuType3_StAdrOld,
        OBJECT_SECUSecuType3_StLowAdrOld,
        OBJECT_SECUSecuType3_StSgStock,
        OBJECT_SECUSecuType3_StHighAdrOther,
        OBJECT_SECUSecuType3_StHighAdrHk,
        OBJECT_SECUSecuType3_StLowAdrOther,
        OBJECT_SECUSecuType3_StLowAdrHk,
        OBJECT_SECUSecuType3_StNoAdrOther,
        OBJECT_SECUSecuType3_StOtherFund,
        OBJECT_SECUSecuType3_StEndFund,
        OBJECT_SECUSecuType3_StEtf,
        OBJECT_SECUSecuType3_StLof,
        OBJECT_SECUSecuType3_StInInnoFund,
        OBJECT_SECUSecuType3_StTrustFund,
        OBJECT_SECUSecuType3_StFundUsEtn,
        OBJECT_SECUSecuType3_StTrustFundReit,
        OBJECT_SECUSecuType3_StOpenFund,
        OBJECT_SECUSecuType3_StQdiiFund,
        OBJECT_SECUSecuType3_StQfiiFund,
        OBJECT_SECUSecuType3_StFof,
        OBJECT_SECUSecuType3_StMoneyFund,
        OBJECT_SECUSecuType3_StOutInnoFund,
        OBJECT_SECUSecuType3_StOutStockFund,
        OBJECT_SECUSecuType3_StOutBondFund,
        OBJECT_SECUSecuType3_StOutMixFund,
        OBJECT_SECUSecuType3_StOutIndexFund,
        OBJECT_SECUSecuType3_StAsFut,
        OBJECT_SECUSecuType3_StMetalFut,
        OBJECT_SECUSecuType3_StChemFut,
        OBJECT_SECUSecuType3_StForestFut,
        OBJECT_SECUSecuType3_StMoneyFut,
        OBJECT_SECUSecuType3_StRateFut,
        OBJECT_SECUSecuType3_StIdxFut,
        OBJECT_SECUSecuType3_StHkComBd,
        OBJECT_SECUSecuType3_StHkEfn,
        OBJECT_SECUSecuType3_StUsEtn,
        OBJECT_SECUSecuType3_StUsObdBd,
        OBJECT_SECUSecuType3_StHsGbfBd,
        OBJECT_SECUSecuType3_StHsCbfBd,
        OBJECT_SECUSecuType3_StHsCpfBd,
        OBJECT_SECUSecuType3_StHsCbdBd,
        OBJECT_SECUSecuType3_StHsObdBd,
        OBJECT_SECUSecuType3_StHkOptStock,
        OBJECT_SECUSecuType3_StWarrant,
        OBJECT_SECUSecuType3_StCbbc,
        OBJECT_SECUSecuType3_StInlineWarrant,
        OBJECT_SECUSecuType3_StUsRights,
        OBJECT_SECUSecuType3_StUsWarrant,
        OBJECT_SECUSecuType3_StUsOptStock,
        OBJECT_SECUSecuType3_StUsOptIndex,
        OBJECT_SECUSecuType3_StSgWarrant,
        OBJECT_SECUSecuType3_StSgDlc,
        OBJECT_SECUSecuType3_StChinaIdx,
        OBJECT_SECUSecuType3_StHkIdx,
        OBJECT_SECUSecuType3_StUsIdx,
        OBJECT_SECUSecuType3_StCryptosComBianance,
        OBJECT_SECUSecuType3_StCryptosComHuobi,
        OBJECT_SECUSecuType3_StCryptosComOkex,
        OBJECT_SECUSecuType3_StCryptosComGate,
        OBJECT_SECUSecuType3_StCryptosComBithumb,
        OBJECT_SECUSecuType3_StCryptosComBitfinex,
        OBJECT_SECUSecuType3_StCryptosComBittrex,
        OBJECT_SECUSecuType3_StCryptosComBitstamp,
        OBJECT_SECUSecuType3_StHsIndustry,
        OBJECT_SECUSecuType3_StHkIndustry,
        OBJECT_SECUSecuType3_StUsIndustry,
        OBJECT_SECUSecuType3_StHsRegion,
        OBJECT_SECUSecuType3_StHsConcept,
        OBJECT_SECUSecuType3_StHkConcept,
        OBJECT_SECUSecuType3_StHsRank,
    };
    static const char *extraTextFormatInfo = "\001<b\342\200\343\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUSecuType3)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUSecuType3_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUSecuType3_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUSecuType3_St3None:
    case OBJECT_SECUSecuType3_StOtherStock:
    case OBJECT_SECUSecuType3_StHsaStock:
    case OBJECT_SECUSecuType3_StHsbStock:
    case OBJECT_SECUSecuType3_StNtbStock:
    case OBJECT_SECUSecuType3_StHkStock:
    case OBJECT_SECUSecuType3_StUsStock:
    case OBJECT_SECUSecuType3_StCdr:
    case OBJECT_SECUSecuType3_StHdr:
    case OBJECT_SECUSecuType3_StAdrOld:
    case OBJECT_SECUSecuType3_StLowAdrOld:
    case OBJECT_SECUSecuType3_StSgStock:
    case OBJECT_SECUSecuType3_StHighAdrOther:
    case OBJECT_SECUSecuType3_StHighAdrHk:
    case OBJECT_SECUSecuType3_StLowAdrOther:
    case OBJECT_SECUSecuType3_StLowAdrHk:
    case OBJECT_SECUSecuType3_StNoAdrOther:
    case OBJECT_SECUSecuType3_StOtherFund:
    case OBJECT_SECUSecuType3_StEndFund:
    case OBJECT_SECUSecuType3_StEtf:
    case OBJECT_SECUSecuType3_StLof:
    case OBJECT_SECUSecuType3_StInInnoFund:
    case OBJECT_SECUSecuType3_StTrustFund:
    case OBJECT_SECUSecuType3_StFundUsEtn:
    case OBJECT_SECUSecuType3_StTrustFundReit:
    case OBJECT_SECUSecuType3_StOpenFund:
    case OBJECT_SECUSecuType3_StQdiiFund:
    case OBJECT_SECUSecuType3_StQfiiFund:
    case OBJECT_SECUSecuType3_StFof:
    case OBJECT_SECUSecuType3_StMoneyFund:
    case OBJECT_SECUSecuType3_StOutInnoFund:
    case OBJECT_SECUSecuType3_StOutStockFund:
    case OBJECT_SECUSecuType3_StOutBondFund:
    case OBJECT_SECUSecuType3_StOutMixFund:
    case OBJECT_SECUSecuType3_StOutIndexFund:
    case OBJECT_SECUSecuType3_StAsFut:
    case OBJECT_SECUSecuType3_StMetalFut:
    case OBJECT_SECUSecuType3_StChemFut:
    case OBJECT_SECUSecuType3_StForestFut:
    case OBJECT_SECUSecuType3_StMoneyFut:
    case OBJECT_SECUSecuType3_StRateFut:
    case OBJECT_SECUSecuType3_StIdxFut:
    case OBJECT_SECUSecuType3_StHkComBd:
    case OBJECT_SECUSecuType3_StHkEfn:
    case OBJECT_SECUSecuType3_StUsEtn:
    case OBJECT_SECUSecuType3_StUsObdBd:
    case OBJECT_SECUSecuType3_StHsGbfBd:
    case OBJECT_SECUSecuType3_StHsCbfBd:
    case OBJECT_SECUSecuType3_StHsCpfBd:
    case OBJECT_SECUSecuType3_StHsCbdBd:
    case OBJECT_SECUSecuType3_StHsObdBd:
    case OBJECT_SECUSecuType3_StHkOptStock:
    case OBJECT_SECUSecuType3_StWarrant:
    case OBJECT_SECUSecuType3_StCbbc:
    case OBJECT_SECUSecuType3_StInlineWarrant:
    case OBJECT_SECUSecuType3_StUsRights:
    case OBJECT_SECUSecuType3_StUsWarrant:
    case OBJECT_SECUSecuType3_StUsOptStock:
    case OBJECT_SECUSecuType3_StUsOptIndex:
    case OBJECT_SECUSecuType3_StSgWarrant:
    case OBJECT_SECUSecuType3_StSgDlc:
    case OBJECT_SECUSecuType3_StChinaIdx:
    case OBJECT_SECUSecuType3_StHkIdx:
    case OBJECT_SECUSecuType3_StUsIdx:
    case OBJECT_SECUSecuType3_StCryptosComBianance:
    case OBJECT_SECUSecuType3_StCryptosComHuobi:
    case OBJECT_SECUSecuType3_StCryptosComOkex:
    case OBJECT_SECUSecuType3_StCryptosComGate:
    case OBJECT_SECUSecuType3_StCryptosComBithumb:
    case OBJECT_SECUSecuType3_StCryptosComBitfinex:
    case OBJECT_SECUSecuType3_StCryptosComBittrex:
    case OBJECT_SECUSecuType3_StCryptosComBitstamp:
    case OBJECT_SECUSecuType3_StHsIndustry:
    case OBJECT_SECUSecuType3_StHkIndustry:
    case OBJECT_SECUSecuType3_StUsIndustry:
    case OBJECT_SECUSecuType3_StHsRegion:
    case OBJECT_SECUSecuType3_StHsConcept:
    case OBJECT_SECUSecuType3_StHkConcept:
    case OBJECT_SECUSecuType3_StHsRank:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUCurrencyType

GPBEnumDescriptor *OBJECT_SECUCurrencyType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Oth\000Cny\000Usd\000Hkd\000Cnh\000Sgd\000Jpy\000Gbp\000Eur\000Cad\000"
        "Aud\000Ats\000Bdt\000Bhd\000Bec\000Bel\000Bnd\000Buk\000Lkr\000Cyp\000"
        "Dkk\000Dem\000Nlg\000Fjd\000Fim\000Frf\000Inr\000Idr\000Itl\000Kwd\000"
        "Kes\000Lbp\000Mur\000Myr\000Nzd\000Ngn\000Nok\000Omr\000Pkr\000Php\000"
        "Pte\000Qar\000Sar\000Scr\000Sll\000Zar\000Krw\000Esp\000Sek\000Chf\000"
        "Thb\000Aed\000Iep\000Sdr\000Mop\000Brc\000Ecu\000Mxn\000Currency"
        "None\000";
    static const int32_t values[] = {
        OBJECT_SECUCurrencyType_Oth,
        OBJECT_SECUCurrencyType_Cny,
        OBJECT_SECUCurrencyType_Usd,
        OBJECT_SECUCurrencyType_Hkd,
        OBJECT_SECUCurrencyType_Cnh,
        OBJECT_SECUCurrencyType_Sgd,
        OBJECT_SECUCurrencyType_Jpy,
        OBJECT_SECUCurrencyType_Gbp,
        OBJECT_SECUCurrencyType_Eur,
        OBJECT_SECUCurrencyType_Cad,
        OBJECT_SECUCurrencyType_Aud,
        OBJECT_SECUCurrencyType_Ats,
        OBJECT_SECUCurrencyType_Bdt,
        OBJECT_SECUCurrencyType_Bhd,
        OBJECT_SECUCurrencyType_Bec,
        OBJECT_SECUCurrencyType_Bel,
        OBJECT_SECUCurrencyType_Bnd,
        OBJECT_SECUCurrencyType_Buk,
        OBJECT_SECUCurrencyType_Lkr,
        OBJECT_SECUCurrencyType_Cyp,
        OBJECT_SECUCurrencyType_Dkk,
        OBJECT_SECUCurrencyType_Dem,
        OBJECT_SECUCurrencyType_Nlg,
        OBJECT_SECUCurrencyType_Fjd,
        OBJECT_SECUCurrencyType_Fim,
        OBJECT_SECUCurrencyType_Frf,
        OBJECT_SECUCurrencyType_Inr,
        OBJECT_SECUCurrencyType_Idr,
        OBJECT_SECUCurrencyType_Itl,
        OBJECT_SECUCurrencyType_Kwd,
        OBJECT_SECUCurrencyType_Kes,
        OBJECT_SECUCurrencyType_Lbp,
        OBJECT_SECUCurrencyType_Mur,
        OBJECT_SECUCurrencyType_Myr,
        OBJECT_SECUCurrencyType_Nzd,
        OBJECT_SECUCurrencyType_Ngn,
        OBJECT_SECUCurrencyType_Nok,
        OBJECT_SECUCurrencyType_Omr,
        OBJECT_SECUCurrencyType_Pkr,
        OBJECT_SECUCurrencyType_Php,
        OBJECT_SECUCurrencyType_Pte,
        OBJECT_SECUCurrencyType_Qar,
        OBJECT_SECUCurrencyType_Sar,
        OBJECT_SECUCurrencyType_Scr,
        OBJECT_SECUCurrencyType_Sll,
        OBJECT_SECUCurrencyType_Zar,
        OBJECT_SECUCurrencyType_Krw,
        OBJECT_SECUCurrencyType_Esp,
        OBJECT_SECUCurrencyType_Sek,
        OBJECT_SECUCurrencyType_Chf,
        OBJECT_SECUCurrencyType_Thb,
        OBJECT_SECUCurrencyType_Aed,
        OBJECT_SECUCurrencyType_Iep,
        OBJECT_SECUCurrencyType_Sdr,
        OBJECT_SECUCurrencyType_Mop,
        OBJECT_SECUCurrencyType_Brc,
        OBJECT_SECUCurrencyType_Ecu,
        OBJECT_SECUCurrencyType_Mxn,
        OBJECT_SECUCurrencyType_CurrencyNone,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUCurrencyType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUCurrencyType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUCurrencyType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUCurrencyType_Oth:
    case OBJECT_SECUCurrencyType_Cny:
    case OBJECT_SECUCurrencyType_Usd:
    case OBJECT_SECUCurrencyType_Hkd:
    case OBJECT_SECUCurrencyType_Cnh:
    case OBJECT_SECUCurrencyType_Sgd:
    case OBJECT_SECUCurrencyType_Jpy:
    case OBJECT_SECUCurrencyType_Gbp:
    case OBJECT_SECUCurrencyType_Eur:
    case OBJECT_SECUCurrencyType_Cad:
    case OBJECT_SECUCurrencyType_Aud:
    case OBJECT_SECUCurrencyType_Ats:
    case OBJECT_SECUCurrencyType_Bdt:
    case OBJECT_SECUCurrencyType_Bhd:
    case OBJECT_SECUCurrencyType_Bec:
    case OBJECT_SECUCurrencyType_Bel:
    case OBJECT_SECUCurrencyType_Bnd:
    case OBJECT_SECUCurrencyType_Buk:
    case OBJECT_SECUCurrencyType_Lkr:
    case OBJECT_SECUCurrencyType_Cyp:
    case OBJECT_SECUCurrencyType_Dkk:
    case OBJECT_SECUCurrencyType_Dem:
    case OBJECT_SECUCurrencyType_Nlg:
    case OBJECT_SECUCurrencyType_Fjd:
    case OBJECT_SECUCurrencyType_Fim:
    case OBJECT_SECUCurrencyType_Frf:
    case OBJECT_SECUCurrencyType_Inr:
    case OBJECT_SECUCurrencyType_Idr:
    case OBJECT_SECUCurrencyType_Itl:
    case OBJECT_SECUCurrencyType_Kwd:
    case OBJECT_SECUCurrencyType_Kes:
    case OBJECT_SECUCurrencyType_Lbp:
    case OBJECT_SECUCurrencyType_Mur:
    case OBJECT_SECUCurrencyType_Myr:
    case OBJECT_SECUCurrencyType_Nzd:
    case OBJECT_SECUCurrencyType_Ngn:
    case OBJECT_SECUCurrencyType_Nok:
    case OBJECT_SECUCurrencyType_Omr:
    case OBJECT_SECUCurrencyType_Pkr:
    case OBJECT_SECUCurrencyType_Php:
    case OBJECT_SECUCurrencyType_Pte:
    case OBJECT_SECUCurrencyType_Qar:
    case OBJECT_SECUCurrencyType_Sar:
    case OBJECT_SECUCurrencyType_Scr:
    case OBJECT_SECUCurrencyType_Sll:
    case OBJECT_SECUCurrencyType_Zar:
    case OBJECT_SECUCurrencyType_Krw:
    case OBJECT_SECUCurrencyType_Esp:
    case OBJECT_SECUCurrencyType_Sek:
    case OBJECT_SECUCurrencyType_Chf:
    case OBJECT_SECUCurrencyType_Thb:
    case OBJECT_SECUCurrencyType_Aed:
    case OBJECT_SECUCurrencyType_Iep:
    case OBJECT_SECUCurrencyType_Sdr:
    case OBJECT_SECUCurrencyType_Mop:
    case OBJECT_SECUCurrencyType_Brc:
    case OBJECT_SECUCurrencyType_Ecu:
    case OBJECT_SECUCurrencyType_Mxn:
    case OBJECT_SECUCurrencyType_CurrencyNone:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUInfoLevel

GPBEnumDescriptor *OBJECT_SECUInfoLevel_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Basic\000Static\000Fin\000Full\000";
    static const int32_t values[] = {
        OBJECT_SECUInfoLevel_None,
        OBJECT_SECUInfoLevel_Basic,
        OBJECT_SECUInfoLevel_Static,
        OBJECT_SECUInfoLevel_Fin,
        OBJECT_SECUInfoLevel_Full,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUInfoLevel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUInfoLevel_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUInfoLevel_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUInfoLevel_None:
    case OBJECT_SECUInfoLevel_Basic:
    case OBJECT_SECUInfoLevel_Static:
    case OBJECT_SECUInfoLevel_Fin:
    case OBJECT_SECUInfoLevel_Full:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUListStatus

GPBEnumDescriptor *OBJECT_SECUListStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LsNone\000Listed\000Paused\000Delisted\000Canceled\000P"
        "reList\000SuspendList\000PreDelist\000";
    static const int32_t values[] = {
        OBJECT_SECUListStatus_LsNone,
        OBJECT_SECUListStatus_Listed,
        OBJECT_SECUListStatus_Paused,
        OBJECT_SECUListStatus_Delisted,
        OBJECT_SECUListStatus_Canceled,
        OBJECT_SECUListStatus_PreList,
        OBJECT_SECUListStatus_SuspendList,
        OBJECT_SECUListStatus_PreDelist,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUListStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUListStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUListStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUListStatus_LsNone:
    case OBJECT_SECUListStatus_Listed:
    case OBJECT_SECUListStatus_Paused:
    case OBJECT_SECUListStatus_Delisted:
    case OBJECT_SECUListStatus_Canceled:
    case OBJECT_SECUListStatus_PreList:
    case OBJECT_SECUListStatus_SuspendList:
    case OBJECT_SECUListStatus_PreDelist:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUCallPutType

GPBEnumDescriptor *OBJECT_SECUCallPutType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "All\000Call\000Put\000Other\000";
    static const int32_t values[] = {
        OBJECT_SECUCallPutType_All,
        OBJECT_SECUCallPutType_Call,
        OBJECT_SECUCallPutType_Put,
        OBJECT_SECUCallPutType_Other,
    };
    static const char *extraTextFormatInfo = "\004\000\003\000\001\004\000\002\003\000\003\005\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUCallPutType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUCallPutType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUCallPutType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUCallPutType_All:
    case OBJECT_SECUCallPutType_Call:
    case OBJECT_SECUCallPutType_Put:
    case OBJECT_SECUCallPutType_Other:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUReportPeriodType

GPBEnumDescriptor *OBJECT_SECUReportPeriodType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "RptNone\000RptFirst\000RptSecond\000RptThird\000RptF"
        "ourth\000";
    static const int32_t values[] = {
        OBJECT_SECUReportPeriodType_RptNone,
        OBJECT_SECUReportPeriodType_RptFirst,
        OBJECT_SECUReportPeriodType_RptSecond,
        OBJECT_SECUReportPeriodType_RptThird,
        OBJECT_SECUReportPeriodType_RptFourth,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUReportPeriodType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUReportPeriodType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUReportPeriodType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUReportPeriodType_RptNone:
    case OBJECT_SECUReportPeriodType_RptFirst:
    case OBJECT_SECUReportPeriodType_RptSecond:
    case OBJECT_SECUReportPeriodType_RptThird:
    case OBJECT_SECUReportPeriodType_RptFourth:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUSpreadTableCode

GPBEnumDescriptor *OBJECT_SECUSpreadTableCode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StcNone\000StcPartA\000StcPartB\000StcPartC\000StcPa"
        "rtD\000StcPartE\000StcPartF\000";
    static const int32_t values[] = {
        OBJECT_SECUSpreadTableCode_StcNone,
        OBJECT_SECUSpreadTableCode_StcPartA,
        OBJECT_SECUSpreadTableCode_StcPartB,
        OBJECT_SECUSpreadTableCode_StcPartC,
        OBJECT_SECUSpreadTableCode_StcPartD,
        OBJECT_SECUSpreadTableCode_StcPartE,
        OBJECT_SECUSpreadTableCode_StcPartF,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUSpreadTableCode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUSpreadTableCode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUSpreadTableCode_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUSpreadTableCode_StcNone:
    case OBJECT_SECUSpreadTableCode_StcPartA:
    case OBJECT_SECUSpreadTableCode_StcPartB:
    case OBJECT_SECUSpreadTableCode_StcPartC:
    case OBJECT_SECUSpreadTableCode_StcPartD:
    case OBJECT_SECUSpreadTableCode_StcPartE:
    case OBJECT_SECUSpreadTableCode_StcPartF:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUSecuTypeTips

GPBEnumDescriptor *OBJECT_SECUSecuTypeTips_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SttNone\000SttCdr\000SttIe\000";
    static const int32_t values[] = {
        OBJECT_SECUSecuTypeTips_SttNone,
        OBJECT_SECUSecuTypeTips_SttCdr,
        OBJECT_SECUSecuTypeTips_SttIe,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUSecuTypeTips)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUSecuTypeTips_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUSecuTypeTips_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUSecuTypeTips_SttNone:
    case OBJECT_SECUSecuTypeTips_SttCdr:
    case OBJECT_SECUSecuTypeTips_SttIe:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUWarrantType

GPBEnumDescriptor *OBJECT_SECUWarrantType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WarrantNone\000WarrantStd\000WarrantSup\000Warran"
        "tOth\000";
    static const int32_t values[] = {
        OBJECT_SECUWarrantType_WarrantNone,
        OBJECT_SECUWarrantType_WarrantStd,
        OBJECT_SECUWarrantType_WarrantSup,
        OBJECT_SECUWarrantType_WarrantOth,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUWarrantType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUWarrantType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUWarrantType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUWarrantType_WarrantNone:
    case OBJECT_SECUWarrantType_WarrantStd:
    case OBJECT_SECUWarrantType_WarrantSup:
    case OBJECT_SECUWarrantType_WarrantOth:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUDerivativeType

GPBEnumDescriptor *OBJECT_SECUDerivativeType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DtNone\000DtWarrants\000DtCbbc\000DtInline\000DtAll\000";
    static const int32_t values[] = {
        OBJECT_SECUDerivativeType_DtNone,
        OBJECT_SECUDerivativeType_DtWarrants,
        OBJECT_SECUDerivativeType_DtCbbc,
        OBJECT_SECUDerivativeType_DtInline,
        OBJECT_SECUDerivativeType_DtAll,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUDerivativeType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUDerivativeType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUDerivativeType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUDerivativeType_DtNone:
    case OBJECT_SECUDerivativeType_DtWarrants:
    case OBJECT_SECUDerivativeType_DtCbbc:
    case OBJECT_SECUDerivativeType_DtInline:
    case OBJECT_SECUDerivativeType_DtAll:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUWarrantCharacter

GPBEnumDescriptor *OBJECT_SECUWarrantCharacter_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WarrantChNone\000WarrantChSub\000WarrantChPut\000"
        "WarrantChBull\000WarrantChBear\000WarrantChOth"
        "\000WarrantChInline\000";
    static const int32_t values[] = {
        OBJECT_SECUWarrantCharacter_WarrantChNone,
        OBJECT_SECUWarrantCharacter_WarrantChSub,
        OBJECT_SECUWarrantCharacter_WarrantChPut,
        OBJECT_SECUWarrantCharacter_WarrantChBull,
        OBJECT_SECUWarrantCharacter_WarrantChBear,
        OBJECT_SECUWarrantCharacter_WarrantChOth,
        OBJECT_SECUWarrantCharacter_WarrantChInline,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUWarrantCharacter)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUWarrantCharacter_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUWarrantCharacter_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUWarrantCharacter_WarrantChNone:
    case OBJECT_SECUWarrantCharacter_WarrantChSub:
    case OBJECT_SECUWarrantCharacter_WarrantChPut:
    case OBJECT_SECUWarrantCharacter_WarrantChBull:
    case OBJECT_SECUWarrantCharacter_WarrantChBear:
    case OBJECT_SECUWarrantCharacter_WarrantChOth:
    case OBJECT_SECUWarrantCharacter_WarrantChInline:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUWarrantIssuerId

GPBEnumDescriptor *OBJECT_SECUWarrantIssuerId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "IssuerNone\000IssuerFaxing\000IssuerFaba\000Issue"
        "rRuixin\000IssuerHuaqi\000IssuerDongya\000IssuerG"
        "aosheng\000IssuerHuifeng\000IssuerMotong\000Issue"
        "rMaiyin\000IssuerRuiyin\000IssuerZhongyin\000Issu"
        "erHaitong\000IssuerRuitong\000IssuerMoli\000Issue"
        "rGuojun\000IssuerAll\000";
    static const int32_t values[] = {
        OBJECT_SECUWarrantIssuerId_IssuerNone,
        OBJECT_SECUWarrantIssuerId_IssuerFaxing,
        OBJECT_SECUWarrantIssuerId_IssuerFaba,
        OBJECT_SECUWarrantIssuerId_IssuerRuixin,
        OBJECT_SECUWarrantIssuerId_IssuerHuaqi,
        OBJECT_SECUWarrantIssuerId_IssuerDongya,
        OBJECT_SECUWarrantIssuerId_IssuerGaosheng,
        OBJECT_SECUWarrantIssuerId_IssuerHuifeng,
        OBJECT_SECUWarrantIssuerId_IssuerMotong,
        OBJECT_SECUWarrantIssuerId_IssuerMaiyin,
        OBJECT_SECUWarrantIssuerId_IssuerRuiyin,
        OBJECT_SECUWarrantIssuerId_IssuerZhongyin,
        OBJECT_SECUWarrantIssuerId_IssuerHaitong,
        OBJECT_SECUWarrantIssuerId_IssuerRuitong,
        OBJECT_SECUWarrantIssuerId_IssuerMoli,
        OBJECT_SECUWarrantIssuerId_IssuerGuojun,
        OBJECT_SECUWarrantIssuerId_IssuerAll,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUWarrantIssuerId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUWarrantIssuerId_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUWarrantIssuerId_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUWarrantIssuerId_IssuerNone:
    case OBJECT_SECUWarrantIssuerId_IssuerFaxing:
    case OBJECT_SECUWarrantIssuerId_IssuerFaba:
    case OBJECT_SECUWarrantIssuerId_IssuerRuixin:
    case OBJECT_SECUWarrantIssuerId_IssuerHuaqi:
    case OBJECT_SECUWarrantIssuerId_IssuerDongya:
    case OBJECT_SECUWarrantIssuerId_IssuerGaosheng:
    case OBJECT_SECUWarrantIssuerId_IssuerHuifeng:
    case OBJECT_SECUWarrantIssuerId_IssuerMotong:
    case OBJECT_SECUWarrantIssuerId_IssuerMaiyin:
    case OBJECT_SECUWarrantIssuerId_IssuerRuiyin:
    case OBJECT_SECUWarrantIssuerId_IssuerZhongyin:
    case OBJECT_SECUWarrantIssuerId_IssuerHaitong:
    case OBJECT_SECUWarrantIssuerId_IssuerRuitong:
    case OBJECT_SECUWarrantIssuerId_IssuerMoli:
    case OBJECT_SECUWarrantIssuerId_IssuerGuojun:
    case OBJECT_SECUWarrantIssuerId_IssuerAll:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUExerciseStyle

GPBEnumDescriptor *OBJECT_SECUExerciseStyle_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ExerNone\000ExerEur\000ExerUsa\000ExerBmd\000ExerOth"
        "\000";
    static const int32_t values[] = {
        OBJECT_SECUExerciseStyle_ExerNone,
        OBJECT_SECUExerciseStyle_ExerEur,
        OBJECT_SECUExerciseStyle_ExerUsa,
        OBJECT_SECUExerciseStyle_ExerBmd,
        OBJECT_SECUExerciseStyle_ExerOth,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUExerciseStyle)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUExerciseStyle_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUExerciseStyle_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUExerciseStyle_ExerNone:
    case OBJECT_SECUExerciseStyle_ExerEur:
    case OBJECT_SECUExerciseStyle_ExerUsa:
    case OBJECT_SECUExerciseStyle_ExerBmd:
    case OBJECT_SECUExerciseStyle_ExerOth:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUSettleMode

GPBEnumDescriptor *OBJECT_SECUSettleMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SettleNone\000SettleCash\000SettleStock\000Settle"
        "Oth\000";
    static const int32_t values[] = {
        OBJECT_SECUSettleMode_SettleNone,
        OBJECT_SECUSettleMode_SettleCash,
        OBJECT_SECUSettleMode_SettleStock,
        OBJECT_SECUSettleMode_SettleOth,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUSettleMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUSettleMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUSettleMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUSettleMode_SettleNone:
    case OBJECT_SECUSettleMode_SettleCash:
    case OBJECT_SECUSettleMode_SettleStock:
    case OBJECT_SECUSettleMode_SettleOth:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUGreyType

GPBEnumDescriptor *OBJECT_SECUGreyType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "GreyNone\000GreyAllday\000GreyMorning\000";
    static const int32_t values[] = {
        OBJECT_SECUGreyType_GreyNone,
        OBJECT_SECUGreyType_GreyAllday,
        OBJECT_SECUGreyType_GreyMorning,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUGreyType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUGreyType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUGreyType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUGreyType_GreyNone:
    case OBJECT_SECUGreyType_GreyAllday:
    case OBJECT_SECUGreyType_GreyMorning:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUFundAssetType

GPBEnumDescriptor *OBJECT_SECUFundAssetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FundAssetNone\000FundAssetStock\000FundAssetCo"
        "mmodity\000FundAssetCurrency\000FundAssetFutur"
        "e\000FundAssetCds\000FundAssetMultiAsset\000FundA"
        "ssetFixed\000";
    static const int32_t values[] = {
        OBJECT_SECUFundAssetType_FundAssetNone,
        OBJECT_SECUFundAssetType_FundAssetStock,
        OBJECT_SECUFundAssetType_FundAssetCommodity,
        OBJECT_SECUFundAssetType_FundAssetCurrency,
        OBJECT_SECUFundAssetType_FundAssetFuture,
        OBJECT_SECUFundAssetType_FundAssetCds,
        OBJECT_SECUFundAssetType_FundAssetMultiAsset,
        OBJECT_SECUFundAssetType_FundAssetFixed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUFundAssetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUFundAssetType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUFundAssetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUFundAssetType_FundAssetNone:
    case OBJECT_SECUFundAssetType_FundAssetStock:
    case OBJECT_SECUFundAssetType_FundAssetCommodity:
    case OBJECT_SECUFundAssetType_FundAssetCurrency:
    case OBJECT_SECUFundAssetType_FundAssetFuture:
    case OBJECT_SECUFundAssetType_FundAssetCds:
    case OBJECT_SECUFundAssetType_FundAssetMultiAsset:
    case OBJECT_SECUFundAssetType_FundAssetFixed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUStockFlagType

GPBEnumDescriptor *OBJECT_SECUStockFlagType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "StockFlagNone\000StockFlagIsreg\000StockFlagNo"
        "profit\000StockFlagWtvr\000StockFlagIsvie\000";
    static const int32_t values[] = {
        OBJECT_SECUStockFlagType_StockFlagNone,
        OBJECT_SECUStockFlagType_StockFlagIsreg,
        OBJECT_SECUStockFlagType_StockFlagNoprofit,
        OBJECT_SECUStockFlagType_StockFlagWtvr,
        OBJECT_SECUStockFlagType_StockFlagIsvie,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUStockFlagType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUStockFlagType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUStockFlagType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUStockFlagType_StockFlagNone:
    case OBJECT_SECUStockFlagType_StockFlagIsreg:
    case OBJECT_SECUStockFlagType_StockFlagNoprofit:
    case OBJECT_SECUStockFlagType_StockFlagWtvr:
    case OBJECT_SECUStockFlagType_StockFlagIsvie:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUHKSecuFlagType

GPBEnumDescriptor *OBJECT_SECUHKSecuFlagType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "HkSecuFlagNone\000HkSecuFlagVcm\000HkSecuFlagC"
        "as\000HkSecuFlagPos\000HkSecuFlagCcass\000HkSecuF"
        "lagDummy\000";
    static const int32_t values[] = {
        OBJECT_SECUHKSecuFlagType_HkSecuFlagNone,
        OBJECT_SECUHKSecuFlagType_HkSecuFlagVcm,
        OBJECT_SECUHKSecuFlagType_HkSecuFlagCas,
        OBJECT_SECUHKSecuFlagType_HkSecuFlagPos,
        OBJECT_SECUHKSecuFlagType_HkSecuFlagCcass,
        OBJECT_SECUHKSecuFlagType_HkSecuFlagDummy,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUHKSecuFlagType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUHKSecuFlagType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUHKSecuFlagType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUHKSecuFlagType_HkSecuFlagNone:
    case OBJECT_SECUHKSecuFlagType_HkSecuFlagVcm:
    case OBJECT_SECUHKSecuFlagType_HkSecuFlagCas:
    case OBJECT_SECUHKSecuFlagType_HkSecuFlagPos:
    case OBJECT_SECUHKSecuFlagType_HkSecuFlagCcass:
    case OBJECT_SECUHKSecuFlagType_HkSecuFlagDummy:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_SECUOptionType

GPBEnumDescriptor *OBJECT_SECUOptionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "OtUnknown\000OtSecurity\000OtIndex\000";
    static const int32_t values[] = {
        OBJECT_SECUOptionType_OtUnknown,
        OBJECT_SECUOptionType_OtSecurity,
        OBJECT_SECUOptionType_OtIndex,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_SECUOptionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_SECUOptionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_SECUOptionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_SECUOptionType_OtUnknown:
    case OBJECT_SECUOptionType_OtSecurity:
    case OBJECT_SECUOptionType_OtIndex:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_SECUFullID

@implementation OBJECT_SECUFullID

@dynamic exchange;
@dynamic market;
@dynamic code;

typedef struct OBJECT_SECUFullID__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange exchange;
  OBJECT_MARKETMarketId market;
  NSString *code;
} OBJECT_SECUFullID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = OBJECT_SECUFullID_FieldNumber_Exchange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUFullID__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "market",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = OBJECT_SECUFullID_FieldNumber_Market,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUFullID__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFullID_FieldNumber_Code,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUFullID__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUFullID class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUFullID__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUFullID_Exchange_RawValue(OBJECT_SECUFullID *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUFullID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFullID_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUFullID_Exchange_RawValue(OBJECT_SECUFullID *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUFullID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFullID_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUFullID_Market_RawValue(OBJECT_SECUFullID *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUFullID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFullID_FieldNumber_Market];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUFullID_Market_RawValue(OBJECT_SECUFullID *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUFullID descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFullID_FieldNumber_Market];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUCorrectSecuName

@implementation OBJECT_SECUCorrectSecuName

@dynamic hasId_p, id_p;
@dynamic secuNamesArray, secuNamesArray_Count;

typedef struct OBJECT_SECUCorrectSecuName__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  NSMutableArray *secuNamesArray;
} OBJECT_SECUCorrectSecuName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCorrectSecuName_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUCorrectSecuName__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secuNamesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecurityName),
        .number = OBJECT_SECUCorrectSecuName_FieldNumber_SecuNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCorrectSecuName__storage_, secuNamesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUCorrectSecuName class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUCorrectSecuName__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUBriefInfo

@implementation OBJECT_SECUBriefInfo

@dynamic name;
@dynamic secuNamesArray, secuNamesArray_Count;

typedef struct OBJECT_SECUBriefInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *secuNamesArray;
} OBJECT_SECUBriefInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUBriefInfo_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUBriefInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secuNamesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecurityName),
        .number = OBJECT_SECUBriefInfo_FieldNumber_SecuNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUBriefInfo__storage_, secuNamesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUBriefInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUBriefInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\000secuNames\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUSecurityName

@implementation OBJECT_SECUSecurityName

@dynamic lang;
@dynamic name;

typedef struct OBJECT_SECUSecurityName__storage_ {
  uint32_t _has_storage_[1];
  COMMONLangType lang;
  NSString *name;
} OBJECT_SECUSecurityName__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "lang",
        .dataTypeSpecific.enumDescFunc = COMMONLangType_EnumDescriptor,
        .number = OBJECT_SECUSecurityName_FieldNumber_Lang,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecurityName__storage_, lang),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUSecurityName_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecurityName__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUSecurityName class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUSecurityName__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUSecurityName_Lang_RawValue(OBJECT_SECUSecurityName *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUSecurityName descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUSecurityName_FieldNumber_Lang];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUSecurityName_Lang_RawValue(OBJECT_SECUSecurityName *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUSecurityName descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUSecurityName_FieldNumber_Lang];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUInfo

@implementation OBJECT_SECUInfo

@dynamic name;
@dynamic exchange;
@dynamic type1;
@dynamic type2;
@dynamic type3;
@dynamic listStatus;
@dynamic secuNamesArray, secuNamesArray_Count;
@dynamic scmType;
@dynamic vcmFlag;
@dynamic casFlag;
@dynamic shortSellFlag;
@dynamic greyFlag;
@dynamic stc;
@dynamic listSector;
@dynamic margin;
@dynamic marginRatio;
@dynamic dailyMargin;
@dynamic dailyMarginGearing;
@dynamic aStockFlag;
@dynamic hkSecuFlag;
@dynamic hasStock, stock;
@dynamic hasFund, fund;
@dynamic hasBond, bond;
@dynamic hasWarrant, warrant;
@dynamic hasIndex, index;
@dynamic hasSector, sector;
@dynamic hasOption, option;
@dynamic spreadTab;

typedef struct OBJECT_SECUInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange exchange;
  OBJECT_SECUSecuType1 type1;
  OBJECT_SECUSecuType2 type2;
  OBJECT_SECUSecuType3 type3;
  OBJECT_SECUListStatus listStatus;
  uint32_t scmType;
  OBJECT_SECUGreyType greyFlag;
  OBJECT_SECUSpreadTableCode stc;
  OBJECT_MARKETListedSector listSector;
  int32_t margin;
  int32_t aStockFlag;
  int32_t hkSecuFlag;
  NSString *name;
  NSMutableArray *secuNamesArray;
  OBJECT_SECUStockInfo *stock;
  OBJECT_SECUFundInfo *fund;
  OBJECT_SECUBondInfo *bond;
  OBJECT_SECUWarrantInfo *warrant;
  OBJECT_SECUIndexInfo *index;
  OBJECT_SECUSectorInfo *sector;
  OBJECT_SECUOptionInfo *option;
  NSString *spreadTab;
  double marginRatio;
  double dailyMarginGearing;
} OBJECT_SECUInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_Exchange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type1",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType1_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_Type1,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, type1),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type2",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType2_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_Type2,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, type2),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "type3",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSecuType3_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_Type3,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, type3),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "listStatus",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUListStatus_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_ListStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, listStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "secuNamesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecurityName),
        .number = OBJECT_SECUInfo_FieldNumber_SecuNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, secuNamesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "scmType",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_ScmType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, scmType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "vcmFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_VcmFlag,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "casFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_CasFlag,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "shortSellFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_ShortSellFlag,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "greyFlag",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUGreyType_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_GreyFlag,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, greyFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "stc",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUSpreadTableCode_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_Stc,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, stc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "listSector",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETListedSector_EnumDescriptor,
        .number = OBJECT_SECUInfo_FieldNumber_ListSector,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, listSector),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "margin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_Margin,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, margin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "marginRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_MarginRatio,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, marginRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "dailyMargin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_DailyMargin,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dailyMarginGearing",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_DailyMarginGearing,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, dailyMarginGearing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "aStockFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_AStockFlag,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, aStockFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "hkSecuFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_HkSecuFlag,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, hkSecuFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stock",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUStockInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Stock,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, stock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fund",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFundInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Fund,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, fund),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bond",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUBondInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Bond,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, bond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "warrant",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUWarrantInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Warrant,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, warrant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "index",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUIndexInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Index,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sector",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSectorInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Sector,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, sector),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "option",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUOptionInfo),
        .number = OBJECT_SECUInfo_FieldNumber_Option,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, option),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "spreadTab",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUInfo_FieldNumber_SpreadTab,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(OBJECT_SECUInfo__storage_, spreadTab),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\006\n\000\007\000secuNames\000\010\007\000\t\007\000\n\007\000\013\r\000\014\010\000\016\n\000\020\013\000\021\013\000"
        "\022\022\000\023\n\000\024\n\000\034\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUInfo_Exchange_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_Exchange_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_Type1_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Type1];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_Type1_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Type1];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_Type2_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Type2];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_Type2_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Type2];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_Type3_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Type3];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_Type3_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Type3];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_ListStatus_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_ListStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_ListStatus_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_ListStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_GreyFlag_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_GreyFlag];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_GreyFlag_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_GreyFlag];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_Stc_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Stc];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_Stc_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_Stc];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUInfo_ListSector_RawValue(OBJECT_SECUInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_ListSector];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUInfo_ListSector_RawValue(OBJECT_SECUInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUInfo_FieldNumber_ListSector];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUStockInfo

@implementation OBJECT_SECUStockInfo

@dynamic hasAhId, ahId;
@dynamic hasAhInfo, ahInfo;
@dynamic currency;
@dynamic issuedShare;
@dynamic floatShare;
@dynamic eps;
@dynamic epsTtm;
@dynamic bvps;
@dynamic dividend;
@dynamic netAsset;
@dynamic netIncomeLastYear;
@dynamic netIncomeLtm;
@dynamic totalDividend;
@dynamic totalRevenues;
@dynamic trdUnit;
@dynamic listDate;
@dynamic issuePrice;
@dynamic firstDayClosePrice;
@dynamic hasIndustrySectorId, industrySectorId;
@dynamic hasIndustryInfo, industryInfo;
@dynamic hasAdrId, adrId;
@dynamic hasAdrInfo, adrInfo;
@dynamic hasRelateId, relateId;
@dynamic hasRelateInfo, relateInfo;

typedef struct OBJECT_SECUStockInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCurrencyType currency;
  uint32_t trdUnit;
  OBJECT_SECUFullID *ahId;
  OBJECT_SECUInfo *ahInfo;
  OBJECT_SECUFullID *industrySectorId;
  OBJECT_SECUBriefInfo *industryInfo;
  OBJECT_SECUFullID *adrId;
  OBJECT_SECUInfo *adrInfo;
  OBJECT_SECUFullID *relateId;
  OBJECT_SECUInfo *relateInfo;
  uint64_t issuedShare;
  uint64_t floatShare;
  int64_t eps;
  int64_t epsTtm;
  int64_t bvps;
  int64_t dividend;
  int64_t netAsset;
  int64_t netIncomeLastYear;
  int64_t netIncomeLtm;
  int64_t totalDividend;
  int64_t totalRevenues;
  int64_t listDate;
  int64_t issuePrice;
  int64_t firstDayClosePrice;
} OBJECT_SECUStockInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ahId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUStockInfo_FieldNumber_AhId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, ahId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ahInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUStockInfo_FieldNumber_AhInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, ahInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currency",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUStockInfo_FieldNumber_Currency,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, currency),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "issuedShare",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_IssuedShare,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, issuedShare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "floatShare",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_FloatShare,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, floatShare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "eps",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_Eps,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, eps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "epsTtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_EpsTtm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, epsTtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bvps",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_Bvps,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, bvps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dividend",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_Dividend,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, dividend),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netAsset",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_NetAsset,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, netAsset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netIncomeLastYear",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_NetIncomeLastYear,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, netIncomeLastYear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netIncomeLtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_NetIncomeLtm,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, netIncomeLtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalDividend",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_TotalDividend,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, totalDividend),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalRevenues",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_TotalRevenues,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, totalRevenues),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "trdUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_TrdUnit,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, trdUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "listDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_ListDate,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, listDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "issuePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_IssuePrice,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, issuePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "firstDayClosePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUStockInfo_FieldNumber_FirstDayClosePrice,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, firstDayClosePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "industrySectorId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUStockInfo_FieldNumber_IndustrySectorId,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, industrySectorId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "industryInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUBriefInfo),
        .number = OBJECT_SECUStockInfo_FieldNumber_IndustryInfo,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, industryInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adrId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUStockInfo_FieldNumber_AdrId,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, adrId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adrInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUStockInfo_FieldNumber_AdrInfo,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, adrInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relateId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUStockInfo_FieldNumber_RelateId,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, relateId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "relateInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUStockInfo_FieldNumber_RelateInfo,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(OBJECT_SECUStockInfo__storage_, relateInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUStockInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUStockInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\024\001\004\000\002\006\000\004\013\000\005\n\000\007\004b\000\n\010\000\013\021\000\014\014\000\r\r\000\016\r\000\020\007\000\021\010\000\022\n"
        "\000\023\022\000\024\020\000\025\014\000\036\005\000\037\007\000 \010\000!\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUStockInfo_Currency_RawValue(OBJECT_SECUStockInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUStockInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUStockInfo_FieldNumber_Currency];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUStockInfo_Currency_RawValue(OBJECT_SECUStockInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUStockInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUStockInfo_FieldNumber_Currency];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUFundInfo

@implementation OBJECT_SECUFundInfo

@dynamic currency;
@dynamic navPs;
@dynamic trdUnit;
@dynamic issuedShare;
@dynamic floatShare;
@dynamic eps;
@dynamic epsTtm;
@dynamic bvps;
@dynamic dividend;
@dynamic netAsset;
@dynamic netIncomeLastYear;
@dynamic netIncomeLtm;
@dynamic totalDividend;
@dynamic issuePrice;
@dynamic listDate;
@dynamic totalAsset;
@dynamic assetType;
@dynamic lever;
@dynamic hasIndustrySectorId, industrySectorId;
@dynamic hasIndustryInfo, industryInfo;

typedef struct OBJECT_SECUFundInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCurrencyType currency;
  uint32_t trdUnit;
  OBJECT_SECUFundAssetType assetType;
  int32_t lever;
  OBJECT_SECUFullID *industrySectorId;
  OBJECT_SECUBriefInfo *industryInfo;
  int64_t navPs;
  uint64_t issuedShare;
  uint64_t floatShare;
  int64_t eps;
  int64_t epsTtm;
  int64_t bvps;
  int64_t dividend;
  int64_t netAsset;
  int64_t netIncomeLastYear;
  int64_t netIncomeLtm;
  int64_t totalDividend;
  int64_t issuePrice;
  int64_t listDate;
  int64_t totalAsset;
} OBJECT_SECUFundInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUFundInfo_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, currency),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "navPs",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_NavPs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, navPs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "trdUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_TrdUnit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, trdUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "issuedShare",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_IssuedShare,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, issuedShare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "floatShare",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_FloatShare,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, floatShare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "eps",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_Eps,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, eps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "epsTtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_EpsTtm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, epsTtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bvps",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_Bvps,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, bvps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dividend",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_Dividend,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, dividend),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netAsset",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_NetAsset,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, netAsset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netIncomeLastYear",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_NetIncomeLastYear,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, netIncomeLastYear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netIncomeLtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_NetIncomeLtm,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, netIncomeLtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalDividend",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_TotalDividend,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, totalDividend),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "issuePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_IssuePrice,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, issuePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "listDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_ListDate,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, listDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalAsset",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_TotalAsset,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, totalAsset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "assetType",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUFundAssetType_EnumDescriptor,
        .number = OBJECT_SECUFundInfo_FieldNumber_AssetType,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, assetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "lever",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUFundInfo_FieldNumber_Lever,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, lever),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "industrySectorId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUFundInfo_FieldNumber_IndustrySectorId,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, industrySectorId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "industryInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUBriefInfo),
        .number = OBJECT_SECUFundInfo_FieldNumber_IndustryInfo,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(OBJECT_SECUFundInfo__storage_, industryInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUFundInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUFundInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\017\002\005\000\003\007\000\004\013\000\005\n\000\007\004b\000\n\010\000\013\021\000\014\014\000\r\r\000\016\n\000\017\010\000\020\n\000\021\t"
        "\000\023\020\000\024\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUFundInfo_Currency_RawValue(OBJECT_SECUFundInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUFundInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFundInfo_FieldNumber_Currency];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUFundInfo_Currency_RawValue(OBJECT_SECUFundInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUFundInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFundInfo_FieldNumber_Currency];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUFundInfo_AssetType_RawValue(OBJECT_SECUFundInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUFundInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFundInfo_FieldNumber_AssetType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUFundInfo_AssetType_RawValue(OBJECT_SECUFundInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUFundInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUFundInfo_FieldNumber_AssetType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUWarrantInfo

@implementation OBJECT_SECUWarrantInfo

@dynamic currency;
@dynamic callPutFlag;
@dynamic conversionRatio;
@dynamic trdUnit;
@dynamic strikePrice;
@dynamic maturityDate;
@dynamic lastTrdDate;
@dynamic outstandingQty;
@dynamic outstandingPct;
@dynamic callPrice;
@dynamic hasUnderlingId, underlingId;
@dynamic hasUnderlingInfo, underlingInfo;
@dynamic strikeUpper;
@dynamic strikeLower;
@dynamic issueShares;

typedef struct OBJECT_SECUWarrantInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCurrencyType currency;
  OBJECT_SECUCallPutType callPutFlag;
  uint32_t trdUnit;
  int32_t outstandingPct;
  OBJECT_SECUFullID *underlingId;
  OBJECT_SECUInfo *underlingInfo;
  uint64_t conversionRatio;
  int64_t strikePrice;
  uint64_t maturityDate;
  uint64_t lastTrdDate;
  uint64_t outstandingQty;
  int64_t callPrice;
  int64_t strikeUpper;
  int64_t strikeLower;
  int64_t issueShares;
} OBJECT_SECUWarrantInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, currency),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "callPutFlag",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCallPutType_EnumDescriptor,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_CallPutFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, callPutFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "conversionRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_ConversionRatio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, conversionRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "trdUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_TrdUnit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, trdUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "strikePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_StrikePrice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, strikePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "maturityDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_MaturityDate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, maturityDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lastTrdDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_LastTrdDate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, lastTrdDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "outstandingQty",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_OutstandingQty,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, outstandingQty),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "outstandingPct",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_OutstandingPct,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, outstandingPct),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "callPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_CallPrice,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, callPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "underlingId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUWarrantInfo_FieldNumber_UnderlingId,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, underlingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underlingInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUWarrantInfo_FieldNumber_UnderlingInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, underlingInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "strikeUpper",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_StrikeUpper,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, strikeUpper),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "strikeLower",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_StrikeLower,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, strikeLower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "issueShares",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUWarrantInfo_FieldNumber_IssueShares,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_SECUWarrantInfo__storage_, issueShares),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUWarrantInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUWarrantInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\002\013\000\003\017\000\004\007\000\005\013\000\006\014\000\010\013\000\t\016\000\n\016\000\013\t\000\014\nA\000\r\r\000\017\013\000\020\013"
        "\000\021\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUWarrantInfo_Currency_RawValue(OBJECT_SECUWarrantInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUWarrantInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUWarrantInfo_FieldNumber_Currency];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUWarrantInfo_Currency_RawValue(OBJECT_SECUWarrantInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUWarrantInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUWarrantInfo_FieldNumber_Currency];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUWarrantInfo_CallPutFlag_RawValue(OBJECT_SECUWarrantInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUWarrantInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUWarrantInfo_FieldNumber_CallPutFlag];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUWarrantInfo_CallPutFlag_RawValue(OBJECT_SECUWarrantInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUWarrantInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUWarrantInfo_FieldNumber_CallPutFlag];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUBondInfo

@implementation OBJECT_SECUBondInfo

@dynamic currency;
@dynamic trdUnit;
@dynamic totalAsset;

typedef struct OBJECT_SECUBondInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCurrencyType currency;
  uint32_t trdUnit;
  int64_t totalAsset;
} OBJECT_SECUBondInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUBondInfo_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUBondInfo__storage_, currency),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trdUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUBondInfo_FieldNumber_TrdUnit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUBondInfo__storage_, trdUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "totalAsset",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUBondInfo_FieldNumber_TotalAsset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUBondInfo__storage_, totalAsset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUBondInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUBondInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\007\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUBondInfo_Currency_RawValue(OBJECT_SECUBondInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUBondInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUBondInfo_FieldNumber_Currency];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUBondInfo_Currency_RawValue(OBJECT_SECUBondInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUBondInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUBondInfo_FieldNumber_Currency];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUSectorInfo

@implementation OBJECT_SECUSectorInfo

@dynamic issuedShare;
@dynamic floatShare;

typedef struct OBJECT_SECUSectorInfo__storage_ {
  uint32_t _has_storage_[1];
  uint64_t issuedShare;
  uint64_t floatShare;
} OBJECT_SECUSectorInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "issuedShare",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUSectorInfo_FieldNumber_IssuedShare,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUSectorInfo__storage_, issuedShare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "floatShare",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUSectorInfo_FieldNumber_FloatShare,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUSectorInfo__storage_, floatShare),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUSectorInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUSectorInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUIndexInfo

@implementation OBJECT_SECUIndexInfo


typedef struct OBJECT_SECUIndexInfo__storage_ {
  uint32_t _has_storage_[1];
} OBJECT_SECUIndexInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUIndexInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(OBJECT_SECUIndexInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUOptionInfo

@implementation OBJECT_SECUOptionInfo

@dynamic currency;
@dynamic callPutFlag;
@dynamic contractSize;
@dynamic strikePrice;
@dynamic expDate;
@dynamic hasUnderlingId, underlingId;
@dynamic hasUnderlingInfo, underlingInfo;
@dynamic exerciseStyle;
@dynamic multiplier;
@dynamic hasOptionSymbol, optionSymbol;

typedef struct OBJECT_SECUOptionInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCurrencyType currency;
  OBJECT_SECUCallPutType callPutFlag;
  uint32_t contractSize;
  OBJECT_SECUExerciseStyle exerciseStyle;
  uint32_t multiplier;
  OBJECT_SECUFullID *underlingId;
  OBJECT_SECUInfo *underlingInfo;
  OBJECT_SECUFullID *optionSymbol;
  int64_t strikePrice;
  uint64_t expDate;
} OBJECT_SECUOptionInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currency",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUOptionInfo_FieldNumber_Currency,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, currency),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "callPutFlag",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCallPutType_EnumDescriptor,
        .number = OBJECT_SECUOptionInfo_FieldNumber_CallPutFlag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, callPutFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contractSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUOptionInfo_FieldNumber_ContractSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, contractSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "strikePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUOptionInfo_FieldNumber_StrikePrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, strikePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "expDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUOptionInfo_FieldNumber_ExpDate,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, expDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "underlingId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUOptionInfo_FieldNumber_UnderlingId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, underlingId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "underlingInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUOptionInfo_FieldNumber_UnderlingInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, underlingInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exerciseStyle",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUExerciseStyle_EnumDescriptor,
        .number = OBJECT_SECUOptionInfo_FieldNumber_ExerciseStyle,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, exerciseStyle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "multiplier",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUOptionInfo_FieldNumber_Multiplier,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, multiplier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "optionSymbol",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUOptionInfo_FieldNumber_OptionSymbol,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_SECUOptionInfo__storage_, optionSymbol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUOptionInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUOptionInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\002\013\000\003\014\000\004\013\000\005\007\000\006\nA\000\007\r\000\010\r\000\n\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUOptionInfo_Currency_RawValue(OBJECT_SECUOptionInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUOptionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUOptionInfo_FieldNumber_Currency];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUOptionInfo_Currency_RawValue(OBJECT_SECUOptionInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUOptionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUOptionInfo_FieldNumber_Currency];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUOptionInfo_CallPutFlag_RawValue(OBJECT_SECUOptionInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUOptionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUOptionInfo_FieldNumber_CallPutFlag];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUOptionInfo_CallPutFlag_RawValue(OBJECT_SECUOptionInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUOptionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUOptionInfo_FieldNumber_CallPutFlag];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUOptionInfo_ExerciseStyle_RawValue(OBJECT_SECUOptionInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUOptionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUOptionInfo_FieldNumber_ExerciseStyle];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUOptionInfo_ExerciseStyle_RawValue(OBJECT_SECUOptionInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUOptionInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUOptionInfo_FieldNumber_ExerciseStyle];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUSecuMeta

@implementation OBJECT_SECUSecuMeta

@dynamic hasId_p, id_p;
@dynamic pinyin;
@dynamic hasInfo, info;
@dynamic adjustArray, adjustArray_Count;
@dynamic usAdjustArray, usAdjustArray_Count;
@dynamic priceBase;

typedef struct OBJECT_SECUSecuMeta__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  NSString *pinyin;
  OBJECT_SECUInfo *info;
  NSMutableArray *adjustArray;
  NSMutableArray *usAdjustArray;
} OBJECT_SECUSecuMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUSecuMeta_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecuMeta__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pinyin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUSecuMeta_FieldNumber_Pinyin,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecuMeta__storage_, pinyin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUSecuMeta_FieldNumber_Info,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecuMeta__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adjustArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUAdjustInfo),
        .number = OBJECT_SECUSecuMeta_FieldNumber_AdjustArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecuMeta__storage_, adjustArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "usAdjustArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUUsAdjustInfo),
        .number = OBJECT_SECUSecuMeta_FieldNumber_UsAdjustArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecuMeta__storage_, usAdjustArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUSecuMeta_FieldNumber_PriceBase,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUSecuMeta__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUSecuMeta class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUSecuMeta__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\005\000UsAdjust\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUSectorMeta

@implementation OBJECT_SECUSectorMeta

@dynamic hasId_p, id_p;
@dynamic hasInfo, info;
@dynamic constituentArray, constituentArray_Count;
@dynamic pinyin;

typedef struct OBJECT_SECUSectorMeta__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  OBJECT_SECUInfo *info;
  NSMutableArray *constituentArray;
  NSString *pinyin;
} OBJECT_SECUSectorMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUSectorMeta_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUSectorMeta__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUSectorMeta_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUSectorMeta__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "constituentArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUSectorMeta_FieldNumber_ConstituentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUSectorMeta__storage_, constituentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pinyin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUSectorMeta_FieldNumber_Pinyin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUSectorMeta__storage_, pinyin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUSectorMeta class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUSectorMeta__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUIndexMeta

@implementation OBJECT_SECUIndexMeta

@dynamic hasId_p, id_p;
@dynamic hasInfo, info;
@dynamic constituentArray, constituentArray_Count;
@dynamic pinyin;

typedef struct OBJECT_SECUIndexMeta__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *id_p;
  OBJECT_SECUInfo *info;
  NSMutableArray *constituentArray;
  NSString *pinyin;
} OBJECT_SECUIndexMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUIndexMeta_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUIndexMeta__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_SECUIndexMeta_FieldNumber_Info,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUIndexMeta__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "constituentArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUIndexMeta_FieldNumber_ConstituentArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUIndexMeta__storage_, constituentArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pinyin",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUIndexMeta_FieldNumber_Pinyin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUIndexMeta__storage_, pinyin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUIndexMeta class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUIndexMeta__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUCodeListMeta

@implementation OBJECT_SECUCodeListMeta

@dynamic sseArray, sseArray_Count;
@dynamic shgtArray, shgtArray_Count;
@dynamic szseArray, szseArray_Count;
@dynamic szgtArray, szgtArray_Count;
@dynamic sectArray, sectArray_Count;
@dynamic hkexArray, hkexArray_Count;
@dynamic hksectArray, hksectArray_Count;
@dynamic nasdaqArray, nasdaqArray_Count;
@dynamic nyseArray, nyseArray_Count;
@dynamic amexArray, amexArray_Count;
@dynamic arcaArray, arcaArray_Count;
@dynamic batsArray, batsArray_Count;
@dynamic otcArray, otcArray_Count;
@dynamic gtshArray, gtshArray_Count;
@dynamic gtszArray, gtszArray_Count;
@dynamic uscomArray, uscomArray_Count;

typedef struct OBJECT_SECUCodeListMeta__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sseArray;
  NSMutableArray *shgtArray;
  NSMutableArray *szseArray;
  NSMutableArray *szgtArray;
  NSMutableArray *sectArray;
  NSMutableArray *hkexArray;
  NSMutableArray *hksectArray;
  NSMutableArray *nasdaqArray;
  NSMutableArray *nyseArray;
  NSMutableArray *amexArray;
  NSMutableArray *arcaArray;
  NSMutableArray *batsArray;
  NSMutableArray *otcArray;
  NSMutableArray *gtshArray;
  NSMutableArray *gtszArray;
  NSMutableArray *uscomArray;
} OBJECT_SECUCodeListMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sseArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_SseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, sseArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shgtArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_ShgtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, shgtArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "szseArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_SzseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, szseArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "szgtArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_SzgtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, szgtArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sectArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_SectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, sectArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hkexArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_HkexArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, hkexArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hksectArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_HksectArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, hksectArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nasdaqArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_NasdaqArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, nasdaqArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nyseArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_NyseArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, nyseArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "amexArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_AmexArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, amexArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "arcaArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_ArcaArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, arcaArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "batsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_BatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, batsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "otcArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_OtcArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, otcArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gtshArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_GtshArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, gtshArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gtszArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_GtszArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, gtszArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uscomArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUCodeListMeta_FieldNumber_UscomArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUCodeListMeta__storage_, uscomArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUCodeListMeta class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUCodeListMeta__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\020\001\000SSE\000\002\000SHGT\000\003\000SZSE\000\004\000SZGT\000\005\000SECT\000\006\000HKE"
        "X\000\007\000HKSECT\000\010\000NASDAQ\000\t\000NYSE\000\n\000AMEX\000\013\000ARCA"
        "\000\014\000BATS\000\r\000OTC\000\016\000GTSH\000\017\000GTSZ\000\020\000USCOM\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUAdjustInfo

@implementation OBJECT_SECUAdjustInfo

@dynamic seq;
@dynamic date;
@dynamic adjustingFactor;
@dynamic adjustingConst;
@dynamic adjustFactor;
@dynamic adjustConst;
@dynamic radioAdjustingFactor;

typedef struct OBJECT_SECUAdjustInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t seq;
  float adjustingFactor;
  float adjustingConst;
  float adjustFactor;
  float adjustConst;
  float radioAdjustingFactor;
  uint64_t date;
} OBJECT_SECUAdjustInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "adjustingFactor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_AdjustingFactor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, adjustingFactor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "adjustingConst",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_AdjustingConst,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, adjustingConst),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "adjustFactor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_AdjustFactor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, adjustFactor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "adjustConst",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_AdjustConst,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, adjustConst),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "radioAdjustingFactor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAdjustInfo_FieldNumber_RadioAdjustingFactor,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_SECUAdjustInfo__storage_, radioAdjustingFactor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUAdjustInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUAdjustInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\003\017\000\004\016\000\005\014\000\006\013\000\007\005\257\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUUsAdjustInfo

@implementation OBJECT_SECUUsAdjustInfo

@dynamic seq;
@dynamic date;
@dynamic backwardFactor;
@dynamic accumulateFactor;
@dynamic forwardFactor;

typedef struct OBJECT_SECUUsAdjustInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t seq;
  float backwardFactor;
  float accumulateFactor;
  float forwardFactor;
  uint64_t date;
} OBJECT_SECUUsAdjustInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUUsAdjustInfo_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUUsAdjustInfo__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "date",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUUsAdjustInfo_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUUsAdjustInfo__storage_, date),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "backwardFactor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUUsAdjustInfo_FieldNumber_BackwardFactor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUUsAdjustInfo__storage_, backwardFactor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "accumulateFactor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUUsAdjustInfo_FieldNumber_AccumulateFactor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUUsAdjustInfo__storage_, accumulateFactor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "forwardFactor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUUsAdjustInfo_FieldNumber_ForwardFactor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_SECUUsAdjustInfo__storage_, forwardFactor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUUsAdjustInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUUsAdjustInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\003\016\000\004\020\000\005\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUAHID

@implementation OBJECT_SECUAHID

@dynamic hasHid, hid;
@dynamic hasAid, aid;

typedef struct OBJECT_SECUAHID__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *hid;
  OBJECT_SECUFullID *aid;
} OBJECT_SECUAHID__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "hid",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUAHID_FieldNumber_Hid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUAHID__storage_, hid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "aid",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUAHID_FieldNumber_Aid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUAHID__storage_, aid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUAHID class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUAHID__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_SECUCurrencyRate

@implementation OBJECT_SECUCurrencyRate

@dynamic local;
@dynamic foreign;
@dynamic factor;
@dynamic rate;

typedef struct OBJECT_SECUCurrencyRate__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUCurrencyType local;
  OBJECT_SECUCurrencyType foreign;
  int64_t factor;
  int64_t rate;
} OBJECT_SECUCurrencyRate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "local",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUCurrencyRate_FieldNumber_Local,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUCurrencyRate__storage_, local),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "foreign",
        .dataTypeSpecific.enumDescFunc = OBJECT_SECUCurrencyType_EnumDescriptor,
        .number = OBJECT_SECUCurrencyRate_FieldNumber_Foreign,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUCurrencyRate__storage_, foreign),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "factor",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUCurrencyRate_FieldNumber_Factor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_SECUCurrencyRate__storage_, factor),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUCurrencyRate_FieldNumber_Rate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_SECUCurrencyRate__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUCurrencyRate class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUCurrencyRate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_SECUCurrencyRate_Local_RawValue(OBJECT_SECUCurrencyRate *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUCurrencyRate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUCurrencyRate_FieldNumber_Local];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUCurrencyRate_Local_RawValue(OBJECT_SECUCurrencyRate *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUCurrencyRate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUCurrencyRate_FieldNumber_Local];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_SECUCurrencyRate_Foreign_RawValue(OBJECT_SECUCurrencyRate *message) {
  GPBDescriptor *descriptor = [OBJECT_SECUCurrencyRate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUCurrencyRate_FieldNumber_Foreign];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_SECUCurrencyRate_Foreign_RawValue(OBJECT_SECUCurrencyRate *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_SECUCurrencyRate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_SECUCurrencyRate_FieldNumber_Foreign];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_SECUAHInfo

@implementation OBJECT_SECUAHInfo

@dynamic hasAhId, ahId;
@dynamic name;
@dynamic secuNamesArray, secuNamesArray_Count;

typedef struct OBJECT_SECUAHInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_SECUFullID *ahId;
  NSString *name;
  NSMutableArray *secuNamesArray;
} OBJECT_SECUAHInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ahId",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_SECUAHInfo_FieldNumber_AhId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_SECUAHInfo__storage_, ahId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_SECUAHInfo_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_SECUAHInfo__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "secuNamesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecurityName),
        .number = OBJECT_SECUAHInfo_FieldNumber_SecuNamesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_SECUAHInfo__storage_, secuNamesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_SECUAHInfo class]
                                     rootClass:[OBJECT_SECUSecuRoot class]
                                          file:OBJECT_SECUSecuRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_SECUAHInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\004\000\003\000secuNames\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
