// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kline.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Kline.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OBJECT_QUOTEKlineRoot

@implementation OBJECT_QUOTEKlineRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - OBJECT_QUOTEKlineRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_QUOTEKlineRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.quote"
                                                 objcPrefix:@"OBJECT_QUOTE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_QUOTEKLineType

GPBEnumDescriptor *OBJECT_QUOTEKLineType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "KtNone\000KtMin1\000KtMin5\000KtMin10\000KtMin15\000KtM"
        "in30\000KtMin60\000KtDay\000KtWeek\000KtMonth\000KtMnt3"
        "\000KtMnt6\000KtMnt12\000";
    static const int32_t values[] = {
        OBJECT_QUOTEKLineType_KtNone,
        OBJECT_QUOTEKLineType_KtMin1,
        OBJECT_QUOTEKLineType_KtMin5,
        OBJECT_QUOTEKLineType_KtMin10,
        OBJECT_QUOTEKLineType_KtMin15,
        OBJECT_QUOTEKLineType_KtMin30,
        OBJECT_QUOTEKLineType_KtMin60,
        OBJECT_QUOTEKLineType_KtDay,
        OBJECT_QUOTEKLineType_KtWeek,
        OBJECT_QUOTEKLineType_KtMonth,
        OBJECT_QUOTEKLineType_KtMnt3,
        OBJECT_QUOTEKLineType_KtMnt6,
        OBJECT_QUOTEKLineType_KtMnt12,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEKLineType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEKLineType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEKLineType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEKLineType_KtNone:
    case OBJECT_QUOTEKLineType_KtMin1:
    case OBJECT_QUOTEKLineType_KtMin5:
    case OBJECT_QUOTEKLineType_KtMin10:
    case OBJECT_QUOTEKLineType_KtMin15:
    case OBJECT_QUOTEKLineType_KtMin30:
    case OBJECT_QUOTEKLineType_KtMin60:
    case OBJECT_QUOTEKLineType_KtDay:
    case OBJECT_QUOTEKLineType_KtWeek:
    case OBJECT_QUOTEKLineType_KtMonth:
    case OBJECT_QUOTEKLineType_KtMnt3:
    case OBJECT_QUOTEKLineType_KtMnt6:
    case OBJECT_QUOTEKLineType_KtMnt12:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEKLineDirection

GPBEnumDescriptor *OBJECT_QUOTEKLineDirection_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "KdNone\000KdForward\000KdBackward\000";
    static const int32_t values[] = {
        OBJECT_QUOTEKLineDirection_KdNone,
        OBJECT_QUOTEKLineDirection_KdForward,
        OBJECT_QUOTEKLineDirection_KdBackward,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEKLineDirection)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEKLineDirection_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEKLineDirection_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEKLineDirection_KdNone:
    case OBJECT_QUOTEKLineDirection_KdForward:
    case OBJECT_QUOTEKLineDirection_KdBackward:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_QUOTEKLineData

@implementation OBJECT_QUOTEKLineData

@dynamic latestTime;
@dynamic preClose;
@dynamic open;
@dynamic close;
@dynamic high;
@dynamic low;
@dynamic avg;
@dynamic volume;
@dynamic amount;
@dynamic netchng;
@dynamic pctchng;
@dynamic turnoverRate;
@dynamic postVolume;
@dynamic postAmount;
@dynamic impliedVolatility;

typedef struct OBJECT_QUOTEKLineData__storage_ {
  uint32_t _has_storage_[1];
  int32_t pctchng;
  int32_t turnoverRate;
  uint64_t latestTime;
  int64_t preClose;
  int64_t open;
  int64_t close;
  int64_t high;
  int64_t low;
  int64_t avg;
  uint64_t volume;
  int64_t amount;
  int64_t netchng;
  uint64_t postVolume;
  int64_t postAmount;
  int64_t impliedVolatility;
} OBJECT_QUOTEKLineData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_LatestTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "preClose",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_PreClose,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, preClose),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "open",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Open,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, open),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "close",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Close,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, close),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "high",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_High,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, high),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "low",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Low,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, low),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "avg",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Avg,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, avg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Volume,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Amount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Netchng,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_Pctchng,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "turnoverRate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_TurnoverRate,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, turnoverRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "postVolume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_PostVolume,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, postVolume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "postAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_PostAmount,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, postAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "impliedVolatility",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEKLineData_FieldNumber_ImpliedVolatility,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEKLineData__storage_, impliedVolatility),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEKLineData class]
                                     rootClass:[OBJECT_QUOTEKlineRoot class]
                                          file:OBJECT_QUOTEKlineRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEKLineData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\n\000\002\010\000\014\014\000\r\n\000\016\n\000\017\021\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
