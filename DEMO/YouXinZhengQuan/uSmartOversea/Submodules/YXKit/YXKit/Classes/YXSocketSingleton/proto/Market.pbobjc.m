// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Market.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OBJECT_MARKETMarketRoot

@implementation OBJECT_MARKETMarketRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - OBJECT_MARKETMarketRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_MARKETMarketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.market"
                                                 objcPrefix:@"OBJECT_MARKET"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_MARKETMarketId

GPBEnumDescriptor *OBJECT_MARKETMarketId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Sh\000Sz\000Hk\000Us\000Sg\000Hkfuture\000Usoption\000Cr"
        "yptos\000";
    static const int32_t values[] = {
        OBJECT_MARKETMarketId_None,
        OBJECT_MARKETMarketId_Sh,
        OBJECT_MARKETMarketId_Sz,
        OBJECT_MARKETMarketId_Hk,
        OBJECT_MARKETMarketId_Us,
        OBJECT_MARKETMarketId_Sg,
        OBJECT_MARKETMarketId_Hkfuture,
        OBJECT_MARKETMarketId_Usoption,
        OBJECT_MARKETMarketId_Cryptos,
    };
    static const char *extraTextFormatInfo = "\t\000$\000\001\"\000\002\"\000\003\"\000\004\"\000\005\"\000\006(\000\007(\000\010\'\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_MARKETMarketId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_MARKETMarketId_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_MARKETMarketId_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_MARKETMarketId_None:
    case OBJECT_MARKETMarketId_Sh:
    case OBJECT_MARKETMarketId_Sz:
    case OBJECT_MARKETMarketId_Hk:
    case OBJECT_MARKETMarketId_Us:
    case OBJECT_MARKETMarketId_Sg:
    case OBJECT_MARKETMarketId_Hkfuture:
    case OBJECT_MARKETMarketId_Usoption:
    case OBJECT_MARKETMarketId_Cryptos:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_MARKETExchange

GPBEnumDescriptor *OBJECT_MARKETExchange_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ExchangeNone\000Sse\000Szse\000Neeq\000Hkex\000Nasdaq\000N"
        "yse\000Arca\000Amex\000Bats\000Otc\000Iex\000Finra\000Edgx\000Bz"
        "x\000Memx\000Bx\000Edga\000Psx\000Byx\000Nsx\000Miax\000Chx\000Sgx\000"
        "Aoe\000Pho\000Pao\000Wcb\000Iso\000Box\000Opq\000Nox\000C2E\000Btx\000"
        "Mia\000Nbz\000Isz\000Isj\000Bex\000Mpo\000Mix\000Otcpk\000Otcbb\000"
        "Alletf\000Cboe\000Arcabook\000Openbook\000Totolview\000"
        "Dji\000Comp\000Sp500\000Bn\000";
    static const int32_t values[] = {
        OBJECT_MARKETExchange_ExchangeNone,
        OBJECT_MARKETExchange_Sse,
        OBJECT_MARKETExchange_Szse,
        OBJECT_MARKETExchange_Neeq,
        OBJECT_MARKETExchange_Hkex,
        OBJECT_MARKETExchange_Nasdaq,
        OBJECT_MARKETExchange_Nyse,
        OBJECT_MARKETExchange_Arca,
        OBJECT_MARKETExchange_Amex,
        OBJECT_MARKETExchange_Bats,
        OBJECT_MARKETExchange_Otc,
        OBJECT_MARKETExchange_Iex,
        OBJECT_MARKETExchange_Finra,
        OBJECT_MARKETExchange_Edgx,
        OBJECT_MARKETExchange_Bzx,
        OBJECT_MARKETExchange_Memx,
        OBJECT_MARKETExchange_Bx,
        OBJECT_MARKETExchange_Edga,
        OBJECT_MARKETExchange_Psx,
        OBJECT_MARKETExchange_Byx,
        OBJECT_MARKETExchange_Nsx,
        OBJECT_MARKETExchange_Miax,
        OBJECT_MARKETExchange_Chx,
        OBJECT_MARKETExchange_Sgx,
        OBJECT_MARKETExchange_Aoe,
        OBJECT_MARKETExchange_Pho,
        OBJECT_MARKETExchange_Pao,
        OBJECT_MARKETExchange_Wcb,
        OBJECT_MARKETExchange_Iso,
        OBJECT_MARKETExchange_Box,
        OBJECT_MARKETExchange_Opq,
        OBJECT_MARKETExchange_Nox,
        OBJECT_MARKETExchange_C2E,
        OBJECT_MARKETExchange_Btx,
        OBJECT_MARKETExchange_Mia,
        OBJECT_MARKETExchange_Nbz,
        OBJECT_MARKETExchange_Isz,
        OBJECT_MARKETExchange_Isj,
        OBJECT_MARKETExchange_Bex,
        OBJECT_MARKETExchange_Mpo,
        OBJECT_MARKETExchange_Mix,
        OBJECT_MARKETExchange_Otcpk,
        OBJECT_MARKETExchange_Otcbb,
        OBJECT_MARKETExchange_Alletf,
        OBJECT_MARKETExchange_Cboe,
        OBJECT_MARKETExchange_Arcabook,
        OBJECT_MARKETExchange_Openbook,
        OBJECT_MARKETExchange_Totolview,
        OBJECT_MARKETExchange_Dji,
        OBJECT_MARKETExchange_Comp,
        OBJECT_MARKETExchange_Sp500,
        OBJECT_MARKETExchange_Bn,
    };
    static const char *extraTextFormatInfo = "\001 \003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_MARKETExchange)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_MARKETExchange_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_MARKETExchange_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_MARKETExchange_ExchangeNone:
    case OBJECT_MARKETExchange_Sse:
    case OBJECT_MARKETExchange_Szse:
    case OBJECT_MARKETExchange_Neeq:
    case OBJECT_MARKETExchange_Hkex:
    case OBJECT_MARKETExchange_Nasdaq:
    case OBJECT_MARKETExchange_Nyse:
    case OBJECT_MARKETExchange_Arca:
    case OBJECT_MARKETExchange_Amex:
    case OBJECT_MARKETExchange_Bats:
    case OBJECT_MARKETExchange_Otc:
    case OBJECT_MARKETExchange_Iex:
    case OBJECT_MARKETExchange_Finra:
    case OBJECT_MARKETExchange_Edgx:
    case OBJECT_MARKETExchange_Bzx:
    case OBJECT_MARKETExchange_Memx:
    case OBJECT_MARKETExchange_Bx:
    case OBJECT_MARKETExchange_Edga:
    case OBJECT_MARKETExchange_Psx:
    case OBJECT_MARKETExchange_Byx:
    case OBJECT_MARKETExchange_Nsx:
    case OBJECT_MARKETExchange_Miax:
    case OBJECT_MARKETExchange_Chx:
    case OBJECT_MARKETExchange_Sgx:
    case OBJECT_MARKETExchange_Aoe:
    case OBJECT_MARKETExchange_Pho:
    case OBJECT_MARKETExchange_Pao:
    case OBJECT_MARKETExchange_Wcb:
    case OBJECT_MARKETExchange_Iso:
    case OBJECT_MARKETExchange_Box:
    case OBJECT_MARKETExchange_Opq:
    case OBJECT_MARKETExchange_Nox:
    case OBJECT_MARKETExchange_C2E:
    case OBJECT_MARKETExchange_Btx:
    case OBJECT_MARKETExchange_Mia:
    case OBJECT_MARKETExchange_Nbz:
    case OBJECT_MARKETExchange_Isz:
    case OBJECT_MARKETExchange_Isj:
    case OBJECT_MARKETExchange_Bex:
    case OBJECT_MARKETExchange_Mpo:
    case OBJECT_MARKETExchange_Mix:
    case OBJECT_MARKETExchange_Otcpk:
    case OBJECT_MARKETExchange_Otcbb:
    case OBJECT_MARKETExchange_Alletf:
    case OBJECT_MARKETExchange_Cboe:
    case OBJECT_MARKETExchange_Arcabook:
    case OBJECT_MARKETExchange_Openbook:
    case OBJECT_MARKETExchange_Totolview:
    case OBJECT_MARKETExchange_Dji:
    case OBJECT_MARKETExchange_Comp:
    case OBJECT_MARKETExchange_Sp500:
    case OBJECT_MARKETExchange_Bn:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_MARKETListedSector

GPBEnumDescriptor *OBJECT_MARKETListedSector_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LsNone\000LsMain\000LsSmeb\000LsGemb\000LsStb\000LsCata"
        "list\000LsStar\000LsNasd\000LsEts\000";
    static const int32_t values[] = {
        OBJECT_MARKETListedSector_LsNone,
        OBJECT_MARKETListedSector_LsMain,
        OBJECT_MARKETListedSector_LsSmeb,
        OBJECT_MARKETListedSector_LsGemb,
        OBJECT_MARKETListedSector_LsStb,
        OBJECT_MARKETListedSector_LsCatalist,
        OBJECT_MARKETListedSector_LsStar,
        OBJECT_MARKETListedSector_LsNasd,
        OBJECT_MARKETListedSector_LsEts,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_MARKETListedSector)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_MARKETListedSector_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_MARKETListedSector_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_MARKETListedSector_LsNone:
    case OBJECT_MARKETListedSector_LsMain:
    case OBJECT_MARKETListedSector_LsSmeb:
    case OBJECT_MARKETListedSector_LsGemb:
    case OBJECT_MARKETListedSector_LsStb:
    case OBJECT_MARKETListedSector_LsCatalist:
    case OBJECT_MARKETListedSector_LsStar:
    case OBJECT_MARKETListedSector_LsNasd:
    case OBJECT_MARKETListedSector_LsEts:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_MARKETMarketStatus

GPBEnumDescriptor *OBJECT_MARKETMarketStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MsUnknown\000MsStart\000MsOpenCall\000MsBlocking\000"
        "MsTrading\000MsBreak\000MsCloseCall\000MsClose\000Ms"
        "OcOrderInput\000MsOcPreOrderMatch\000MsOcOrder"
        "Match\000MsCcRefPriceFixing\000MsCcOrderInput\000"
        "MsCcNoCancel\000MsCcRandomClosing\000MsCcOrder"
        "Match\000MsPreHours\000MsAfterHours\000MsNightOpe"
        "n\000MsNightEnd\000MsFutureDayOpen\000MsFutureDay"
        "Break\000MsFutureDayClose\000MsFutureDayWaitFo"
        "ropen\000MsGreyPreOpen\000MsGreyOpen\000MsGreyAft"
        "erOpen\000MsKcMatchingPeriod\000MsKcFixedPrice"
        "Trading\000";
    static const int32_t values[] = {
        OBJECT_MARKETMarketStatus_MsUnknown,
        OBJECT_MARKETMarketStatus_MsStart,
        OBJECT_MARKETMarketStatus_MsOpenCall,
        OBJECT_MARKETMarketStatus_MsBlocking,
        OBJECT_MARKETMarketStatus_MsTrading,
        OBJECT_MARKETMarketStatus_MsBreak,
        OBJECT_MARKETMarketStatus_MsCloseCall,
        OBJECT_MARKETMarketStatus_MsClose,
        OBJECT_MARKETMarketStatus_MsOcOrderInput,
        OBJECT_MARKETMarketStatus_MsOcPreOrderMatch,
        OBJECT_MARKETMarketStatus_MsOcOrderMatch,
        OBJECT_MARKETMarketStatus_MsCcRefPriceFixing,
        OBJECT_MARKETMarketStatus_MsCcOrderInput,
        OBJECT_MARKETMarketStatus_MsCcNoCancel,
        OBJECT_MARKETMarketStatus_MsCcRandomClosing,
        OBJECT_MARKETMarketStatus_MsCcOrderMatch,
        OBJECT_MARKETMarketStatus_MsPreHours,
        OBJECT_MARKETMarketStatus_MsAfterHours,
        OBJECT_MARKETMarketStatus_MsNightOpen,
        OBJECT_MARKETMarketStatus_MsNightEnd,
        OBJECT_MARKETMarketStatus_MsFutureDayOpen,
        OBJECT_MARKETMarketStatus_MsFutureDayBreak,
        OBJECT_MARKETMarketStatus_MsFutureDayClose,
        OBJECT_MARKETMarketStatus_MsFutureDayWaitForopen,
        OBJECT_MARKETMarketStatus_MsGreyPreOpen,
        OBJECT_MARKETMarketStatus_MsGreyOpen,
        OBJECT_MARKETMarketStatus_MsGreyAfterOpen,
        OBJECT_MARKETMarketStatus_MsKcMatchingPeriod,
        OBJECT_MARKETMarketStatus_MsKcFixedPriceTrading,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_MARKETMarketStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_MARKETMarketStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_MARKETMarketStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_MARKETMarketStatus_MsUnknown:
    case OBJECT_MARKETMarketStatus_MsStart:
    case OBJECT_MARKETMarketStatus_MsOpenCall:
    case OBJECT_MARKETMarketStatus_MsBlocking:
    case OBJECT_MARKETMarketStatus_MsTrading:
    case OBJECT_MARKETMarketStatus_MsBreak:
    case OBJECT_MARKETMarketStatus_MsCloseCall:
    case OBJECT_MARKETMarketStatus_MsClose:
    case OBJECT_MARKETMarketStatus_MsOcOrderInput:
    case OBJECT_MARKETMarketStatus_MsOcPreOrderMatch:
    case OBJECT_MARKETMarketStatus_MsOcOrderMatch:
    case OBJECT_MARKETMarketStatus_MsCcRefPriceFixing:
    case OBJECT_MARKETMarketStatus_MsCcOrderInput:
    case OBJECT_MARKETMarketStatus_MsCcNoCancel:
    case OBJECT_MARKETMarketStatus_MsCcRandomClosing:
    case OBJECT_MARKETMarketStatus_MsCcOrderMatch:
    case OBJECT_MARKETMarketStatus_MsPreHours:
    case OBJECT_MARKETMarketStatus_MsAfterHours:
    case OBJECT_MARKETMarketStatus_MsNightOpen:
    case OBJECT_MARKETMarketStatus_MsNightEnd:
    case OBJECT_MARKETMarketStatus_MsFutureDayOpen:
    case OBJECT_MARKETMarketStatus_MsFutureDayBreak:
    case OBJECT_MARKETMarketStatus_MsFutureDayClose:
    case OBJECT_MARKETMarketStatus_MsFutureDayWaitForopen:
    case OBJECT_MARKETMarketStatus_MsGreyPreOpen:
    case OBJECT_MARKETMarketStatus_MsGreyOpen:
    case OBJECT_MARKETMarketStatus_MsGreyAfterOpen:
    case OBJECT_MARKETMarketStatus_MsKcMatchingPeriod:
    case OBJECT_MARKETMarketStatus_MsKcFixedPriceTrading:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_MARKETLanguage

GPBEnumDescriptor *OBJECT_MARKETLanguage_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LangNone\000LangZhs\000LangZht\000LangEng\000";
    static const int32_t values[] = {
        OBJECT_MARKETLanguage_LangNone,
        OBJECT_MARKETLanguage_LangZhs,
        OBJECT_MARKETLanguage_LangZht,
        OBJECT_MARKETLanguage_LangEng,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_MARKETLanguage)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_MARKETLanguage_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_MARKETLanguage_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_MARKETLanguage_LangNone:
    case OBJECT_MARKETLanguage_LangZhs:
    case OBJECT_MARKETLanguage_LangZht:
    case OBJECT_MARKETLanguage_LangEng:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_MARKETStatus

@implementation OBJECT_MARKETStatus

@dynamic mktTime;
@dynamic market;
@dynamic status;

typedef struct OBJECT_MARKETStatus__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId market;
  OBJECT_MARKETMarketStatus status;
  uint64_t mktTime;
} OBJECT_MARKETStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mktTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_MARKETStatus_FieldNumber_MktTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_MARKETStatus__storage_, mktTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "market",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = OBJECT_MARKETStatus_FieldNumber_Market,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_MARKETStatus__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketStatus_EnumDescriptor,
        .number = OBJECT_MARKETStatus_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_MARKETStatus__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_MARKETStatus class]
                                     rootClass:[OBJECT_MARKETMarketRoot class]
                                          file:OBJECT_MARKETMarketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_MARKETStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_MARKETStatus_Market_RawValue(OBJECT_MARKETStatus *message) {
  GPBDescriptor *descriptor = [OBJECT_MARKETStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_MARKETStatus_FieldNumber_Market];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_MARKETStatus_Market_RawValue(OBJECT_MARKETStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_MARKETStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_MARKETStatus_FieldNumber_Market];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_MARKETStatus_Status_RawValue(OBJECT_MARKETStatus *message) {
  GPBDescriptor *descriptor = [OBJECT_MARKETStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_MARKETStatus_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_MARKETStatus_Status_RawValue(OBJECT_MARKETStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_MARKETStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_MARKETStatus_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
