// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object/quote/quote.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Quote.pbobjc.h"
#import "Secu.pbobjc.h"
#import "Market.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(OBJECT_QUOTEADRHQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEAHQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEBondQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTEBrokerData);
GPBObjCClassDeclaration(OBJECT_QUOTEBrokerDetail);
GPBObjCClassDeclaration(OBJECT_QUOTECASQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEFundQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTEIndexQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTEMarketStatusInfo);
GPBObjCClassDeclaration(OBJECT_QUOTEOptionBriefData);
GPBObjCClassDeclaration(OBJECT_QUOTEOptionChainsDataRow);
GPBObjCClassDeclaration(OBJECT_QUOTEOptionQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTEOrder);
GPBObjCClassDeclaration(OBJECT_QUOTEPosition);
GPBObjCClassDeclaration(OBJECT_QUOTEPositionData);
GPBObjCClassDeclaration(OBJECT_QUOTEQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTESectorQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTESimpleQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEStockQuoteData);
GPBObjCClassDeclaration(OBJECT_QUOTEUnderlyingQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEVCMQuote);
GPBObjCClassDeclaration(OBJECT_QUOTEWarrantQuoteData);
GPBObjCClassDeclaration(OBJECT_SECUFullID);
GPBObjCClassDeclaration(OBJECT_SECUInfo);
GPBObjCClassDeclaration(OBJECT_SECUSecurityName);

#pragma mark - OBJECT_QUOTEQuoteRoot

@implementation OBJECT_QUOTEQuoteRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OBJECT_QUOTEQuoteRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_QUOTEQuoteRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.quote"
                                                 objcPrefix:@"OBJECT_QUOTE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum OBJECT_QUOTEIMBDirection

GPBEnumDescriptor *OBJECT_QUOTEIMBDirection_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImbNone\000ImbEqule\000ImbBuy\000ImbSell\000";
    static const int32_t values[] = {
        OBJECT_QUOTEIMBDirection_ImbNone,
        OBJECT_QUOTEIMBDirection_ImbEqule,
        OBJECT_QUOTEIMBDirection_ImbBuy,
        OBJECT_QUOTEIMBDirection_ImbSell,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEIMBDirection)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEIMBDirection_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEIMBDirection_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEIMBDirection_ImbNone:
    case OBJECT_QUOTEIMBDirection_ImbEqule:
    case OBJECT_QUOTEIMBDirection_ImbBuy:
    case OBJECT_QUOTEIMBDirection_ImbSell:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTETradingStatus

GPBEnumDescriptor *OBJECT_QUOTETradingStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TsUnknown\000TsSuspended\000TsVolatility\000TsUnl"
        "isted\000TsZanting\000TsDelisting\000TsNormal\000TsT"
        "oBeListed\000TsToBeOpened\000";
    static const int32_t values[] = {
        OBJECT_QUOTETradingStatus_TsUnknown,
        OBJECT_QUOTETradingStatus_TsSuspended,
        OBJECT_QUOTETradingStatus_TsVolatility,
        OBJECT_QUOTETradingStatus_TsUnlisted,
        OBJECT_QUOTETradingStatus_TsZanting,
        OBJECT_QUOTETradingStatus_TsDelisting,
        OBJECT_QUOTETradingStatus_TsNormal,
        OBJECT_QUOTETradingStatus_TsToBeListed,
        OBJECT_QUOTETradingStatus_TsToBeOpened,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTETradingStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTETradingStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTETradingStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTETradingStatus_TsUnknown:
    case OBJECT_QUOTETradingStatus_TsSuspended:
    case OBJECT_QUOTETradingStatus_TsVolatility:
    case OBJECT_QUOTETradingStatus_TsUnlisted:
    case OBJECT_QUOTETradingStatus_TsZanting:
    case OBJECT_QUOTETradingStatus_TsDelisting:
    case OBJECT_QUOTETradingStatus_TsNormal:
    case OBJECT_QUOTETradingStatus_TsToBeListed:
    case OBJECT_QUOTETradingStatus_TsToBeOpened:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEQuoteType

GPBEnumDescriptor *OBJECT_QUOTEQuoteType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "QtNone\000QtBond\000QtEqty\000QtTrst\000QtWrnt\000QtInd"
        "ex\000QtOption\000QtPlate\000QtDlc\000";
    static const int32_t values[] = {
        OBJECT_QUOTEQuoteType_QtNone,
        OBJECT_QUOTEQuoteType_QtBond,
        OBJECT_QUOTEQuoteType_QtEqty,
        OBJECT_QUOTEQuoteType_QtTrst,
        OBJECT_QUOTEQuoteType_QtWrnt,
        OBJECT_QUOTEQuoteType_QtIndex,
        OBJECT_QUOTEQuoteType_QtOption,
        OBJECT_QUOTEQuoteType_QtPlate,
        OBJECT_QUOTEQuoteType_QtDlc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEQuoteType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEQuoteType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEQuoteType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEQuoteType_QtNone:
    case OBJECT_QUOTEQuoteType_QtBond:
    case OBJECT_QUOTEQuoteType_QtEqty:
    case OBJECT_QUOTEQuoteType_QtTrst:
    case OBJECT_QUOTEQuoteType_QtWrnt:
    case OBJECT_QUOTEQuoteType_QtIndex:
    case OBJECT_QUOTEQuoteType_QtOption:
    case OBJECT_QUOTEQuoteType_QtPlate:
    case OBJECT_QUOTEQuoteType_QtDlc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEPlateSetType

GPBEnumDescriptor *OBJECT_QUOTEPlateSetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PlateNone\000PlateAll\000PlateIndustry\000PlateRe"
        "gion\000PlateConcept\000";
    static const int32_t values[] = {
        OBJECT_QUOTEPlateSetType_PlateNone,
        OBJECT_QUOTEPlateSetType_PlateAll,
        OBJECT_QUOTEPlateSetType_PlateIndustry,
        OBJECT_QUOTEPlateSetType_PlateRegion,
        OBJECT_QUOTEPlateSetType_PlateConcept,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEPlateSetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEPlateSetType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEPlateSetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEPlateSetType_PlateNone:
    case OBJECT_QUOTEPlateSetType_PlateAll:
    case OBJECT_QUOTEPlateSetType_PlateIndustry:
    case OBJECT_QUOTEPlateSetType_PlateRegion:
    case OBJECT_QUOTEPlateSetType_PlateConcept:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEWarrantType

GPBEnumDescriptor *OBJECT_QUOTEWarrantType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "WrntNone\000WrntBuy\000WrntSell\000WrntBull\000WrntB"
        "ear\000";
    static const int32_t values[] = {
        OBJECT_QUOTEWarrantType_WrntNone,
        OBJECT_QUOTEWarrantType_WrntBuy,
        OBJECT_QUOTEWarrantType_WrntSell,
        OBJECT_QUOTEWarrantType_WrntBull,
        OBJECT_QUOTEWarrantType_WrntBear,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEWarrantType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEWarrantType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEWarrantType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEWarrantType_WrntNone:
    case OBJECT_QUOTEWarrantType_WrntBuy:
    case OBJECT_QUOTEWarrantType_WrntSell:
    case OBJECT_QUOTEWarrantType_WrntBull:
    case OBJECT_QUOTEWarrantType_WrntBear:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEQuoteScene

GPBEnumDescriptor *OBJECT_QUOTEQuoteScene_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "QsFull\000QsMobileBrief1\000QsDesktopBrief1\000Qs"
        "Custom\000";
    static const int32_t values[] = {
        OBJECT_QUOTEQuoteScene_QsFull,
        OBJECT_QUOTEQuoteScene_QsMobileBrief1,
        OBJECT_QUOTEQuoteScene_QsDesktopBrief1,
        OBJECT_QUOTEQuoteScene_QsCustom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEQuoteScene)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEQuoteScene_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEQuoteScene_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEQuoteScene_QsFull:
    case OBJECT_QUOTEQuoteScene_QsMobileBrief1:
    case OBJECT_QUOTEQuoteScene_QsDesktopBrief1:
    case OBJECT_QUOTEQuoteScene_QsCustom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEMoneynessType

GPBEnumDescriptor *OBJECT_QUOTEMoneynessType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MtAll\000MtIn\000MtOut\000MtOther\000";
    static const int32_t values[] = {
        OBJECT_QUOTEMoneynessType_MtAll,
        OBJECT_QUOTEMoneynessType_MtIn,
        OBJECT_QUOTEMoneynessType_MtOut,
        OBJECT_QUOTEMoneynessType_MtOther,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEMoneynessType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEMoneynessType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEMoneynessType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEMoneynessType_MtAll:
    case OBJECT_QUOTEMoneynessType_MtIn:
    case OBJECT_QUOTEMoneynessType_MtOut:
    case OBJECT_QUOTEMoneynessType_MtOther:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEStockConnectMarket

GPBEnumDescriptor *OBJECT_QUOTEStockConnectMarket_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ScmUnknown\000ScmHk2Sh\000ScmHk2Sz\000ScmSh2Hk\000Sc"
        "mSz2Hk\000";
    static const int32_t values[] = {
        OBJECT_QUOTEStockConnectMarket_ScmUnknown,
        OBJECT_QUOTEStockConnectMarket_ScmHk2Sh,
        OBJECT_QUOTEStockConnectMarket_ScmHk2Sz,
        OBJECT_QUOTEStockConnectMarket_ScmSh2Hk,
        OBJECT_QUOTEStockConnectMarket_ScmSz2Hk,
    };
    static const char *extraTextFormatInfo = "\004\001c\342\002A\000\002c\342\002A\000\003c\342\002A\000\004c\342\002A\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEStockConnectMarket)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEStockConnectMarket_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEStockConnectMarket_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEStockConnectMarket_ScmUnknown:
    case OBJECT_QUOTEStockConnectMarket_ScmHk2Sh:
    case OBJECT_QUOTEStockConnectMarket_ScmHk2Sz:
    case OBJECT_QUOTEStockConnectMarket_ScmSh2Hk:
    case OBJECT_QUOTEStockConnectMarket_ScmSz2Hk:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OBJECT_QUOTEUsTime

GPBEnumDescriptor *OBJECT_QUOTEUsTime_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UsUnknownTime\000UsSummerTime\000UsWinterTime\000";
    static const int32_t values[] = {
        OBJECT_QUOTEUsTime_UsUnknownTime,
        OBJECT_QUOTEUsTime_UsSummerTime,
        OBJECT_QUOTEUsTime_UsWinterTime,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OBJECT_QUOTEUsTime)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:OBJECT_QUOTEUsTime_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL OBJECT_QUOTEUsTime_IsValidValue(int32_t value__) {
  switch (value__) {
    case OBJECT_QUOTEUsTime_UsUnknownTime:
    case OBJECT_QUOTEUsTime_UsSummerTime:
    case OBJECT_QUOTEUsTime_UsWinterTime:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - OBJECT_QUOTEMarketStatusInfo

@implementation OBJECT_QUOTEMarketStatusInfo

@dynamic mktTime;
@dynamic market;
@dynamic status;
@dynamic desc;
@dynamic statusDescArray, statusDescArray_Count;

typedef struct OBJECT_QUOTEMarketStatusInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETMarketId market;
  OBJECT_MARKETMarketStatus status;
  NSString *desc;
  NSMutableArray *statusDescArray;
  uint64_t mktTime;
} OBJECT_QUOTEMarketStatusInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mktTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEMarketStatusInfo_FieldNumber_MktTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEMarketStatusInfo__storage_, mktTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "market",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketId_EnumDescriptor,
        .number = OBJECT_QUOTEMarketStatusInfo_FieldNumber_Market,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEMarketStatusInfo__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketStatus_EnumDescriptor,
        .number = OBJECT_QUOTEMarketStatusInfo_FieldNumber_Status,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEMarketStatusInfo__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "desc",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEMarketStatusInfo_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEMarketStatusInfo__storage_, desc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "statusDescArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUSecurityName),
        .number = OBJECT_QUOTEMarketStatusInfo_FieldNumber_StatusDescArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEMarketStatusInfo__storage_, statusDescArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEMarketStatusInfo class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEMarketStatusInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\005\000statusDesc\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEMarketStatusInfo_Market_RawValue(OBJECT_QUOTEMarketStatusInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEMarketStatusInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEMarketStatusInfo_FieldNumber_Market];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEMarketStatusInfo_Market_RawValue(OBJECT_QUOTEMarketStatusInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEMarketStatusInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEMarketStatusInfo_FieldNumber_Market];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTEMarketStatusInfo_Status_RawValue(OBJECT_QUOTEMarketStatusInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEMarketStatusInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEMarketStatusInfo_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEMarketStatusInfo_Status_RawValue(OBJECT_QUOTEMarketStatusInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEMarketStatusInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEMarketStatusInfo_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEStockConnectInfo

@implementation OBJECT_QUOTEStockConnectInfo

@dynamic scm;
@dynamic latestTime;
@dynamic dqbTime;
@dynamic dqb;
@dynamic buy;
@dynamic sell;
@dynamic buySell;
@dynamic dqbTotal;
@dynamic rate;

typedef struct OBJECT_QUOTEStockConnectInfo__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEStockConnectMarket scm;
  int32_t rate;
  uint64_t latestTime;
  uint64_t dqbTime;
  int64_t dqb;
  int64_t buy;
  int64_t sell;
  int64_t buySell;
  int64_t dqbTotal;
} OBJECT_QUOTEStockConnectInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scm",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEStockConnectMarket_EnumDescriptor,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_Scm,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, scm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_LatestTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dqbTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_DqbTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, dqbTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "dqb",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_Dqb,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, dqb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buy",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_Buy,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, buy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sell",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_Sell,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, sell),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "buySell",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_BuySell,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, buySell),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "dqbTotal",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_DqbTotal,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, dqbTotal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockConnectInfo_FieldNumber_Rate,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockConnectInfo__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEStockConnectInfo class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEStockConnectInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\002\n\000\003\007\000\007\007\000\010\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEStockConnectInfo_Scm_RawValue(OBJECT_QUOTEStockConnectInfo *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEStockConnectInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEStockConnectInfo_FieldNumber_Scm];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEStockConnectInfo_Scm_RawValue(OBJECT_QUOTEStockConnectInfo *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEStockConnectInfo descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEStockConnectInfo_FieldNumber_Scm];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEBrokerDetail

@implementation OBJECT_QUOTEBrokerDetail

@dynamic id_p;
@dynamic name;

typedef struct OBJECT_QUOTEBrokerDetail__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
} OBJECT_QUOTEBrokerDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBrokerDetail_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBrokerDetail__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBrokerDetail_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBrokerDetail__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEBrokerDetail class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEBrokerDetail__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\000Id\000\002D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEBrokerData

@implementation OBJECT_QUOTEBrokerData

@dynamic bidBrokerArray, bidBrokerArray_Count;
@dynamic askBrokerArray, askBrokerArray_Count;
@dynamic latestTime;

typedef struct OBJECT_QUOTEBrokerData__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *bidBrokerArray;
  NSMutableArray *askBrokerArray;
  uint64_t latestTime;
} OBJECT_QUOTEBrokerData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bidBrokerArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEBrokerDetail),
        .number = OBJECT_QUOTEBrokerData_FieldNumber_BidBrokerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBrokerData__storage_, bidBrokerArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "askBrokerArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEBrokerDetail),
        .number = OBJECT_QUOTEBrokerData_FieldNumber_AskBrokerArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBrokerData__storage_, askBrokerArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBrokerData_FieldNumber_LatestTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBrokerData__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEBrokerData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEBrokerData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\000bidBroker\000\002\000askBroker\000\003\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOptionBriefData

@implementation OBJECT_QUOTEOptionBriefData

@dynamic market;
@dynamic code;
@dynamic latestTime;
@dynamic latestPrice;
@dynamic volume;
@dynamic amount;
@dynamic netchng;
@dynamic pctchng;
@dynamic askVolume;
@dynamic askPrice;
@dynamic bidVolume;
@dynamic bidPrice;
@dynamic premium;
@dynamic impliedVolatility;
@dynamic delta;
@dynamic openInt;
@dynamic gamma;
@dynamic theta;
@dynamic vega;
@dynamic rho;
@dynamic breakevenPoint;
@dynamic multiplier;
@dynamic contractSize;
@dynamic strikePrice;
@dynamic maturityDate;
@dynamic priceBase;
@dynamic name;
@dynamic caflag;

typedef struct OBJECT_QUOTEOptionBriefData__storage_ {
  uint32_t _has_storage_[1];
  int32_t pctchng;
  int32_t premium;
  int32_t impliedVolatility;
  int32_t delta;
  int32_t gamma;
  int32_t theta;
  int32_t vega;
  int32_t rho;
  uint32_t multiplier;
  uint32_t contractSize;
  NSString *market;
  NSString *code;
  NSString *name;
  uint64_t latestTime;
  uint64_t latestPrice;
  uint64_t volume;
  uint64_t amount;
  int64_t netchng;
  uint64_t askVolume;
  uint64_t askPrice;
  uint64_t bidVolume;
  uint64_t bidPrice;
  uint64_t openInt;
  int64_t breakevenPoint;
  uint64_t strikePrice;
  uint64_t maturityDate;
  uint64_t priceBase;
} OBJECT_QUOTEOptionBriefData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "market",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Market,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, market),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Code,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_LatestTime,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_LatestPrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Volume,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Amount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Netchng,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Pctchng,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "askVolume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_AskVolume,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, askVolume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "askPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_AskPrice,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, askPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidVolume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_BidVolume,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, bidVolume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_BidPrice,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, bidPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "premium",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Premium,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, premium),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "impliedVolatility",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_ImpliedVolatility,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, impliedVolatility),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "delta",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Delta,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, delta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "openInt",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_OpenInt,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, openInt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "gamma",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Gamma,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, gamma),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "theta",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Theta,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, theta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "vega",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Vega,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, vega),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rho",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Rho,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, rho),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "breakevenPoint",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_BreakevenPoint,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, breakevenPoint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "multiplier",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Multiplier,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, multiplier),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contractSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_ContractSize,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, contractSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "strikePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_StrikePrice,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, strikePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "maturityDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_MaturityDate,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, maturityDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_PriceBase,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Name,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionBriefData__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "caflag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionBriefData_FieldNumber_Caflag,
        .hasIndex = 27,
        .offset = 28,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOptionBriefData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOptionBriefData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\016\003\n\000\004\013\000\t\t\000\n\010\000\013\t\000\014\010\000\016\021\000\020\007\000\025\016\000\027\014\000\036\013\000\037\014\000 \t\000"
        "\"c\003\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOptionMaturityDate

@implementation OBJECT_QUOTEOptionMaturityDate

@dynamic maturityDate;
@dynamic remainingTime;

typedef struct OBJECT_QUOTEOptionMaturityDate__storage_ {
  uint32_t _has_storage_[1];
  uint32_t remainingTime;
  uint64_t maturityDate;
} OBJECT_QUOTEOptionMaturityDate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "maturityDate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionMaturityDate_FieldNumber_MaturityDate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionMaturityDate__storage_, maturityDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "remainingTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionMaturityDate_FieldNumber_RemainingTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionMaturityDate__storage_, remainingTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOptionMaturityDate class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOptionMaturityDate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOptionChainsData

@implementation OBJECT_QUOTEOptionChainsData

@dynamic callGroupArray, callGroupArray_Count;
@dynamic putGroupArray, putGroupArray_Count;
@dynamic callNumber;
@dynamic putNumber;

typedef struct OBJECT_QUOTEOptionChainsData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t callNumber;
  uint32_t putNumber;
  NSMutableArray *callGroupArray;
  NSMutableArray *putGroupArray;
} OBJECT_QUOTEOptionChainsData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callGroupArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionBriefData),
        .number = OBJECT_QUOTEOptionChainsData_FieldNumber_CallGroupArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsData__storage_, callGroupArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "putGroupArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionBriefData),
        .number = OBJECT_QUOTEOptionChainsData_FieldNumber_PutGroupArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsData__storage_, putGroupArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionChainsData_FieldNumber_CallNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsData__storage_, callNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "putNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionChainsData_FieldNumber_PutNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsData__storage_, putNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOptionChainsData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOptionChainsData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\000callGroup\000\002\000putGroup\000\003\n\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOptionChainsDataRow

@implementation OBJECT_QUOTEOptionChainsDataRow

@dynamic hasCallData, callData;
@dynamic hasPutData, putData;
@dynamic strikePrice;

typedef struct OBJECT_QUOTEOptionChainsDataRow__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEOptionBriefData *callData;
  OBJECT_QUOTEOptionBriefData *putData;
  int64_t strikePrice;
} OBJECT_QUOTEOptionChainsDataRow__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "callData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionBriefData),
        .number = OBJECT_QUOTEOptionChainsDataRow_FieldNumber_CallData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRow__storage_, callData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "putData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionBriefData),
        .number = OBJECT_QUOTEOptionChainsDataRow_FieldNumber_PutData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRow__storage_, putData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "strikePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionChainsDataRow_FieldNumber_StrikePrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRow__storage_, strikePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOptionChainsDataRow class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOptionChainsDataRow__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\002\007\000\003\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOptionChainsDataRowList

@implementation OBJECT_QUOTEOptionChainsDataRowList

@dynamic rowListArray, rowListArray_Count;
@dynamic callNumber;
@dynamic putNumber;
@dynamic priceBase;

typedef struct OBJECT_QUOTEOptionChainsDataRowList__storage_ {
  uint32_t _has_storage_[1];
  uint32_t callNumber;
  uint32_t putNumber;
  NSMutableArray *rowListArray;
  uint64_t priceBase;
} OBJECT_QUOTEOptionChainsDataRowList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rowListArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionChainsDataRow),
        .number = OBJECT_QUOTEOptionChainsDataRowList_FieldNumber_RowListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRowList__storage_, rowListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "callNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionChainsDataRowList_FieldNumber_CallNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRowList__storage_, callNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "putNumber",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionChainsDataRowList_FieldNumber_PutNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRowList__storage_, putNumber),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionChainsDataRowList_FieldNumber_PriceBase,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionChainsDataRowList__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOptionChainsDataRowList class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOptionChainsDataRowList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\000rowList\000\002\n\000\003\t\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEPositionData

@implementation OBJECT_QUOTEPositionData

@dynamic bidPrice;
@dynamic bidSize;
@dynamic bidOrderCount;
@dynamic askPrice;
@dynamic askSize;
@dynamic askOrderCount;
@dynamic bidExchange;
@dynamic askExchange;

typedef struct OBJECT_QUOTEPositionData__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange bidExchange;
  OBJECT_MARKETExchange askExchange;
  int64_t bidPrice;
  uint64_t bidSize;
  uint64_t bidOrderCount;
  int64_t askPrice;
  uint64_t askSize;
  uint64_t askOrderCount;
} OBJECT_QUOTEPositionData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "bidPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPositionData_FieldNumber_BidPrice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, bidPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bidSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPositionData_FieldNumber_BidSize,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, bidSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidOrderCount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPositionData_FieldNumber_BidOrderCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, bidOrderCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "askPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPositionData_FieldNumber_AskPrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, askPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "askSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPositionData_FieldNumber_AskSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, askSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "askOrderCount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPositionData_FieldNumber_AskOrderCount,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, askOrderCount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidExchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = OBJECT_QUOTEPositionData_FieldNumber_BidExchange,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, bidExchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "askExchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = OBJECT_QUOTEPositionData_FieldNumber_AskExchange,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPositionData__storage_, askExchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEPositionData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEPositionData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\001\010\000\002\007\000\003\r\000\004\010\000\005\007\000\006\r\000\007\013\000\010\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEPositionData_BidExchange_RawValue(OBJECT_QUOTEPositionData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEPositionData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEPositionData_FieldNumber_BidExchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEPositionData_BidExchange_RawValue(OBJECT_QUOTEPositionData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEPositionData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEPositionData_FieldNumber_BidExchange];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTEPositionData_AskExchange_RawValue(OBJECT_QUOTEPositionData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEPositionData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEPositionData_FieldNumber_AskExchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEPositionData_AskExchange_RawValue(OBJECT_QUOTEPositionData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEPositionData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEPositionData_FieldNumber_AskExchange];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEVCMQuote

@implementation OBJECT_QUOTEVCMQuote

@dynamic startTime;
@dynamic endTime;
@dynamic refPrice;
@dynamic lowerPrice;
@dynamic upperPrice;

typedef struct OBJECT_QUOTEVCMQuote__storage_ {
  uint32_t _has_storage_[1];
  uint64_t startTime;
  uint64_t endTime;
  int64_t refPrice;
  int64_t lowerPrice;
  int64_t upperPrice;
} OBJECT_QUOTEVCMQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEVCMQuote_FieldNumber_StartTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEVCMQuote__storage_, startTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEVCMQuote_FieldNumber_EndTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEVCMQuote__storage_, endTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "refPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEVCMQuote_FieldNumber_RefPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEVCMQuote__storage_, refPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lowerPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEVCMQuote_FieldNumber_LowerPrice,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEVCMQuote__storage_, lowerPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "upperPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEVCMQuote_FieldNumber_UpperPrice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEVCMQuote__storage_, upperPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEVCMQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEVCMQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\001\t\000\002\007\000\003\010\000\004\n\000\005\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTECASQuote

@implementation OBJECT_QUOTECASQuote

@dynamic refPrice;
@dynamic lowerPrice;
@dynamic upperPrice;
@dynamic imbDirection;
@dynamic ordImbQty;
@dynamic iePrice;
@dynamic ieVol;

typedef struct OBJECT_QUOTECASQuote__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEIMBDirection imbDirection;
  int64_t refPrice;
  int64_t lowerPrice;
  int64_t upperPrice;
  uint64_t ordImbQty;
  int64_t iePrice;
  int64_t ieVol;
} OBJECT_QUOTECASQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "refPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECASQuote_FieldNumber_RefPrice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, refPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lowerPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECASQuote_FieldNumber_LowerPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, lowerPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "upperPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECASQuote_FieldNumber_UpperPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, upperPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imbDirection",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEIMBDirection_EnumDescriptor,
        .number = OBJECT_QUOTECASQuote_FieldNumber_ImbDirection,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, imbDirection),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ordImbQty",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECASQuote_FieldNumber_OrdImbQty,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, ordImbQty),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "iePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECASQuote_FieldNumber_IePrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, iePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ieVol",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECASQuote_FieldNumber_IeVol,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECASQuote__storage_, ieVol),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTECASQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTECASQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\001\010\000\002\n\000\003\n\000\004\014\000\005\t\000\006\007\000\007\005\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTECASQuote_ImbDirection_RawValue(OBJECT_QUOTECASQuote *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTECASQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTECASQuote_FieldNumber_ImbDirection];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTECASQuote_ImbDirection_RawValue(OBJECT_QUOTECASQuote *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTECASQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTECASQuote_FieldNumber_ImbDirection];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEAHQuote

@implementation OBJECT_QUOTEAHQuote

@dynamic hasId_p, id_p;
@dynamic latestPrice;
@dynamic netchng;
@dynamic pctchng;
@dynamic premium;
@dynamic priceBase;
@dynamic latestTime;

typedef struct OBJECT_QUOTEAHQuote__storage_ {
  uint32_t _has_storage_[1];
  int32_t pctchng;
  int32_t premium;
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  int64_t latestPrice;
  int64_t netchng;
  uint64_t latestTime;
} OBJECT_QUOTEAHQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTEAHQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEAHQuote_FieldNumber_LatestPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEAHQuote_FieldNumber_Netchng,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEAHQuote_FieldNumber_Pctchng,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "premium",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEAHQuote_FieldNumber_Premium,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, premium),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEAHQuote_FieldNumber_PriceBase,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEAHQuote_FieldNumber_LatestTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEAHQuote__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEAHQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEAHQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\013\000\006\t\000\007\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTERelateQuote

@implementation OBJECT_QUOTERelateQuote

@dynamic hasId_p, id_p;
@dynamic latestTime;
@dynamic latestPrice;
@dynamic netchng;
@dynamic pctchng;
@dynamic priceBase;

typedef struct OBJECT_QUOTERelateQuote__storage_ {
  uint32_t _has_storage_[1];
  int32_t pctchng;
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  uint64_t latestTime;
  int64_t latestPrice;
  int64_t netchng;
} OBJECT_QUOTERelateQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTERelateQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTERelateQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTERelateQuote_FieldNumber_LatestTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTERelateQuote__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTERelateQuote_FieldNumber_LatestPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTERelateQuote__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTERelateQuote_FieldNumber_Netchng,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTERelateQuote__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTERelateQuote_FieldNumber_Pctchng,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTERelateQuote__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTERelateQuote_FieldNumber_PriceBase,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTERelateQuote__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTERelateQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTERelateQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\002\n\000\003\013\000\006\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEADRHQuote

@implementation OBJECT_QUOTEADRHQuote

@dynamic hasId_p, id_p;
@dynamic convPrice;
@dynamic convRatio;
@dynamic relaNetchng;
@dynamic relaPctchng;
@dynamic latestPrice;
@dynamic netchng;
@dynamic pctchng;
@dynamic latestTime;
@dynamic priceBase;

typedef struct OBJECT_QUOTEADRHQuote__storage_ {
  uint32_t _has_storage_[1];
  uint32_t convRatio;
  int32_t relaPctchng;
  int32_t pctchng;
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  int64_t convPrice;
  int64_t relaNetchng;
  int64_t latestPrice;
  int64_t netchng;
  uint64_t latestTime;
} OBJECT_QUOTEADRHQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "convPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_ConvPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, convPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "convRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_ConvRatio,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, convRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "relaNetchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_RelaNetchng,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, relaNetchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "relaPctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_RelaPctchng,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, relaPctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_LatestPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_Netchng,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_Pctchng,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_LatestTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEADRHQuote_FieldNumber_PriceBase,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEADRHQuote__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEADRHQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEADRHQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\002\t\000\003\t\000\004\013\000\005\013\000\006\013\000\t\n\000\n\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEUnderlyingQuote

@implementation OBJECT_QUOTEUnderlyingQuote

@dynamic hasId_p, id_p;
@dynamic latestPrice;
@dynamic netchng;
@dynamic pctchng;
@dynamic priceBase;

typedef struct OBJECT_QUOTEUnderlyingQuote__storage_ {
  uint32_t _has_storage_[1];
  int32_t pctchng;
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  int64_t latestPrice;
  int64_t netchng;
} OBJECT_QUOTEUnderlyingQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTEUnderlyingQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEUnderlyingQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEUnderlyingQuote_FieldNumber_LatestPrice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEUnderlyingQuote__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEUnderlyingQuote_FieldNumber_Netchng,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEUnderlyingQuote__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEUnderlyingQuote_FieldNumber_Pctchng,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEUnderlyingQuote__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEUnderlyingQuote_FieldNumber_PriceBase,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEUnderlyingQuote__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEUnderlyingQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEUnderlyingQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\013\000\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEPosition

@implementation OBJECT_QUOTEPosition

@dynamic latestTime;
@dynamic cittDiff;
@dynamic cittThan;
@dynamic totalBidSize;
@dynamic totalAskSize;
@dynamic posDataArray, posDataArray_Count;

typedef struct OBJECT_QUOTEPosition__storage_ {
  uint32_t _has_storage_[1];
  int32_t cittThan;
  NSMutableArray *posDataArray;
  uint64_t latestTime;
  int64_t cittDiff;
  int64_t totalBidSize;
  int64_t totalAskSize;
} OBJECT_QUOTEPosition__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPosition_FieldNumber_LatestTime,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPosition__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "cittDiff",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPosition_FieldNumber_CittDiff,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPosition__storage_, cittDiff),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cittThan",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPosition_FieldNumber_CittThan,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPosition__storage_, cittThan),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "totalBidSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPosition_FieldNumber_TotalBidSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPosition__storage_, totalBidSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "totalAskSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEPosition_FieldNumber_TotalAskSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPosition__storage_, totalAskSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "posDataArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEPositionData),
        .number = OBJECT_QUOTEPosition_FieldNumber_PosDataArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEPosition__storage_, posDataArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEPosition class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEPosition__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\001\n\000\002\010\000\003\010\000\004\014\000\005\014\000\006\000posData\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEQuote

@implementation OBJECT_QUOTEQuote

@dynamic hasId_p, id_p;
@dynamic priceBase;
@dynamic hasMsInfo, msInfo;
@dynamic hasInfo, info;
@dynamic hasQuoteData, quoteData;
@dynamic hasSQuote, sQuote;
@dynamic hasPos, pos;
@dynamic hasBrokerData, brokerData;
@dynamic recvTime;
@dynamic delay;

typedef struct OBJECT_QUOTEQuote__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  OBJECT_QUOTEMarketStatusInfo *msInfo;
  OBJECT_SECUInfo *info;
  OBJECT_QUOTEQuoteData *quoteData;
  OBJECT_QUOTESimpleQuote *sQuote;
  OBJECT_QUOTEPosition *pos;
  OBJECT_QUOTEBrokerData *brokerData;
  uint64_t recvTime;
} OBJECT_QUOTEQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTEQuote_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuote_FieldNumber_PriceBase,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "msInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEMarketStatusInfo),
        .number = OBJECT_QUOTEQuote_FieldNumber_MsInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, msInfo),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "info",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUInfo),
        .number = OBJECT_QUOTEQuote_FieldNumber_Info,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, info),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "quoteData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEQuoteData),
        .number = OBJECT_QUOTEQuote_FieldNumber_QuoteData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, quoteData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sQuote",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTESimpleQuote),
        .number = OBJECT_QUOTEQuote_FieldNumber_SQuote,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, sQuote),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pos",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEPosition),
        .number = OBJECT_QUOTEQuote_FieldNumber_Pos,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, pos),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "brokerData",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEBrokerData),
        .number = OBJECT_QUOTEQuote_FieldNumber_BrokerData,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, brokerData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "recvTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuote_FieldNumber_RecvTime,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuote__storage_, recvTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "delay",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuote_FieldNumber_Delay,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\002\t\000\003\006\000\005\t\000\006\006\000\010\n\000\023\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEQuoteData

@implementation OBJECT_QUOTEQuoteData

@dynamic seq;
@dynamic latestTime;
@dynamic qtType;
@dynamic preClose;
@dynamic open;
@dynamic latestPrice;
@dynamic high;
@dynamic low;
@dynamic close;
@dynamic volume;
@dynamic amount;
@dynamic netchng;
@dynamic pctchng;
@dynamic amp;
@dynamic avg;
@dynamic week52High;
@dynamic week52Low;
@dynamic historyHigh;
@dynamic historyLow;
@dynamic upperLimit;
@dynamic lowerLimit;
@dynamic volumeRatio;
@dynamic turnoverRate;
@dynamic qtyUnit;
@dynamic postVolume;
@dynamic postAmount;
@dynamic askPrice;
@dynamic askSize;
@dynamic bidPrice;
@dynamic bidSize;
@dynamic trdStatus;
@dynamic accer;
@dynamic hasIndex, index;
@dynamic hasStock, stock;
@dynamic hasFund, fund;
@dynamic hasBond, bond;
@dynamic hasWarrant, warrant;
@dynamic hasOption, option;
@dynamic hasSector, sector;
@dynamic usTime;
@dynamic priceFlag;
@dynamic pctChngThisYear;
@dynamic pctChng5Day;
@dynamic netChngThisYear;
@dynamic netChng5Day;

typedef struct OBJECT_QUOTEQuoteData__storage_ {
  uint32_t _has_storage_[2];
  uint32_t seq;
  OBJECT_QUOTEQuoteType qtType;
  int32_t pctchng;
  int32_t amp;
  int32_t volumeRatio;
  int32_t turnoverRate;
  int32_t qtyUnit;
  OBJECT_QUOTETradingStatus trdStatus;
  int32_t accer;
  OBJECT_QUOTEUsTime usTime;
  int32_t priceFlag;
  int32_t pctChngThisYear;
  int32_t pctChng5Day;
  OBJECT_QUOTEIndexQuoteData *index;
  OBJECT_QUOTEStockQuoteData *stock;
  OBJECT_QUOTEFundQuoteData *fund;
  OBJECT_QUOTEBondQuoteData *bond;
  OBJECT_QUOTEWarrantQuoteData *warrant;
  OBJECT_QUOTEOptionQuoteData *option;
  OBJECT_QUOTESectorQuoteData *sector;
  uint64_t latestTime;
  int64_t preClose;
  int64_t open;
  int64_t latestPrice;
  int64_t high;
  int64_t low;
  int64_t close;
  uint64_t volume;
  int64_t amount;
  int64_t netchng;
  int64_t avg;
  int64_t week52High;
  int64_t week52Low;
  int64_t historyHigh;
  int64_t historyLow;
  int64_t upperLimit;
  int64_t lowerLimit;
  uint64_t postVolume;
  int64_t postAmount;
  int64_t askPrice;
  uint64_t askSize;
  int64_t bidPrice;
  uint64_t bidSize;
  int64_t netChngThisYear;
  int64_t netChng5Day;
} OBJECT_QUOTEQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_LatestTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "qtType",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteType_EnumDescriptor,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_QtType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, qtType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "preClose",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_PreClose,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, preClose),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "open",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Open,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, open),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_LatestPrice,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "high",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_High,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, high),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "low",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Low,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, low),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "close",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Close,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, close),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Volume,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Amount,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Netchng,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Pctchng,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "amp",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Amp,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, amp),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "avg",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Avg,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, avg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "week52High",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Week52High,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, week52High),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "week52Low",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Week52Low,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, week52Low),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "historyHigh",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_HistoryHigh,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, historyHigh),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "historyLow",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_HistoryLow,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, historyLow),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "upperLimit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_UpperLimit,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, upperLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lowerLimit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_LowerLimit,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, lowerLimit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "volumeRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_VolumeRatio,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, volumeRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "turnoverRate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_TurnoverRate,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, turnoverRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "qtyUnit",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_QtyUnit,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, qtyUnit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "postVolume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_PostVolume,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, postVolume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "postAmount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_PostAmount,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, postAmount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "askPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_AskPrice,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, askPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "askSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_AskSize,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, askSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_BidPrice,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, bidPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bidSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_BidSize,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, bidSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "trdStatus",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTETradingStatus_EnumDescriptor,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_TrdStatus,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, trdStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "accer",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Accer,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, accer),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "index",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEIndexQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Index,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stock",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEStockQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Stock,
        .hasIndex = 33,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, stock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fund",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEFundQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Fund,
        .hasIndex = 34,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, fund),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bond",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEBondQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Bond,
        .hasIndex = 35,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, bond),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "warrant",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEWarrantQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Warrant,
        .hasIndex = 36,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, warrant),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "option",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOptionQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Option,
        .hasIndex = 37,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, option),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sector",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTESectorQuoteData),
        .number = OBJECT_QUOTEQuoteData_FieldNumber_Sector,
        .hasIndex = 38,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, sector),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "usTime",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEUsTime_EnumDescriptor,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_UsTime,
        .hasIndex = 39,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, usTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_PriceFlag,
        .hasIndex = 40,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, priceFlag),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pctChngThisYear",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_PctChngThisYear,
        .hasIndex = 41,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, pctChngThisYear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pctChng5Day",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_PctChng5Day,
        .hasIndex = 42,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, pctChng5Day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "netChngThisYear",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_NetChngThisYear,
        .hasIndex = 43,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, netChngThisYear),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netChng5Day",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQuoteData_FieldNumber_NetChng5Day,
        .hasIndex = 44,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQuoteData__storage_, netChng5Day),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\032\002\n\000\003\006\000\004\010\000\006\013\000\020\n\000\021\t\000\022\013\000\023\n\000\024\n\000\025\n\000\026\013\000\027\014\000\030\007\000"
        "\031\n\000\032\n\000\036\010\000\037\007\000 \010\000!\007\000\"\t\0002\006\0003\t\0004\017\0005\013\0006\017\0007\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEQuoteData_QtType_RawValue(OBJECT_QUOTEQuoteData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQuoteData_FieldNumber_QtType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEQuoteData_QtType_RawValue(OBJECT_QUOTEQuoteData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQuoteData_FieldNumber_QtType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTEQuoteData_TrdStatus_RawValue(OBJECT_QUOTEQuoteData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQuoteData_FieldNumber_TrdStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEQuoteData_TrdStatus_RawValue(OBJECT_QUOTEQuoteData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQuoteData_FieldNumber_TrdStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTEQuoteData_UsTime_RawValue(OBJECT_QUOTEQuoteData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQuoteData_FieldNumber_UsTime];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEQuoteData_UsTime_RawValue(OBJECT_QUOTEQuoteData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQuoteData_FieldNumber_UsTime];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEIndexQuoteData

@implementation OBJECT_QUOTEIndexQuoteData

@dynamic up;
@dynamic unchange;
@dynamic down;
@dynamic mktCap;
@dynamic floatCap;
@dynamic pe;
@dynamic peTtm;
@dynamic pb;

typedef struct OBJECT_QUOTEIndexQuoteData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t up;
  uint32_t unchange;
  uint32_t down;
  int32_t pe;
  int32_t peTtm;
  int32_t pb;
  int64_t mktCap;
  int64_t floatCap;
} OBJECT_QUOTEIndexQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "up",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_Up,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, up),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "unchange",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_Unchange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, unchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "down",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_Down,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, down),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mktCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_MktCap,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, mktCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "floatCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_FloatCap,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, floatCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pe",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_Pe,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, pe),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peTtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_PeTtm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, peTtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pb",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEIndexQuoteData_FieldNumber_Pb,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEIndexQuoteData__storage_, pb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEIndexQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEIndexQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\006\000\005\010\000\007\003b\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEStockQuoteData

@implementation OBJECT_QUOTEStockQuoteData

@dynamic in_p;
@dynamic out_p;
@dynamic pe;
@dynamic peTtm;
@dynamic pb;
@dynamic divYield;
@dynamic mktCap;
@dynamic floatCap;
@dynamic hasAhQt, ahQt;
@dynamic hasCas, cas;
@dynamic hasVcm, vcm;
@dynamic hasAdrh, adrh;
@dynamic ps;

typedef struct OBJECT_QUOTEStockQuoteData__storage_ {
  uint32_t _has_storage_[1];
  int32_t pe;
  int32_t peTtm;
  int32_t pb;
  int32_t divYield;
  int32_t ps;
  OBJECT_QUOTEAHQuote *ahQt;
  OBJECT_QUOTECASQuote *cas;
  OBJECT_QUOTEVCMQuote *vcm;
  OBJECT_QUOTEADRHQuote *adrh;
  uint64_t in_p;
  uint64_t out_p;
  int64_t mktCap;
  int64_t floatCap;
} OBJECT_QUOTEStockQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "in_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_In_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, in_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "out_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Out_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, out_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "pe",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Pe,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, pe),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peTtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_PeTtm,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, peTtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pb",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Pb,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, pb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "divYield",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_DivYield,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, divYield),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mktCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_MktCap,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, mktCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "floatCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_FloatCap,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, floatCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ahQt",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEAHQuote),
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_AhQt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, ahQt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cas",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECASQuote),
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Cas,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, cas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vcm",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEVCMQuote),
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Vcm,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, vcm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adrh",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEADRHQuote),
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Adrh,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, adrh),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ps",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEStockQuoteData_FieldNumber_Ps,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEStockQuoteData__storage_, ps),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEStockQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEStockQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\004\003b\000\006\010\000\007\006\000\010\010\000\t\004\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEFundQuoteData

@implementation OBJECT_QUOTEFundQuoteData

@dynamic in_p;
@dynamic out_p;
@dynamic premium;
@dynamic mktCap;
@dynamic floatCap;
@dynamic hasCas, cas;
@dynamic hasVcm, vcm;
@dynamic pe;
@dynamic peTtm;
@dynamic pb;
@dynamic divYield;

typedef struct OBJECT_QUOTEFundQuoteData__storage_ {
  uint32_t _has_storage_[1];
  int32_t premium;
  int32_t pe;
  int32_t peTtm;
  int32_t pb;
  int32_t divYield;
  OBJECT_QUOTECASQuote *cas;
  OBJECT_QUOTEVCMQuote *vcm;
  uint64_t in_p;
  uint64_t out_p;
  int64_t mktCap;
  int64_t floatCap;
} OBJECT_QUOTEFundQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "in_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_In_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, in_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "out_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_Out_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, out_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "premium",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_Premium,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, premium),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mktCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_MktCap,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, mktCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "floatCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_FloatCap,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, floatCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "cas",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTECASQuote),
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_Cas,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, cas),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "vcm",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEVCMQuote),
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_Vcm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, vcm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pe",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_Pe,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, pe),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peTtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_PeTtm,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, peTtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pb",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_Pb,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, pb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "divYield",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEFundQuoteData_FieldNumber_DivYield,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEFundQuoteData__storage_, divYield),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEFundQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEFundQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\004\006\000\005\010\000\013\003b\000\r\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEBondQuoteData

@implementation OBJECT_QUOTEBondQuoteData

@dynamic in_p;
@dynamic out_p;
@dynamic mktCap;
@dynamic floatCap;

typedef struct OBJECT_QUOTEBondQuoteData__storage_ {
  uint32_t _has_storage_[1];
  uint64_t in_p;
  uint64_t out_p;
  int64_t mktCap;
  int64_t floatCap;
} OBJECT_QUOTEBondQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "in_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBondQuoteData_FieldNumber_In_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBondQuoteData__storage_, in_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "out_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBondQuoteData_FieldNumber_Out_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBondQuoteData__storage_, out_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "mktCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBondQuoteData_FieldNumber_MktCap,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBondQuoteData__storage_, mktCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "floatCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEBondQuoteData_FieldNumber_FloatCap,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEBondQuoteData__storage_, floatCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEBondQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEBondQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\006\000\004\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOptionQuoteData

@implementation OBJECT_QUOTEOptionQuoteData

@dynamic premium;
@dynamic impliedVolatility;
@dynamic delta;
@dynamic gamma;
@dynamic theta;
@dynamic vega;
@dynamic rho;
@dynamic openInt;
@dynamic theoryPrice;
@dynamic breakevenPoint;
@dynamic inValue;
@dynamic timeValue;
@dynamic remainingTime;

typedef struct OBJECT_QUOTEOptionQuoteData__storage_ {
  uint32_t _has_storage_[1];
  int32_t premium;
  int32_t impliedVolatility;
  int32_t delta;
  int32_t gamma;
  int32_t theta;
  int32_t vega;
  int32_t rho;
  int32_t remainingTime;
  uint64_t openInt;
  int64_t theoryPrice;
  int64_t breakevenPoint;
  int64_t inValue;
  int64_t timeValue;
} OBJECT_QUOTEOptionQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "premium",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_Premium,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, premium),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "impliedVolatility",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_ImpliedVolatility,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, impliedVolatility),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "delta",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_Delta,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, delta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gamma",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_Gamma,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, gamma),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "theta",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_Theta,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, theta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "vega",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_Vega,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, vega),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "rho",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_Rho,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, rho),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "openInt",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_OpenInt,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, openInt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "theoryPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_TheoryPrice,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, theoryPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "breakevenPoint",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_BreakevenPoint,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, breakevenPoint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "inValue",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_InValue,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, inValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "timeValue",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_TimeValue,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, timeValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "remainingTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOptionQuoteData_FieldNumber_RemainingTime,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOptionQuoteData__storage_, remainingTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOptionQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOptionQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\007\002\021\000\010\007\000\t\013\000\n\016\000\013\007\000\014\t\000\r\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEWarrantQuoteData

@implementation OBJECT_QUOTEWarrantQuoteData

@dynamic in_p;
@dynamic out_p;
@dynamic wrnType;
@dynamic premium;
@dynamic impliedVolatility;
@dynamic delta;
@dynamic moneyness;
@dynamic gearing;
@dynamic effgearing;
@dynamic diffRatio;
@dynamic convertPrice;
@dynamic breakevenPoint;
@dynamic fromUpper;
@dynamic fromLower;
@dynamic hasUnderlingQt, underlingQt;

typedef struct OBJECT_QUOTEWarrantQuoteData__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTEWarrantType wrnType;
  int32_t premium;
  int32_t impliedVolatility;
  int32_t delta;
  int32_t moneyness;
  int32_t gearing;
  int32_t effgearing;
  int32_t diffRatio;
  int32_t breakevenPoint;
  int32_t fromUpper;
  int32_t fromLower;
  OBJECT_QUOTEUnderlyingQuote *underlingQt;
  uint64_t in_p;
  uint64_t out_p;
  int64_t convertPrice;
} OBJECT_QUOTEWarrantQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "in_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_In_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, in_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "out_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_Out_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, out_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "wrnType",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEWarrantType_EnumDescriptor,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_WrnType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, wrnType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "premium",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_Premium,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, premium),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "impliedVolatility",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_ImpliedVolatility,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, impliedVolatility),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "delta",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_Delta,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, delta),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "moneyness",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_Moneyness,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, moneyness),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "gearing",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_Gearing,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, gearing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "effgearing",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_Effgearing,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, effgearing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "diffRatio",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_DiffRatio,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, diffRatio),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "convertPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_ConvertPrice,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, convertPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "breakevenPoint",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_BreakevenPoint,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, breakevenPoint),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fromUpper",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_FromUpper,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, fromUpper),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fromLower",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_FromLower,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, fromLower),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "underlingQt",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEUnderlyingQuote),
        .number = OBJECT_QUOTEWarrantQuoteData_FieldNumber_UnderlingQt,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEWarrantQuoteData__storage_, underlingQt),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEWarrantQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEWarrantQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\003\007\000\005\021\000\n\t\000\013\014\000\014\016\000\r\t\000\016\t\000\024\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEWarrantQuoteData_WrnType_RawValue(OBJECT_QUOTEWarrantQuoteData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEWarrantQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEWarrantQuoteData_FieldNumber_WrnType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEWarrantQuoteData_WrnType_RawValue(OBJECT_QUOTEWarrantQuoteData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEWarrantQuoteData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEWarrantQuoteData_FieldNumber_WrnType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTESectorQuoteData

@implementation OBJECT_QUOTESectorQuoteData

@dynamic up;
@dynamic unchange;
@dynamic down;
@dynamic mktCap;
@dynamic floatCap;
@dynamic pe;
@dynamic peTtm;
@dynamic pb;

typedef struct OBJECT_QUOTESectorQuoteData__storage_ {
  uint32_t _has_storage_[1];
  uint32_t up;
  uint32_t unchange;
  uint32_t down;
  int32_t pe;
  int32_t peTtm;
  int32_t pb;
  int64_t mktCap;
  int64_t floatCap;
} OBJECT_QUOTESectorQuoteData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "up",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_Up,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, up),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "unchange",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_Unchange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, unchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "down",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_Down,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, down),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mktCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_MktCap,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, mktCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "floatCap",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_FloatCap,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, floatCap),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pe",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_Pe,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, pe),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "peTtm",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_PeTtm,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, peTtm),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pb",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESectorQuoteData_FieldNumber_Pb,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESectorQuoteData__storage_, pb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTESectorQuoteData class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTESectorQuoteData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\004\006\000\005\010\000\007\003b\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTESimpleQuote

@implementation OBJECT_QUOTESimpleQuote

@dynamic seq;
@dynamic latestTime;
@dynamic latestPrice;
@dynamic netchng;
@dynamic pctchng;
@dynamic mktStatus;
@dynamic trdStatus;
@dynamic qtType;
@dynamic high;
@dynamic low;
@dynamic volume;
@dynamic amount;

typedef struct OBJECT_QUOTESimpleQuote__storage_ {
  uint32_t _has_storage_[1];
  uint32_t seq;
  int32_t pctchng;
  OBJECT_MARKETMarketStatus mktStatus;
  OBJECT_QUOTETradingStatus trdStatus;
  OBJECT_QUOTEQuoteType qtType;
  uint64_t latestTime;
  int64_t latestPrice;
  int64_t netchng;
  int64_t high;
  int64_t low;
  uint64_t volume;
  int64_t amount;
} OBJECT_QUOTESimpleQuote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, seq),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_LatestTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, latestTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "latestPrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_LatestPrice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, latestPrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "netchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_Netchng,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, netchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "pctchng",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_Pctchng,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, pctchng),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mktStatus",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETMarketStatus_EnumDescriptor,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_MktStatus,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, mktStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trdStatus",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTETradingStatus_EnumDescriptor,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_TrdStatus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, trdStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "qtType",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTEQuoteType_EnumDescriptor,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_QtType,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, qtType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "high",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_High,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, high),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "low",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_Low,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, low),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_Volume,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTESimpleQuote_FieldNumber_Amount,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(OBJECT_QUOTESimpleQuote__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTESimpleQuote class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTESimpleQuote__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\n\000\003\013\000\006\t\000\007\t\000\010\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTESimpleQuote_MktStatus_RawValue(OBJECT_QUOTESimpleQuote *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTESimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTESimpleQuote_FieldNumber_MktStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTESimpleQuote_MktStatus_RawValue(OBJECT_QUOTESimpleQuote *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTESimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTESimpleQuote_FieldNumber_MktStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTESimpleQuote_TrdStatus_RawValue(OBJECT_QUOTESimpleQuote *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTESimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTESimpleQuote_FieldNumber_TrdStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTESimpleQuote_TrdStatus_RawValue(OBJECT_QUOTESimpleQuote *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTESimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTESimpleQuote_FieldNumber_TrdStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t OBJECT_QUOTESimpleQuote_QtType_RawValue(OBJECT_QUOTESimpleQuote *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTESimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTESimpleQuote_FieldNumber_QtType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTESimpleQuote_QtType_RawValue(OBJECT_QUOTESimpleQuote *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTESimpleQuote descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTESimpleQuote_FieldNumber_QtType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - OBJECT_QUOTEOrder

@implementation OBJECT_QUOTEOrder

@dynamic price;
@dynamic size;
@dynamic id_p;

typedef struct OBJECT_QUOTEOrder__storage_ {
  uint32_t _has_storage_[1];
  int64_t price;
  int64_t size;
  int64_t id_p;
} OBJECT_QUOTEOrder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "price",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrder_FieldNumber_Price,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrder__storage_, price),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrder_FieldNumber_Size,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrder__storage_, size),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrder_FieldNumber_Id_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrder__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOrder class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOrder__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEOrderBook

@implementation OBJECT_QUOTEOrderBook

@dynamic hasId_p, id_p;
@dynamic askArray, askArray_Count;
@dynamic bidArray, bidArray_Count;
@dynamic time;
@dynamic mergeFlag;
@dynamic recvTime;
@dynamic sendTime;
@dynamic priceBase;

typedef struct OBJECT_QUOTEOrderBook__storage_ {
  uint32_t _has_storage_[1];
  uint32_t priceBase;
  OBJECT_SECUFullID *id_p;
  NSMutableArray *askArray;
  NSMutableArray *bidArray;
  int64_t time;
  int64_t recvTime;
  int64_t sendTime;
} OBJECT_QUOTEOrderBook__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTEOrderBook_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "askArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOrder),
        .number = OBJECT_QUOTEOrderBook_FieldNumber_AskArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, askArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bidArray",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_QUOTEOrder),
        .number = OBJECT_QUOTEOrderBook_FieldNumber_BidArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, bidArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrderBook_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mergeFlag",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrderBook_FieldNumber_MergeFlag,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "recvTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrderBook_FieldNumber_RecvTime,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, recvTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sendTime",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrderBook_FieldNumber_SendTime,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, sendTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "priceBase",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEOrderBook_FieldNumber_PriceBase,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEOrderBook__storage_, priceBase),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEOrderBook class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEOrderBook__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\005\t\000\006\010\000\007\010\000\010\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTECodeStatus

@implementation OBJECT_QUOTECodeStatus

@dynamic hasId_p, id_p;
@dynamic time;
@dynamic trdStatus;

typedef struct OBJECT_QUOTECodeStatus__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_QUOTETradingStatus trdStatus;
  OBJECT_SECUFullID *id_p;
  int64_t time;
} OBJECT_QUOTECodeStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OBJECT_SECUFullID),
        .number = OBJECT_QUOTECodeStatus_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECodeStatus__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTECodeStatus_FieldNumber_Time,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECodeStatus__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "trdStatus",
        .dataTypeSpecific.enumDescFunc = OBJECT_QUOTETradingStatus_EnumDescriptor,
        .number = OBJECT_QUOTECodeStatus_FieldNumber_TrdStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTECodeStatus__storage_, trdStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTECodeStatus class]
                                     rootClass:[OBJECT_QUOTEQuoteRoot class]
                                          file:OBJECT_QUOTEQuoteRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTECodeStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTECodeStatus_TrdStatus_RawValue(OBJECT_QUOTECodeStatus *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTECodeStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTECodeStatus_FieldNumber_TrdStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTECodeStatus_TrdStatus_RawValue(OBJECT_QUOTECodeStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTECodeStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTECodeStatus_FieldNumber_TrdStatus];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
