// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qprice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Qprice.pbobjc.h"
#import "Market.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OBJECT_QUOTEQpriceRoot

@implementation OBJECT_QUOTEQpriceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OBJECT_QUOTEQpriceRoot_FileDescriptor

static GPBFileDescriptor *OBJECT_QUOTEQpriceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"yx.quote.v2.object.quote"
                                                 objcPrefix:@"OBJECT_QUOTE"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - OBJECT_QUOTEQPriceData

@implementation OBJECT_QUOTEQPriceData

@dynamic tradePrice;
@dynamic volume;
@dynamic askSize;
@dynamic bidSize;
@dynamic bothSize;
@dynamic rate;

typedef struct OBJECT_QUOTEQPriceData__storage_ {
  uint32_t _has_storage_[1];
  int32_t rate;
  int64_t tradePrice;
  uint64_t volume;
  uint64_t askSize;
  uint64_t bidSize;
  uint64_t bothSize;
} OBJECT_QUOTEQPriceData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tradePrice",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQPriceData_FieldNumber_TradePrice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQPriceData__storage_, tradePrice),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQPriceData_FieldNumber_Volume,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQPriceData__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "askSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQPriceData_FieldNumber_AskSize,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQPriceData__storage_, askSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQPriceData_FieldNumber_BidSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQPriceData__storage_, bidSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bothSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQPriceData_FieldNumber_BothSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQPriceData__storage_, bothSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "rate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQPriceData_FieldNumber_Rate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQPriceData__storage_, rate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEQPriceData class]
                                     rootClass:[OBJECT_QUOTEQpriceRoot class]
                                          file:OBJECT_QUOTEQpriceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEQPriceData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001\n\000\003\007\000\004\007\000\005\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OBJECT_QUOTEQExchangeData

@implementation OBJECT_QUOTEQExchangeData

@dynamic exchange;
@dynamic amount;
@dynamic volume;
@dynamic askSize;
@dynamic bidSize;
@dynamic bothSize;
@dynamic amtRate;
@dynamic volRate;

typedef struct OBJECT_QUOTEQExchangeData__storage_ {
  uint32_t _has_storage_[1];
  OBJECT_MARKETExchange exchange;
  int32_t amtRate;
  int32_t volRate;
  uint64_t amount;
  uint64_t volume;
  uint64_t askSize;
  uint64_t bidSize;
  uint64_t bothSize;
} OBJECT_QUOTEQExchangeData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exchange",
        .dataTypeSpecific.enumDescFunc = OBJECT_MARKETExchange_EnumDescriptor,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_Exchange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, exchange),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "amount",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_Amount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, amount),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "volume",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_Volume,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, volume),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "askSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_AskSize,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, askSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bidSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_BidSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, bidSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "bothSize",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_BothSize,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, bothSize),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "amtRate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_AmtRate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, amtRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "volRate",
        .dataTypeSpecific.clazz = Nil,
        .number = OBJECT_QUOTEQExchangeData_FieldNumber_VolRate,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OBJECT_QUOTEQExchangeData__storage_, volRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OBJECT_QUOTEQExchangeData class]
                                     rootClass:[OBJECT_QUOTEQpriceRoot class]
                                          file:OBJECT_QUOTEQpriceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OBJECT_QUOTEQExchangeData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\004\007\000\005\007\000\006\010\000\007\007\000\010\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OBJECT_QUOTEQExchangeData_Exchange_RawValue(OBJECT_QUOTEQExchangeData *message) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQExchangeData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQExchangeData_FieldNumber_Exchange];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOBJECT_QUOTEQExchangeData_Exchange_RawValue(OBJECT_QUOTEQExchangeData *message, int32_t value) {
  GPBDescriptor *descriptor = [OBJECT_QUOTEQExchangeData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OBJECT_QUOTEQExchangeData_FieldNumber_Exchange];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
